# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InternalRestCredential(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, user_name: str=None, password: str=None):  # noqa: E501
        """InternalRestCredential - a model defined in Swagger

        :param user_name: The user_name of this InternalRestCredential.  # noqa: E501
        :type user_name: str
        :param password: The password of this InternalRestCredential.  # noqa: E501
        :type password: str
        """
        self.swagger_types = {
            'user_name': str,
            'password': str
        }

        self.attribute_map = {
            'user_name': 'userName',
            'password': 'password'
        }
        self._user_name = user_name
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'InternalRestCredential':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InternalRestCredential of this InternalRestCredential.  # noqa: E501
        :rtype: InternalRestCredential
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this InternalRestCredential.

        Represents the user name in the credential.  # noqa: E501

        :return: The user_name of this InternalRestCredential.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this InternalRestCredential.

        Represents the user name in the credential.  # noqa: E501

        :param user_name: The user_name of this InternalRestCredential.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self) -> str:
        """Gets the password of this InternalRestCredential.

        Represents the password in the credential.  # noqa: E501

        :return: The password of this InternalRestCredential.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this InternalRestCredential.

        Represents the password in the credential.  # noqa: E501

        :param password: The password of this InternalRestCredential.
        :type password: str
        """

        self._password = password
