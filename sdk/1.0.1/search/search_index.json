{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#vmware-aria-operations-integration-sdk","title":"VMware Aria Operations Integration SDK","text":"<p>Welcome to the VMware Aria Operations Integration SDK.</p>"},{"location":"#what-is-the-integration-sdk","title":"What is the Integration SDK?","text":"<p>The Integration SDK creates Management Packs to add custom objects, data, and relationships from an endpoint into VMware Aria Operations.</p> <p>Using this SDK to create a Management Pack requires some Python knowledge (more languages are planned), and an understanding of how to get data from the endpoint using an API. For example, to create a Management Pack for Cassandra DB, an understanding of how to write an SQL query, execute it, and read the results is required.</p> <p>Currently, installing a Management Pack built with the Integration SDK is supported for On-Prem versions of VMware Aria Operations only, but we are working to bring support to VMware Aria Operations Cloud in a future release.</p> <p>For a high-level overview of VMware Aria Operations, Management Packs, and this SDK, see the introduction.</p>"},{"location":"#what-can-the-integration-sdk-be-used-for","title":"What can the Integration SDK be used for?","text":"<p>The Integration SDK can be used to add any endpoint that supports remote monitoring to VMware Aria Operations. Adding the endpoint involves creating objects that represent the endpoint, which may include properties, metrics, and events, as well as relationships between objects.</p> <p>Remote monitoring uses an API (such as REST, SNMP, SQL, etc) to retrieve the data (as opposed to agent-based monitoring, where the monitoring code runs in the same location as the endpoint).</p> <p>For an example walkthrough of creating a new Management Pack monitoring an endpoint, see Creating a new Management Pack</p> <p>The Integration SDK can also be used to extend objects created by another Management Pack with additional metrics, properties, events, or relationships. This can be useful to ensure access to custom data without having to re-implement already existing data.</p> <p>For an example walkthrough of the steps required to extend another management pack, see Extending an Existing Management Pack</p>"},{"location":"#where-should-i-start","title":"Where should I start?","text":"<ul> <li>If you want to get started creating your first Management Pack, or don't know where to start, read the Get Started tutorial.</li> <li>If you have completed the Get Started tutorial, the <code>Guides</code> section contains guides for modifying your adapter.</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>The vmware-aria-operations-integration-sdk project team welcomes contributions from the community. Before you start working with this project please read and sign our Contributor License Agreement. If you wish to contribute code and you have not signed our Contributor Licence Agreement (CLA), our bot will prompt you to do so when you open a Pull Request. For any questions about the CLA process, please refer to our FAQ.</p>"},{"location":"#license","title":"License","text":"<p>This project is licensed under the APACHE-2 License.</p>"},{"location":"examples/","title":"Examples","text":"<ul> <li> <p>Alibaba Cloud MP</p> <ul> <li>This Management Pack collects some data about Alibaba Cloud ECS Instances and Security Groups. This Management   Pack has a walkthrough   guide that shows how to create a new Management Pack.</li> </ul> </li> <li> <p>MySQL Extension MP</p> <ul> <li>A Management Pack collects some data from MySQL and attaches them to objects created by the MySQL Management   Pack. This Management Pack has a walkthrough how to extend an   existing Management Pack.</li> </ul> </li> <li> <p>vCenter Extension MP</p> <ul> <li>A Management Pack written in Python using the VMware Aria Operations Integration SDK. This Management Pack collects some additional Host and VM data from vCenter and attaches them to the corresponding objects created by the vCenter Management Pack.</li> </ul> </li> </ul>"},{"location":"get_started/","title":"Get Started","text":"<p>This guide will walk through setting up the SDK and using the SDK to create, test, and install a simple Management Pack (integration) in VMware Aria Operations.</p>"},{"location":"get_started/#requirements","title":"Requirements","text":""},{"location":"get_started/#operating-system","title":"Operating System:","text":"<p>The VMware Aria Operations Integration SDK has been tested on the following operating systems:</p> <ul> <li>Windows 10</li> <li>Windows 11</li> <li>macOS 12 (Monterey)</li> <li>macOS 13 (Ventura)</li> <li>Debian Linux</li> <li>Fedora Linux</li> </ul> <p>Other operating systems may be compatible.</p>"},{"location":"get_started/#vmware-aria-operations","title":"VMware Aria Operations","text":"<p>The Management Packs generated by the VMware Aria Operations Integration SDK will only run on versions that support containerized Management Packs. Currently, this is limited to on-prem installs, version 8.10 or later. In addition, at least one Cloud Proxy (also version 8.10 or later) must be set up in VMware Aria Operations, as containerized Management Packs must be run on a Cloud Proxy collector.</p>"},{"location":"get_started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker 20.10.0 or later. Updating to the latest stable version is recommended. For instructions on installing Docker,   go to Docker's installation documentation,   follow the instructions provided for your operating system. Finally, make sure the Docker default socket is enabled in the   Advanced tab in Settings (version 4.18.0 and above).</li> <li>Container registry with read and write access (see Container Registries (FAQs) for additional information).</li> <li>Python3 3.9.0 or later. Updating to the latest stable version is recommended. Python 3.8 and earlier (including Python2) are not supported. For instructions on installing Python, go   to Python's installation documentation,   and follow the instructions provided for your operating system.</li> <li>Pipx (recommended) or pip. If Python3 is installed, pip is most likely also installed.   For instructions on installing pipx, go to pipx's installation documentation, and follow the instructions provided.   For instructions on installing pip, go to pip's installation documentation, and follow the instructions provided.</li> <li>Git 2.35.0 or later. Updating to the latest stable version is recommended.   For instructions in installing git, go to Git's installation documentation,   and follow the instructions provided for your operating system.</li> </ul>"},{"location":"get_started/#installation","title":"Installation","text":"<p>To install the SDK, use <code>pipx</code> to install into an isolated environment. We recommend this in most cases to avoid dependency conflicts. Alternatively, <code>pip</code> can be used to install into the global environment, or to install into a manually-managed virtual environment. <pre><code>pipx install vmware-aria-operations-integration-sdk\n</code></pre></p>"},{"location":"get_started/#creating-a-management-pack","title":"Creating a Management Pack","text":"<p>After the SDK is installed, create a new project, by running <code>mp-init</code>. This tool asks a series of questions that guide the creation of a new management pack project.</p> Warning <p>Running <code>mp-init</code> as root is not recommended, as this requires some directories to have escalated permissions.</p> <ol> <li> <p><code>Enter a directory to create the project in. This is the directory where adapter code, metadata, and content will reside. If the directory doesn't already exist, it will be created. Path:</code></p> <p>The path can be an absolute or relative path. The path should end in an empty or non-existing directory.  If the directory does not exist, it will be created. This directory will contain a new Management Pack project.</p> </li> <li> <p><code>Management Pack display name</code></p> <p>The Management Pack display name will show up in VMware Aria Operations (Data Sources \u2192 Integrations \u2192  Repository), or when adding an account.</p> <p></p> <p>This Management Pack's display name is 'TestAdapter', and uses the default icon</p> </li> <li> <p><code>Management Pack adapter key</code></p> <p>This field is used internally to identify the Management Pack and Adapter Kind. By default, it is set to the  Management Pack display name with special characters and whitespace stripped from it.</p> </li> <li> <p><code>Management Pack description</code></p> <p>This field should describe what the Management Pack will do or monitor.</p> </li> <li> <p><code>Management Pack vendor</code></p> <p>The vendor field shows up in the UI under 'About' on the Integration Card.</p> <p></p> <p>This Management Pack's vendor is 'VMware'</p> </li> <li> <p><code>Enter a path to a EULA text file, or leave blank for no EULA</code></p> <p>VMware Aria Operations requires a EULA file to be present in a Management Pack. If one isn't provided, a stub EULA file (<code>eula.txt</code> in  the root project directory) will be added to the project which reads:   <pre><code>There is no EULA associated with this Management Pack.\n</code></pre></p> </li> <li> <p><code>Enter a path to the Management Pack icon file, or leave blank for no icon</code></p> <p>The icon is used in the VMware Aria Operations UI if present. If it is not present, a default icon will be used. The icon file must be  PNG format and 256x256 pixels. An icon file can be added later by copying the icon to the root project directory and  setting the value of the <code>\"pak_icon\"</code> key to the icon's file name in the <code>manifest.txt</code> file.</p> </li> <li> <p><code>Select a template for your project</code></p> <p>Both of the available options will generate a project structure that can be modified into an adapter:</p> <p><code>Sample Adapter</code>: Creates a template adapter that collects several objects and metrics from the container the adapter is running.   The template adapter has comments throughout its code that explain what the code does and how to customize it for your adapter.</p> <p><code>New Adapter</code>: Creates methods, minimal comments, and code necessary to implement test   connection, collection, adapter definition, and endpoints logic.</p> <p>For the purposes of this Get Started guide, select Sample Adapter.</p> </li> </ol> Info <p>For complete documentation of the <code>mp-init</code> tool, including an overview of its output,  see the MP Initialization Tool Documentation.</p>"},{"location":"get_started/#project-templates","title":"Project Templates","text":"<p>Both templates create a file system that has the basic project structure required to develop and build a Management Pack. Each file and directory is discussed in depth in the mp-init documentation. <code>app/adapter.py</code> is the adapter's entry point and the best starting point.</p> <p>The methods inside <code>adapter.py</code> are required, and should be modified to generate a custom adapter. Each method fulfills a request from the VMware Aria Operations collector, and can be tested individually using <code>mp-test</code> (covered in Testing a Management Pack).</p> <p>The adapter is stateless. This means the adapter cannot store any data for use in later method calls.</p> <p>Each method is described below:</p> <ul> <li> <p>test(adapter_instance):   Performs a test connection using the information given to the adapter_instance to verify the adapter instance has been configured properly.   A typical test connection will generally consist of:</p> <ol> <li>Read identifier values from adapter_instance that are required to connect to the target(s)</li> <li>Connect to the target(s), and retrieve some sample data</li> <li>If any of the above failed, return an error, otherwise pass.</li> <li>Disconnect cleanly from the target (ensure this happens even if an error occurs)</li> </ol> </li> <li> <p>get_endpoints(adapter_instance):   This method is run before the 'test' method, and VMware Aria Operations will use   the results to extract a certificate from each URL. If the certificate is not trusted by   the VMware Aria Operations Trust Store, the user will be prompted to either accept or reject   the certificate. If it is accepted, the certificate will be added to the AdapterInstance   object that is passed to the 'test' and 'collect' methods. Any certificate that is   encountered in those methods should then be validated against the certificate(s)   in the AdapterInstance. This method will only work against HTTPS endpoints, different types   of endpoint will not work (e.g., database connections).</p> </li> <li> <p>collect(adapter_instance):   Performs a collection against the target host. A typical collection will generally consist of:</p> <ol> <li>Read identifier values from adapter_instance that are required to connect to the target(s)</li> <li>Connect to the target(s), and retrieve data</li> <li>Add the data into the CollectResult as objects, properties, metrics, etc</li> <li>Disconnect cleanly from the target (ensure this happens even if an error occurs)</li> <li>Return the CollectResult.</li> </ol> </li> <li> <p>get_adapter_definition():   Optional method that defines the Adapter Instance configuration. The Adapter Instance   configuration is the set of parameters and credentials used to connect to the target and   configure the adapter. It also defines the object types and attribute types present in a   collection. Setting these helps VMware Aria Operations to validate, process, and display   the data correctly. If this method is omitted, a <code>describe.xml</code> file should be manually   created inside the <code>conf</code> directory with the same data. Generally, this is only necessary   when using advanced features of the <code>describe.xml</code> file that are not present in this method.</p> </li> </ul> <p>For further guidance on using the sample adapter, consult the <code>Guides</code> section.</p>"},{"location":"get_started/#testing-a-management-pack","title":"Testing a Management Pack","text":"<p>In the Management Pack directory, the installation script writes a <code>requirements.txt</code> file containing the version of the SDK used to generate the project, and installs the SDK into a virtual environment named <code>venv</code>. Note that the packages in <code>requirements.txt</code> are not installed into the adapter. To add a package to the adapter, specify it in the file <code>adapter_requirements.txt</code>.</p> <p>To use the SDK, navigate to the newly-generated project directory and activate the virtual environment:</p> <p>For Mac and Linux: <pre><code>source venv/bin/activate\n</code></pre> (This script is written for the bash shell. If you use the csh or fish shells, there are alternate activate.csh and activate.fish scripts you should use instead.) For Windows: <pre><code>venv\\Scripts\\activate.bat\n</code></pre></p> Note <p>To exit the virtual environment, run <code>deactivate</code> in the virtual environment.</p> <p>To test a project, run <code>mp-test</code> in the virtual environment.</p> <p>If <code>mp-test</code> is run from anywhere outside the root project directory, the tool will prompt to choose a project, and will test the selected project. If the tool is run from a project directory, the tool will automatically test that project.</p> <p><code>mp-test</code> will ask for a connection. No connections should exist, so choose New Connection. The test tool then reads the <code>conf/describe.xml</code> file to find the connection parameters and credentials required for a connection, and prompts for each. This is similar to creating a new Adapter Instance in the VMware Aria Operations UI. Connections are automatically saved per project, and can be reused when re-running the <code>mp-test</code> tool.</p> Note <p>In the sample adapter, the only connection parameter is <code>ID</code>, and because it connects to the container it is running on, this parameter is not necessary; it is only there as an example, and can be set to any value. The template also implements an example Test Connection. If a Test Connection is run (see below), with the <code>ID</code> set to the text <code>bad</code>, then the Test Connection will fail.</p> <p>The test tool also asks for the method to test. There are four options:</p> <ul> <li>Test Connection - This call tests the connection and returns either an error message if the connection failed, or an   empty json object if the connection succeeded.</li> <li>Collect - This call test the collection, and returns objects, metrics, properties, events, and relationships.</li> <li>Endpoint URLs - This returns a list (possibly empty) of URLs that have distinct SSL certificates that VMware Aria Operations can ask   the end user to import into the TrustStore.</li> <li>Version - This returns   the VMware Aria Operations Collector API version the   adapter implements. The implementation of this method is not generally handled by the developer.</li> </ul> <p>For more information on these endpoints, see the Swagger API documentation. Each response is validated against the API.</p> <p>For complete documentation of the <code>mp-test</code> tool see the MP Test Tool Documentation.</p>"},{"location":"get_started/#building-and-installing-a-management-pack","title":"Building and Installing a Management Pack","text":"<p>To build a project, run <code>mp-build</code> in the virtual environment.</p> <p>If <code>mp-build</code> is run from anywhere outside the root project directory, the tool will prompt to choose a project, and will build the selected project. If the tool is run from a project directory, the tool will automatically build that project.</p> <p>Once the project is selected (if necessary), the tool will build the management pack and emit a <code>pak</code> file which can be installed on VMware Aria Operations. The <code>pak</code> file will be located in <code>&lt;project root&gt;/build/</code> .</p> <p>To install the <code>pak</code> file, in VMware Aria Operations navigate to Data Sources \u2192 Integrations \u2192 Repository and click <code>ADD</code>. Select and upload the generated <code>pak</code> file, accept the README, and install the management pack.</p> <p>To configure the management pack, VMware Aria Operations navigate to Data Sources \u2192 Integrations \u2192 Accounts and click <code>ADD ACCOUNT</code>. Select the newly-installed management pack and configure the required fields. For <code>Collector/Group</code>, make sure that a cloud proxy collector is selected. Click <code>VALIDATE CONNECTION</code> to test the connection. It should return successfully, then click <code>ADD</code>.</p> <p>By default, a collection will run every 5 minutes. The first collection should happen immediately. However, newly-created objects cannot have metrics, properties, and events added to them. After the second collection, approximately five minutes later, the objects' metrics, properties, and events should appear. These can be checked by navigating to Environment \u2192 Object Browser \u2192 All Objects and expanding the Adapter and associated object types and object.</p> <p> The CPU object's <code>idle-time</code> metric in a Management Pack named <code>QAAdapterName</code>.</p> <p>For complete documentation of the <code>mp-build</code> tool see the MP Build Tool Documentation.</p>"},{"location":"introduction/","title":"Introduction","text":""},{"location":"introduction/#purpose-of-this-sdk","title":"Purpose of this SDK","text":"<p>This SDK provides tools and libraries to aid in developing Management Packs for VMware Aria Operations.</p> <p>VMware Aria Operations is a monitoring, management, and optimization tool for IT operations. For more information see VMware Aria Operations.</p>"},{"location":"introduction/#what-is-a-management-pack","title":"What is a Management Pack","text":"<p>Management Packs provide data to the monitoring capabilities of VMware Aria Operations. VMware Aria Operations ships with a number of built-in Management Packs, such as the vCenter Management Pack.</p> <p>A Management Pack is distributed as a single file with the extension <code>.pak</code>. Inside this file are a number of components, divided into three categories:</p> <ul> <li>Adapter: The adapter is code that VMware Aria Operations runs on a collector (currently limited to Cloud Proxies). The adapter is responsible for connecting to a target, creating objects with metrics, properties, and events, and adding relationships between objects.</li> <li>Metadata: There are several pieces of metadata included in a Management Pack. These tell VMware Aria Operations about the objects, metrics, properties, events, that the adapter can collect, as well as information about the Management Pack such as the name and version.</li> <li>Content: Optionally included in a Management Pack are pieces of content, which help the user understand and organize the data that the adapter collects. For example: dashboards, reports, symptoms and alerts, traversals, and policies.</li> </ul>"},{"location":"introduction/#overview","title":"Overview","text":""},{"location":"introduction/#tools","title":"Tools","text":"<p>This SDK contains three main tools for developing Management Packs.</p> <ul> <li><code>mp-init</code> Creates a new project. This creates the correct project directory structure for use with the other tools, and includes a template/sample adapter and metadata that can be modified (used as a starting point) or overwritten with new code.</li> <li><code>mp-test</code> Creates a containerized adapter from the project, runs the container locally, and simulates the VMware Aria Operations environment and API calls. The various entry points of the adapter can be called, and the output is validated against the VMware Aria Operations API and the current metadata. This tool enables rapid development by reducing the cycle time compared to installing and running on VMware Aria Operations for validation.</li> <li><code>mp-build</code> Creates a containerized adapter from the project, and bundles the adapter along with any metadata and content into a Management Pack. The resulting <code>pak</code> file can be installed on VMware Aria Operations (installation on VMware Aria Operations Cloud is not yet supported). After the Management Pack has been validated on VMware Aria Operations, the <code>pak</code> file is also used for distribution.</li> </ul>"},{"location":"introduction/#languages","title":"Languages","text":"<p>The current release supports Python as the primary language. At the heart of each adapter is a container image with an an HTTP server. The SDK includes a base image containing a server implemented in Python which calls out to user-supplied adapter code. In addition, there are extended base images for Java and PowerShell that include the same Python HTTP server but also include Java/PowerShell runtimes. The Python server is able to call an executable written in any language. Currently, Java and PowerShell projects are not supported by the <code>mp-init</code> tool. However, the <code>mp-test</code> and <code>mp-build</code> tools are language-agnostic, and depend only on the correct project file structure and a working Dockerfile that implements the collector framework.</p>"},{"location":"introduction/#libraries","title":"Libraries","text":"<p>The SDK includes a Python library that simplifies communication with VMware Aria Operations, and provides a model for easily creating objects, adding properties, metrics, and events to objects, and creating relationships between objects.</p> <p>Similar libraries for Java and PowerShell are planned.</p>"},{"location":"guides/adding_content/","title":"Adding Content","text":"<p>To add content to a Management Pack, first create the adapter with the objects, metrics, properties, and relationships that are necessary for the content.   Once the adapter is ready, install the Management Pack on VMware Aria Operations and create an adapter instance.</p> <p>Then follow the instructions below to create the content, export it, and add to the Management Pack project.</p>"},{"location":"guides/adding_content/#adding-a-dashboard","title":"Adding a Dashboard","text":"<ol> <li> <p>To add a dashboard to a Management Pack, first create the dashboard. Creating a dashboard is outside the scope of this document, but more information can be found here:</p> <ul> <li>Dashboards (VMware Aria Operations documentation)</li> <li>Create and Configure Dashboards (VMware Aria Operations documentation)</li> <li>VMware Aria Operations Dashboards Made Easy (video series)</li> </ul> </li> <li> <p>Once the dashboard is created, click <code>Manage</code> on the <code>Visualize</code> \u2192 <code>Dashboards</code> page. Select the dashboard, click the <code>...</code> button, and select <code>Export</code>.</p> <p></p> <p></p> Note <p>Selecting multiple dashboards will combine them into a single dashboard.json file (see step 3). All the following steps are identical in this case, but exporting each dashboard individually is recommended as it makes managing the content easier within the Management Pack project.</p> <p></p> </li> <li> <p>After selecting <code>Export</code> a zip file will download with the following files and directories:</p> <pre><code>```\ndashboard\n\u251c\u2500\u2500 dashboard.json\n\u2514\u2500\u2500 resources\n  \u2514\u2500\u2500 resources.properties\n```\n</code></pre> Note <p>A newly created dashboard will not contain a <code>resources</code> directory, unless it was cloned and/or edited from an existing dashboard that contained localization (See Adding Localization). If localization is not required, ignore the <code>resources</code> directories in the following steps.</p> <p>Unzip the file and move the root <code>dashboard</code> directory to the <code>[project_dir]/content/dashboards</code> directory. The <code>dashboard</code> directory and dashboard file (<code>dashboard.json</code>) can be renamed, but should match. For example, with two dashboards, <code>myDashboard</code> and <code>myOtherDashboard</code>, the project's content directory should look like this:</p> <pre><code>```\n\u251c\u2500\u2500 dashboards\n\u2502   \u251c\u2500\u2500 myDashboard\n\u2502   \u2502   \u251c\u2500\u2500 myDashboard.json\n\u2502   \u2502   \u2514\u2500\u2500 resources\n\u2502   \u2502       \u2514\u2500\u2500 resources.properties\n\u2502   \u2514\u2500\u2500 myOtherDashboard\n\u2502       \u251c\u2500\u2500 myOtherDashboard.json\n\u2502       \u2514\u2500\u2500 resources\n\u2502           \u2514\u2500\u2500 resources.properties\n\u2514\u2500\u2500 &lt;...&gt;\ncontent\n```\n</code></pre> </li> <li> <p>If a dashboard uses any configuration files (Text Widget Content, Resource Kind Metrics, or Topology Widget Configurations), these are not included in the zip file. To add these to the Management Pack project, copy the necessary content from the <code>Configure</code> \u2192 <code>Configuration Files</code> page in VMware Aria Operations and save as a file in the <code>content/files/txtwidget</code>, <code>content/files/reskndmetric</code>, or <code>content/files/topowidget</code> directory. </p> </li> <li> <p>Once the dashboard(s) are present in the content directory as above, run <code>mp-build</code> to create a new pak file that includes the dashboards.</p> </li> </ol>"},{"location":"guides/adding_content/#adding-a-report-template","title":"Adding a Report Template","text":"<ol> <li> <p>To add a report template to a Management Pack, first create the template. Creating a report template is outside the scope of this document, but more information can be found here:</p> <ul> <li>Reports (VMware Aria Operations documentation)</li> <li>Create a Report Template (VMware Aria Operations documentation)</li> </ul> </li> <li> <p>Once the report template is created, click <code>Manage</code> on the <code>Visualize</code> \u2192 <code>reports</code> page. Select the report, click the <code>...</code> button, and select <code>Export</code>.</p> <p></p> <p></p> Note <p>Selecting multiple report templates will combine them into a single content.xml file (see step 3). All the following steps are identical in this case, but exporting each report individually is recommended as it makes managing the content easier within the Management Pack project. An exception is when multiple report templates share a view. In this case, best practice is to do one of two things:</p> <ul> <li>Select all report templates with the shared view, so that they are combined into a single file and the view is not duplicated, or</li> <li>Duplicate the view before exporting, so that each report template has its own unique view that can be modified separately.</li> </ul> <p>The reason for this is that if a view is shared between two report templates, but is defined in multiple files, than the view could be modified in multiple places, leading to potential conflicts.</p> <p></p> </li> <li> <p>After selecting <code>Export</code> a zip file will download with the following files and directories:</p> <pre><code>&lt;Report_name&gt;\n\u251c\u2500\u2500 content.xml\n\u2514\u2500\u2500 resources\n \u2514\u2500\u2500 content.properties\n</code></pre> Note <p>A newly created report template will not contain a <code>resources</code> directory, unless it was cloned and/or edited from an existing report template that contained localization (See Adding Localization). If localization is not required, ignore the <code>resources</code> directories in the following steps.</p> <p>Unzip the file and move the root directory to the <code>[project_dir]/content/reports</code> directory. The directory and report file (<code>content.xml</code>) can be renamed to match, if desired. For example, with two reports, <code>myReport</code> and <code>myOtherReport</code>, the project's content directory should look like this:</p> <pre><code>```\ncontent\n\u251c\u2500\u2500 reports\n\u2502   \u251c\u2500\u2500 myReport\n\u2502   \u2502   \u251c\u2500\u2500 myReport.xml\n\u2502   \u2502   \u2514\u2500\u2500 resources\n\u2502   \u2502       \u2514\u2500\u2500 content.properties\n\u2502   \u2514\u2500\u2500 myOtherReport\n\u2502       \u251c\u2500\u2500 myOtherReport.xml\n\u2502       \u2514\u2500\u2500 resources\n\u2502           \u2514\u2500\u2500 content.properties\n\u2514\u2500\u2500 &lt;...&gt;\n```\n</code></pre> </li> <li> <p>Once the report template(s) are present in the content directory as above, run <code>mp-build</code> to create a new pak file that includes the report templates.</p> </li> </ol>"},{"location":"guides/adding_content/#adding-alert-definitions","title":"Adding Alert Definitions","text":"<ol> <li> <p>To add an alert definition to a Management Pack, first create the alert definition. Creating an alert definition is outside the scope of this document, but more information can be found here:</p> <ul> <li>Configuring Alerts (VMware Aria Operations documentation)</li> </ul> </li> <li> <p>Once the alert definition is created, click <code>Manage</code> on the <code>Configure</code> \u2192 <code>Alerts</code> \u2192 <code>Alert Definitions</code> page. Select the alert, click the <code>...</code> button, and select <code>Export</code>.</p> <p></p> <p></p> Note <p>Selecting multiple alert definitions will combine them into a single xml file (see step 3). All the following steps are identical in this case, but exporting each alert individually is recommended as it makes managing the content easier within the Management Pack project. An exception is when multiple alert definitions share symptoms or recommendations. In this case, best practice is to do one of three things:</p> <ul> <li>Select all alert definitions with a shared dependency, so that they are combined into a single file and the dependency is not duplicated, or</li> <li>Move the shared dependency out of the alert definition xml file and into its own xml file, which then goes in the <code>content/recommendations</code> or <code>content/symptoms</code> directory.</li> <li>Duplicate the symptom or recommendation before exporting, so that each alert definition has its own unique dependency that can be modified separately.</li> </ul> <p>The reason for this is that if a dependency is shared between two alerts, but is defined in multiple files, than the dependency could be modified in multiple places, leading to potential conflicts.</p> <p></p> </li> <li> <p>After selecting <code>Export</code> a zip file will download containing a single xml file that contains the alert definition and any dependent content (e.g., symptoms, recommendations)</p> <p>Unzip the file and move the alert xml file to the <code>[project_dir]/content/alertdefs</code> directory. The alert file can be renamed. For example, with two alerts, <code>myAlert</code> and <code>myOtherAlert</code>, the project's content directory should look like this:</p> <pre><code>```\ncontent\n\u251c\u2500\u2500 alertdefs\n\u2502   \u251c\u2500\u2500 myAlert.xml\n\u2502   \u2514\u2500\u2500 myOtherAlert.xml\n\u2514\u2500\u2500 &lt;...&gt;\n```\n</code></pre> </li> <li> <p>Once the alert definition(s) are present in the content directory as above, run <code>mp-build</code> to create a new pak file that includes the alert definitions.</p> </li> </ol>"},{"location":"guides/adding_content/#adding-a-traversal","title":"Adding a Traversal","text":"Note <p>Traversals must be created manually. There is no option to create in the VMware Aria Operations UI and export.</p> <p>A traversal specification defines how to navigate through objects by defining one or more paths through their relationships, and is defined in the <code>describe.xml</code> file. Each path consists of two or more nodes, and each node is separated by two bars (<code>||</code>). A traversal always starts with the same object type, known as the root. When creating a traversal, the root object type is specified using the <code>rootAdapterKind</code> and <code>rootResourceKind</code> attributes. Every path in the traversal must start with the root object as its first node. Nodes are represented by the adapter type and object type separated by double colons (<code>::</code>). After the first node, each node must also include a relationship direction, either <code>child</code>, or <code>~child</code> (parent), separated from the adapter kind and resource kind by double colons (<code>::</code>). Multiple traversals can be included in a Management Pack, and each individual traversal can have its own root object type.</p> <p>For example, assume we have an adapter called <code>my_adapter</code> with two object types, <code>my_instance_resource_kind</code> and <code>my_database_resource_kind</code> that have a parent-child relationship (each <code>my_instance_resource_kind</code> object is the parent of some number of <code>my_database_resource_kind</code> objects). Additionally, we have a relationship to VMs that are a parent to <code>my_instance_resource_kind</code> objects. The raw relationships look like this: <pre><code>     VirtualMachine\n           |\nmy_instance_resource_kind\n           |\nmy_database_resource_kind\n</code></pre> Now, say that we want to be able to select an instance and see all the databases running on it. We can make a very simple traversal with a single path in <code>describe.xml</code>: <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"my_adapter\" nameKey=\"1\" version=\"1\"&gt;\n   &lt;!-- ... --&gt;\n   &lt;TraversalSpecKinds&gt;\n      &lt;TraversalSpecKind name=\"MyTraversal\" rootAdapterKind=\"my_adapter\" rootResourceKind=\"my_instance_resource_kind\" description=\"Navigate from the Instance to the Databases hosted on it.\"&gt;\n         &lt;ResourcePath path=\"my_adapter::my_instance_resource_kind||my_adapter::my_database_resource_kind::child\"/&gt;\n      &lt;/TraversalSpecKind&gt;\n   &lt;/TraversalSpecKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> When the Management Pack is installed in VMware Aria Operations, the <code>Object Browser</code> will show the traversal in the <code>Environments</code> section. The root node is named <code>Instance</code>, and there are two instances of the path for each of the two database objects that are children of the <code>Instance</code> object.</p> <p></p> <p>Taking the simple traversal as a starting point, we can add in the VM resource, and create a second traversal that starts at the 'bottom', with the databases, and moves upward:</p> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"my_adapter\" nameKey=\"1\" version=\"1\"&gt;\n   &lt;!-- ... --&gt;\n   &lt;TraversalSpecKinds&gt;\n      &lt;TraversalSpecKind name=\"MyTraversal\" rootAdapterKind=\"my_adapter\" rootResourceKind=\"my_instance_resource_kind\" description=\"Navigate from the Instance to the Databases hosted on it and VM hosting it.\"&gt;\n         &lt;ResourcePath path=\"my_adapter::my_instance_resource_kind||my_adapter::my_database_resource_kind::child\"/&gt;\n         &lt;ResourcePath path=\"my_adapter::my_instance_resource_kind||VMWARE::VirtualMachine::~child\"/&gt;\n      &lt;/TraversalSpecKind&gt;\n      &lt;TraversalSpecKind name=\"MyReversedTraversal\" rootAdapterKind=\"my_adapter\" rootResourceKind=\"my_database_resource_kind\" description=\"Navigate from each Database to its Instance, and from the Instance to the VM.\"&gt;\n         &lt;ResourcePath path=\"my_adapter::my_database_resource_kind||my_adapter::my_instance_resource_kind::~child||VMWARE::VirtualMachine::~child\"/&gt;\n      &lt;/TraversalSpecKind&gt;\n   &lt;/TraversalSpecKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Info <p>For more information about the supported elements and attributes, see the describe.xml documentation.</p> <p>When the Management Pack is installed in VMware Aria Operations, the <code>Object Browser</code> will show the both traversals in the <code>Environments</code> section. In the first traversal's root node is an instance, and there are two paths. The first gets the database children, and the second gets the VM parent. Since the database and VM are both on the second node of the paths, these will show up as siblings:</p> <p></p> <p>In the second traversal (\"MyReversedTraversal\"), instead of starting from the instance, the traversal's root node is a database. This traversal has a single path, from database to instance to VM. Thus, every database will show up at the top level, and each can be expanded to show the instance it resides on, and the instance can be expanded to show the VM:</p> <p></p>"},{"location":"guides/adding_content/#adding-localization","title":"Adding Localization","text":"<p>The VMware Aria Operations UI supports translations in resource files that are included within a Management Pack.</p> <p>The corresponding model element in the content file (<code>dashboard.json</code>, <code>describe.xml</code>, etc) has an identifying attribute (often <code>key</code> or <code>name</code>), which also is the default representation in the UI (a label). To change this label an element, add a <code>nameKey</code> attribute in the model definition. The value of the <code>nameKey</code> attribute must be a positive integer, and corresponds to the key portion of a key-value pair in localization resource files.</p> <p>For example, to localize <code>total_bytes</code> attribute from a <code>describe.xml</code> file, first ensure there is a <code>nameKey</code> element that has a unique value: <pre><code>&lt;ResourceAttribute nameKey=\"182\" dashboardOrder=\"1\" key=\"total_bytes\" dataType=\"integer\" isProperty=\"false\" /&gt;\n</code></pre> Then, create a resource localization directory and file. The default labels are in a <code>resources.properties</code> (In the case of report templates: <code>content.properties</code>) file, which reside in a <code>resources</code> directory next to the content, and by convention is English. <pre><code>conf\n\u251c\u2500\u2500 describe.xml\n\u2502   \u2514\u2500\u2500 resources\n\u2502       \u2514\u2500\u2500 resources.properties &lt;- Default (English) resource localization file\n&lt;...&gt;\n</code></pre></p> <p>The <code>resources.properties</code> file should contain all <code>nameKey</code> values and English labels: <pre><code>version=1\n1=&lt;...&gt;\n...\n181=&lt;...&gt;\n182=Total Bytes\n183=&lt;...&gt;\n...\n</code></pre></p> Note <p><code>NameKey</code> integers do not have to be in order or contiguous.</p> <p>To supply an additional translation, create an additional file with the form <code>resources_&lt;locale&gt;.properties</code>, with the same set of keys as the original file but mapping to translated values. A locale specifier can have two parts, a two-letter language ID and an optional two-letter country code. The currently supported locales are:</p> Locale Language de German es Spanish fr French ja Japanese ko Korean zh-CN Chinese (Simplified) zh-TW Chinese (Traditional) <p>For example, to translate into French, add a resources file with the 'French' language code to the <code>resources</code> directory: <pre><code>conf\n\u251c\u2500\u2500 describe.xml\n\u2502   \u2514\u2500\u2500 resources\n\u2502       \u251c\u2500\u2500 resources.properties\n\u2502       \u2514\u2500\u2500 resources_fr.properties &lt;- French resource localization file\n&lt;...&gt;\n</code></pre> This <code>resources_fr.properties</code> file should contain all <code>nameKey</code> values in the <code>resources.properties</code> with translated values: <pre><code>version=1\n1=&lt;...&gt;\n...\n181=&lt;...&gt;\n182=Total d'octets\n183=&lt;...&gt;\n...\n</code></pre> Configuration Fields can include descriptions. A description can be used to provide a more detailed explanation of what the configuration field does or controls, and will show up in the UI as a tooltip that appears when a user clicks an info button to the right of the field. To add a description, use the <code>nameKey</code> value appended with <code>.description</code>. For example: <pre><code>version=1\n1=&lt;...&gt;\n...\n10=&lt;...&gt;\n11=vROps Host\n11.description= vROps Cluster Host\n12=&lt;...&gt;\n...\n</code></pre> </p>"},{"location":"guides/adding_to_an_adapter/","title":"Adding to an Adapter","text":""},{"location":"guides/adding_to_an_adapter/#object-model","title":"Object Model","text":""},{"location":"guides/adding_to_an_adapter/#what-is-the-object-model","title":"What is the Object Model?","text":"<p>At runtime, Aria Operations Manager creates objects representing data sources in the adapter. Every adapter must include an object model that provides object types, object properties, and semantic definitions describing resources and the metric data's meaning. The object model can be defined by using a <code>describe.xml</code> file, which should be defined in the <code>conf</code> directory, or it can be defined using the <code>definition</code> module from the Python Adapter Library by defining the AdapterDefinition object returned by The <code>get_adapter_definition()</code> method in <code>app/adapter.py</code>.</p>"},{"location":"guides/adding_to_an_adapter/#describexml-vs-adapterdefinition","title":"describe.xml vs. AdapterDefinition","text":"<p>When running <code>mp-build</code>, <code>mp-test collect</code>, or <code>mp-test test</code> they call the <code>get_adapter_definition()</code> method and then generate <code>describe.xml</code> file with the AdapterDefinition object. If a <code>describe.xml</code> file is present in the <code>conf</code> directory, then the object returned by the get_adapter_definition method will be ignored.</p>"},{"location":"guides/adding_to_an_adapter/#defining-an-adapter-and-adapter-instance-in-the-object-model","title":"Defining an Adapter and Adapter Instance in the Object Model","text":"<p>To define an adapter in the <code>conf/describe.xml</code> file use the top-level <code>AdapterKind</code> element. Only one adapter can be defined in the object model. The <code>key</code> will be used when creating objects (See Creating an object), and must also be present in the <code>manifest.txt</code> file in the <code>\"adapter_kinds\"</code> array. When defining an adapter, we also have to define an adapter instance type. An adapter instance is a special object in VMware Aria Operations that stores user configuration for a connection. Every adapter must have exactly one adapter instance type. The Adapter instance type is set by defining a <code>ResourceKind</code> element with attribute <code>type=7</code>. in Python, we can use the AdapterDefinition.</p> Python Adapter Librarydescribe.xml <pre><code>def get_adapter_definition() -&gt; AdapterDefinition:\n   definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n</code></pre> <pre><code>&lt;AdapterKind key=\"MyAdapter\" nameKey=\"1\" version=\"1\" &gt;\n    &lt;CredentialKinds/&gt;\n    &lt;ResourceKinds&gt;\n        &lt;ResourceKind key=\"MyAdapter_adapter_instance\" nameKey=\"2\" type=\"7\" credentialKind=\"\"/&gt;\n    &lt;/ResourceKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Info <p>For more information about the supported elements and attributes, see the describe.xml documentation. For more information about the Python module visit Python Adapter Library.</p> <p>Once an adapter instance is defined, any configuration fields (<code>ResourceIdentifier</code> element) and credentials (<code>CredentialKind</code> element) will be prompted to the user when creating an account in VMware Aria Operations on the <code>Data Sources</code> \u2192 <code>Integrations</code> page (See Adding a Configuration Field to an Adapter Instance and Adding a Credential. After the account has been created, configuration fields will be available in the input to the <code>collect</code>, <code>test</code>, and <code>get_endpoint</code> methods. (See Creating an Adapter Instance.)</p>"},{"location":"guides/adding_to_an_adapter/#adding-a-configuration-field-to-an-adapter-instance-in-the-object-model","title":"Adding a Configuration Field to an Adapter Instance in the Object Model","text":"<p>Adapter instance identifiers distinguish between adapter instances from the same adapter. They also allow for user configuration.</p> Python Adapter Librarydescribe.xml <pre><code>  def get_adapter_definition() -&gt; AdapterDefinition:\n      definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n\n      definition.define_string_parameter(\n          \"instance\",\n          label=\"Instance\",\n          required=True,\n      )\n      definition.define_enum_parameter(\n          \"ssl_mode\",\n          values= [\"Disable\", \"Require\"],\n          label=\"SSL\",\n          default=\"Require\",\n          advanced=True,\n      )\n      definition.define_int_parameter(\n          \"max_events\",\n          label=\"Max Events\",\n          advanced=True,\n      )\n</code></pre> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"My Adapter\" nameKey=\"1\" version=\"1\"&gt;\n  &lt;ResourceKinds&gt;\n    &lt;ResourceKind key=\"MyAdapter\" nameKey=\"5\" type=\"7\" &gt;\n        &lt;ResourceIdentifier dispOrder=\"1\" key=\"instance\" nameKey=\"6\" required=\"true\" type=\"string\" identType=\"1\"/&gt;\n        &lt;ResourceIdentifier dispOrder=\"2\" key=\"ssl_mode\" nameKey=\"7\" required=\"true\" type=\"string\" identType=\"2\" enum=\"true\"&gt;\n            &lt;enum default=\"false\" value=\"Disable\" /&gt;\n            &lt;enum default=\"true\" value=\"Require\" /&gt;\n        &lt;/ResourceIdentifier&gt;\n        &lt;ResourceIdentifier dispOrder=\"3\" key=\"max_events\" nameKey=\"8\" required=\"false\" type=\"integer\" identType=\"2\"/&gt;\n    &lt;/ResourceKind&gt;\n  &lt;/ResourceKinds&gt;\n  &lt;!-- ... --&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Info <p>For more information about the supported elements and attributes, see the describe.xml documentation. For more information about the Python module visit Python Adapter Library.</p> <p>In the <code>describe.xml</code> adapter instance identifiers can have an <code>identType</code> of <code>1</code> or <code>2</code>. A type of <code>1</code> means the identifier will be used for determining uniqueness, and will show up by default on the configuration page. If the type is <code>2</code>, the identifier is non-identifying, and will show up under the 'advanced' section of the configuration page. In Python, the Parameter object has an <code>advanced</code> attribute that determines identType.</p> <p></p> <p>Creating an account from the above xml (plus a credential). <code>ssl_mode</code> and <code>max_events</code> have an identType of 2, so they are present in 'Advanced Settings'.</p> <p>Note: If there are any existing connections used by the <code>mp-test</code> tool before resource identifiers were created or updated, these will need to be deleted or updated.</p> <p>Once an adapter instance is defined, any configuration fields (<code>ResourceIdentifier</code> element) will be prompted to the user when creating an account in VMware Aria Operations on the <code>Data Sources</code> \u2192 <code>Integrations</code> page. After the account has been created, configuration fields will be available to the <code>AdapterInstance</code> object passed to the <code>collect</code>, <code>test</code>, and <code>get_endpoints</code> methods defined in <code>adapter.py</code>. (See Creating an Adapter Instance.)</p>"},{"location":"guides/adding_to_an_adapter/#defining-a-credential-in-the-object-model","title":"Defining a Credential in the Object Model","text":"<p>In order to connect to most targets a credential is required. If necessary, an adapter can have multiple different credential kinds. To add a credential to the Adapter using in the <code>conf/describe.xml</code>, add a <code>CredentialKind</code> element to <code>AdapterKind/CredentialKinds</code>. The <code>CredentialKind</code> element takes one or more <code>CredentialField</code> elements which correspond to an individual piece of data needed for a credential. In Python, we can use the <code>AdapterDefinition.define_credential_type</code> function to define a new credential type and add it to the <code>AdapterDefinition</code> object; then we can specify each credential field using the returned CredentialType. A typical credential that requires a username and password might look like this:</p> Python Adapter Librarydescribe.xml <pre><code>def get_adapter_definition() -&gt; AdapterDefinition:\n    definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n\n    credential = definition.define_credential_type(\"my_credential_type\", \"Credential\")\n    credential.define_string_parameter(\"user_name\", \"User Name\")\n    credential.define_password_parameter(\"user_password\", \"Password\", required=False)\n</code></pre> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"my_adapter\" nameKey=\"1\" version=\"1\"&gt;\n  &lt;CredentialKinds&gt;\n    &lt;CredentialKind key=\"my_credential_type\" nameKey=\"2\" &gt;\n      &lt;CredentialField required=\"true\" dispOrder=\"0\" enum=\"false\" key=\"user_name\" nameKey=\"3\" password=\"false\" type=\"string\"/&gt;\n      &lt;CredentialField required=\"false\" dispOrder=\"1\" enum=\"false\" key=\"user_password\" nameKey=\"4\" password=\"true\" type=\"string\"/&gt;\n    &lt;/CredentialKind&gt;\n  &lt;/CredentialKinds&gt;\n  &lt;!-- ... --&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Info <p>For more information about the supported elements and attributes, see the describe.xml documentation. For more information about the Python module visit Python Adapter Library.</p> <p>When defining a credential in <code>conf/describe.xml</code> file, it must be added to the Adapter Instance. The adapter instance is a special <code>ResourceKind</code> that is used to configure an adapter. It is marked with the xml attribute/value <code>type=\"7\"</code>. To add the credential to the adapter instance, add an attribute <code>credentialKind</code> to the adapter instance's <code>ResourceKind</code> element, with a value of the <code>CredentialKind</code>'s <code>key</code> attribute.</p> describe.xml <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"my_adapter\" nameKey=\"1\" version=\"1\"&gt;\n        &lt;!--...--&gt;\n    &lt;ResourceKinds&gt;\n        &lt;ResourceKind key=\"my_adapter_instance\" credentialKind=\"my_credential_type\" nameKey=\"5\" type=\"7\" &gt;\n        &lt;!-- ... --&gt;\n    &lt;/ResourceKind&gt;\n    &lt;/ResourceKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> <p></p> <p>Adding a credential to an adapter instance with the <code>username</code> and <code>password</code> fields as defined above. 'Credential name' is always added (by VMware Aria Operations), and allows for credentials to be reused between adapter instances.</p> <p>Both <code>describe.xml</code> and AdapterDefinition allow for the use of multiple credential types.</p> Python Adapter Librarydescribe.xml <pre><code> def get_adapter_definition() -&gt; AdapterDefinition:\n     definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n\n     # Basic Auth\n     basic_auth_credential = definition.define_credential_type(\"basic_auth_credential\", \"Basic Auth\")\n     basic_auth_credential.define_string_parameter(\"user_name\", \"User Name\")\n     basic_auth_credential.define_password_parameter(\"user_password\", \"Password\", required=False)\n\n     # Token\n     token_credential = definition.define_credential_type(\"token_credential\", \"Token\")\n     token_credential.define_password_parameter(\"token\", \"Token\")\n</code></pre> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"MyAdapter\" nameKey=\"1\" version=\"1\"&gt;\n  &lt;CredentialKinds&gt;\n      &lt;CredentialKind key=\"basic_auth_credential\" nameKey=\"2\" &gt;\n        &lt;CredentialField required=\"true\" dispOrder=\"0\" enum=\"false\" key=\"user_name\" nameKey=\"3\" password=\"false\" type=\"string\"/&gt;\n        &lt;CredentialField required=\"false\" dispOrder=\"1\" enum=\"false\" key=\"user_password\" nameKey=\"4\" password=\"true\" type=\"string\"/&gt;\n      &lt;/CredentialKind&gt;\n      &lt;CredentialKind key=\"token_credential\" nameKey=\"2\" &gt;\n          &lt;CredentialField required=\"true\" dispOrder=\"1\" enum=\"false\" key=\"token\" nameKey=\"4\" password=\"true\" type=\"string\"/&gt;\n      &lt;/CredentialKind&gt;\n  &lt;/CredentialKinds&gt;\n  &lt;ResourceKinds&gt;\n      &lt;ResourceKind key=\"MyAdapter_adapter_instance\" nameKey=\"2\" type=\"7\" credentialKind=\"basic_auth_credential,token_credential\"/&gt;\n  &lt;/ResourceKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Note <p>In the describe.xml credential kind keys are separated by a comma.</p> <p>Once the credential is defined in the object model, it can be used in the adapter code.</p> <p>Note</p> <p>If there are any existing connections used by the <code>mp-test</code> tool before the credential was created or updated, these will need to be deleted or updated.</p> <p>Once an adapter instance is defined, any credential defined in the object model will be prompted to the user when creating an account in VMware Aria Operations on the <code>Data Sources</code> \u2192 <code>Integrations</code> page. After the account has been created, credential fields will be available <code>AdapterInstance</code> object passed to the <code>collect</code>, <code>test</code>, and <code>get_endpoints</code> methods.(See Creating an Adapter Instance.)</p> <p>Using the Python Adapter Library, the credentials are available in the AdapterInstance object passed to the <code>collect</code>, <code>test</code>, and <code>get_endpoint</code> methods in <code>app/adapter.py</code>(See Creating an Adapter Instance.). If an adapter supports multiple credential types, the AdapterInstance.get_credential_type() function can be used to determine the type of the credential used by the adapter instance.</p>"},{"location":"guides/adding_to_an_adapter/#creating-an-adapter-instance","title":"Creating an Adapter Instance","text":"<p>Using the Python Adapter Library, the canonical method for creating an adapter instance is using the <code>AdapterInstance</code> object. Configuration fields and credentials can be accessed using <code>get_identifier_value</code> and <code>get_credential_value</code>, respectively. These methods return <code>None</code> if the given key does not exist in the adapter instance.</p> <pre><code>adapter_instance = AdapterInstance.from_input()\n\ninstance = adapter_instance.get_identifier_value(\"instance\")\nssl_mode = adapter_instance.get_identifier_value(\"ssl_mode\")\nmax_events = adapter_instance.get_identifier_value(\"max_events\")\n\nusername = adapter_instance.get_credential_value(\"username\")\npassword = adapter_instance.get_credential_value(\"password\")\n</code></pre> <p>Note</p> <p><code>AdapterInstance.from_input()</code> can only be called once per collection, test connection, or getEndpointURL invocation.</p> <p>For other languages, or using Python without the Python Adapter Library module, JSON representing the adapter instance is sent to a named pipe. The second-to-last argument the adapter is invoked with will always be the filename of the named pipe. The adapter instance JSON is described in the VMware Aria Operations Collector Framework OpenAPI Document.</p>"},{"location":"guides/adding_to_an_adapter/#adding-an-object-type-to-the-object-model","title":"Adding an Object Type to the Object Model","text":"<p>An object type is a class of objects (resources) that share the same set of metrics, properties, and identifiers. For example an adapter might have a 'Database' object kind, and when an adapter instance is created and connects to an application, several 'database' objects are created representing distinct databases in the application. To create a new object type in the <code>conf/describe.xml</code> file, add a <code>ResourceKind</code> element inside <code>AdapterKind/ResourceKinds</code>. A <code>key</code> attribute is required, and must be unique among other object types within the <code>describe.xml</code> file. To create a new object type using the Python Adapter Library use the <code>AdapterDefinition.define_object_type</code> function of AdapterDefinition object.</p> Python Adapter Librarydescribe.xml <pre><code>def get_adapter_definition() -&gt; AdapterDefinition:\n    definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n\n    definition.define_object_type(\"my_database_resource_kind\", \"Database\")\n</code></pre> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"MyAdapter\" nameKey=\"1\" version=\"1\"&gt;\n    &lt;!--...--&gt;\n  &lt;ResourceKinds&gt;\n    &lt;!--...--&gt;\n    &lt;ResourceKind key=\"my_database_resource_kind\" nameKey=\"9\"/&gt;\n  &lt;/ResourceKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> <p>In addition, an object type may have identifiers, which can distinguish between objects of the same type. In the database example, we may need to know a <code>port</code> and <code>ip address</code> to uniquely identify each database. If no identifiers are specified, an object's <code>name</code> is used for determining uniqueness. If any identifiers are present (see note), then the <code>name</code> is not used for this purpose.</p> Python Adapter Librarydescribe.xml <pre><code>def get_adapter_definition() -&gt; AdapterDefinition:\n    definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n\n    data_base = definition.define_object_type(\"my_database_resource_kind\", \"Database\")\n    data_base.define_string_identifier(\"server_ip\", \"IP\")\n    data_base.define_string_identifier(\"server_port\", \"Port\")\n</code></pre> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"MyAdapter\" nameKey=\"1\" version=\"1\"&gt;\n    &lt;!--...--&gt;\n  &lt;ResourceKinds&gt;\n    &lt;!--...--&gt;\n    &lt;ResourceKind key=\"my_database_resource_kind\" nameKey=\"9\"&gt;\n        &lt;ResourceIdentifier dispOrder=\"1\" key=\"server_ip\" nameKey=\"10\" required=\"true\" type=\"string\" identType=\"1\"/&gt;\n        &lt;ResourceIdentifier dispOrder=\"2\" key=\"server_port\" nameKey=\"11\" required=\"true\" type=\"integer\" identType=\"1\"/&gt;\n        &lt;!-- ... --&gt;\n    &lt;/ResourceKind&gt;\n  &lt;/ResourceKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Note <p>'ResourceIdentifier' element can have an <code>identType</code> of <code>1</code> or <code>2</code>. A type of <code>1</code> is most common, and means the identifier will be used for determining uniqueness. If the type is <code>2</code>, the identifier is non-identifying, and will show up in the identifiers of an object but will not cause a new object to be created if it changes. If all identifiers are non-identifying, then the object's name reverts to determining uniqueness of objects. When using Python Adapter Library the define_string_identifier accepts a <code>is_part_of_uniqueness</code> parameter, which is True by default.</p> Info <p>For more information about the supported elements and attributes, see the describe.xml documentation. For more information about the Python module visit Python Adapter Library.</p> <p>Once the object type is defined in the object model, it can be used in the adapter code. See Creating an object.</p>"},{"location":"guides/adding_to_an_adapter/#creating-an-object","title":"Creating an Object","text":"<p>Before creating an object, ensure that the object type is present in the object model.</p> <p>Using the Python Adapter Library, the canonical method for creating a new object is to use the CollectResult object.</p> <pre><code>result = CollectResult()\ndatabase1 = result.object(adapter_kind=\"MyAdapter\", object_kind=\"my_database_resource_kind\", name=\"db1\",\n                          identifiers=[\n                              Identifier(\"server_ip\", \"10.0.34.1\"),\n                              Identifier(\"server_port\", 110)\n                          ])\n# &lt;additional collection code&gt;\n# ...\n\n# send database1 (and all other objects in the CollectResult) back to VMware Aria Operations\nresult.send_result()\n</code></pre> <p></p> <p>Two objects of type 'my_database_resource_kind'. The creation of the db1 object is shown above. This view is found in <code>Environment</code> \u2192 <code>Inventory</code>. By default, the identifiers are not shown. They can be enabled by clicking the menu icon in the lower left (not shown in this screenshot) and selecting the identifier columns. Identifiers are ordered in ascending <code>dispOrder</code>.</p> <p>For other languages, or using Python without the VMware Aria Operations Integration module, objects must be returned as JSON, described in the VMware Aria Operations Collector Framework OpenAPI Document .</p>"},{"location":"guides/adding_to_an_adapter/#defining-an-attribute-in-the-object-model","title":"Defining an Attribute in the Object Model","text":"<p>An attribute is a class of metrics or properties similar to how an object type is a class of objects. Attributes can be either a metric or property. * A metric is numeric data that is useful to track over time. Examples: CPU Utilization (%), Used Disk Space (GB) * A property is numeric or string data that rarely changes and only the current (last) value is relevant. Examples:   Operating System Name, CPU Count</p> Note <p>Properties should not be used for string data that has a large number of possible values. For example, if you want to have a property that shows the last time an operation was run on a server, it is better to convert that to a numeric metric such as <code>hours_since_last_operation</code>, rather than using a string property with a human-readable timestamp, as large numbers of distinct string values can degrade the performance of VMware Aria Operations.</p> <p>in the <code>conf/describe.xml</code> file, attributes can be grouped together in <code>ResourceGroup</code> elements, which can be nested. <code>ResourceGroups</code> can also be instanced.</p> Python Adapter Librarydescribe.xml <pre><code>    def get_adapter_definition() -&gt; AdapterDefinition:\n        definition = AdapterDefinition(\"MyAdapter\", \"My Adapter\")\n\n        data_base = definition.define_object_type(\"my_database_resource_kind\", \"Database\")\n        data_base.define_string_identifier(\"server_ip\", \"IP\")\n        data_base.define_string_identifier(\"server_port\", \"Port\")\n\n        table_space_group = data_base.define_group(\"tablespace\", \"Tablespace\")\n        table_space_group.define_string_property(\"tablespace_name\", \"Name\")\n        table_space_group.define_metric(\"reads\", \"Reads\")\n\n        data_base.define_metric(\"session_count\", \"Sessions\")\n</code></pre> <pre><code>&lt;AdapterKind xmlns=\"http://schemas.vmware.com/vcops/schema\" key=\"MyAdapter\" nameKey=\"1\" version=\"1\"&gt;\n  &lt;!--...--&gt;\n  &lt;ResourceKinds&gt;\n    &lt;!--...--&gt;\n    &lt;ResourceKind key=\"my_database_resource_kind\" nameKey=\"9\"&gt;\n      &lt;ResourceIdentifier dispOrder=\"1\" key=\"server_ip\" nameKey=\"10\" required=\"true\" type=\"string\" identType=\"1\"/&gt;\n      &lt;ResourceIdentifier dispOrder=\"2\" key=\"server_port\" nameKey=\"11\" required=\"true\" type=\"integer\" identType=\"1\"/&gt;\n      &lt;ResourceGroup nameKey=\"4\" key=\"tablespace\"&gt;\n        &lt;ResourceAttribute nameKey=\"12\" dashboardOrder=\"1\" key=\"tablespace_name\" dataType=\"string\" isProperty=\"true\" /&gt;\n        &lt;ResourceAttribute nameKey=\"13\" dashboardOrder=\"2\" key=\"reads\" dataType=\"integer\" isProperty=\"false\" /&gt;\n      &lt;/ResourceGroup&gt;\n      &lt;ResourceAttribute nameKey=\"14\" dashboardOrder=\"1\" key=\"session_count\" dataType=\"integer\" isProperty=\"false\" /&gt;\n    &lt;/ResourceKind&gt;\n  &lt;/ResourceKinds&gt;\n&lt;/AdapterKind&gt;\n</code></pre> Info <p>For more information about the supported elements and attributes, see the describe.xml documentation. For more information about the Python module visit Python Adapter Library.</p> <p>Once an attribute is defined in the object model, it can be used in the adapter code. See Creating a metric or property.</p>"},{"location":"guides/adding_to_an_adapter/#creating-a-metric-or-property","title":"Creating a Metric or Property","text":"<p>Before creating a metric or property, ensure that the attribute describing the data is present in the object model.</p> <p>Using the Python Adapter Library , metrics and properties can be added using the attribute key and a value. In the case of attributes in groups, the group key(s) and attribute key are separated by a pipe \"|\" and form the metric or property key.</p> <pre><code>database1 = # Object\ndatabase1.with_property(\"tablespace|tablespace_name\", \"MyTablespace\")\ndatabase1.with_metric(\"tablespace|reads\", 104)\ndatabase1.with_metric(\"session_count\", 5)\n</code></pre> <p></p> <p>Result of the above code. Since the numbers and strings are hard-coded, these values will never change. For a real adapter, the values will be the result of querying the target for up-to-date information. Note that there are a number of automatically generated metrics and properties. The metric groups 'Badge', 'VMware Aria Operations Generated', and 'VMware Aria Operations Manager Generated Properties' (and the metrics and properties inside) are present on every object.</p> <p>For other languages, or using Python without the VMware Aria Operations Integration module, metrics and properties are returned as JSON inside of objects, described in the VMware Aria Operations Collector Framework OpenAPI Document.</p>"},{"location":"guides/adding_to_an_adapter/#creating-an-event","title":"Creating an Event","text":"<p>Events do not need to be declared in the object model file, and can simply be added to an object at runtime.</p> <p>Using the Python Adapter Library , events are added to resources. The only required parameter is the message, which describes and uniquely identifies the event.</p> <pre><code>database1 = # Object\ndatabase1.with_event(\n    message=\"Database read latency is above threshold\", criticality=Criticality.IMMEDIATE)\n</code></pre> <p></p> <p>Result of the above code. Note that the criticality is affecting the health of the db1 object it is attached to.</p> <p>For other languages, or using Python without the Python Adapter Library module, events are returned as JSON inside of objects, described in the VMware Aria Operations Collector Framework OpenAPI Document .</p>"},{"location":"guides/adding_to_an_adapter/#creating-a-relationship","title":"Creating a Relationship","text":"<p>Relationships do not need to be declared in the object model file, and can simply be added between objects at runtime. Relationships are always between a parent and child, and if object1 is a parent of object2, that implies object2 is a child of object1.</p> <p>Using the Python Adapter Library , relationships are added to resources. <pre><code>instance = # Object\ndatabase1 = # Object\ndatabase2 = # Object\ninstance.add_child(database1)\ndatabase2.add_parent(instance)\n# database2 and database1 both have the same relationship with respect to the instance object after these calls\n</code></pre></p> <p>Important: Relationships must not have cycles. A cycle happens when an object's relationships are structured in such a way that it is its own descendant (or ancestor). For example, object1 <code>parentOf</code> object2, object2 <code>parentOf</code> object3, object3 <code>parentOf</code> object1 creates a cycle. Care should be taken to avoid these, as they can adversely affect VMware Aria Operations' analytics calculations.</p> <p></p> <p>Result of the above code. The db1 and db2 objects are both children of the 'instance' object. The health of a child object can impact the health of a parent object.</p> <p>For other languages, or using Python without the VMware Aria Operations Integration module, relationships are returned as JSON inside a collect result object, described in the VMware Aria Operations Collector Framework OpenAPI Document .</p>"},{"location":"guides/creating_a_new_management_pack/","title":"Creating a New Management Pack","text":"<p>This guide assumes you have already set up the SDK and know how to create a new project. It walks you through the steps necessary to monitor an endpoint, using Alibaba Cloud as an example.</p> <p>This section will create a simple management pack that creates objects with metrics, properties, and relationships that monitors Alibaba Cloud. It assumes you have already installed the SDK and understand the tools and steps in the 'Get Started' section. It also assumes you have an Alibaba Cloud account.</p> <p>For the purposes of this walkthrough, we will be adding an ECS Instance object with six properties, and a relationship to the Adapter Instance. All the data can be found by calling the <code>DescribeInstancesRequest</code> method in the ECS Python Library.</p> <p>The first step is to run <code>mp-init</code> and create a new project. There are no restrictions, except that the adapter kind key cannot be used by another management pack that is installed on the same system. For example, we used the following to create the sample:</p> <pre><code>\u276f mp-init\nEnter a directory to create the project in. This is the directory where adapter code, metadata, and\ncontent will reside. If the directory doesn't already exist, it will be created.\nPath: alibaba-cloud-mp\nManagement pack display name: Alibaba Cloud\nManagement pack adapter key: AlibabaCloud\nManagement pack description: Sample Management Pack that monitors Alibaba Cloud\nManagement pack vendor: VMware, Inc\nEnter a path to a EULA text file, or leave blank for no EULA:\nEnter a path to the management pack icon file, or leave blank for no icon:\nAn icon can be added later by setting the 'pak_icon' key in 'manifest.txt' to the\nicon file name and adding the icon file to the root project directory.\nCreating Project [Finished]\n\nproject generation completed\n</code></pre> <p>The completed management pack is found in the 'samples' directory, and can be used as a reference for this walkthrough or as a starting point for creating your own.</p> <p>Once the project finished generating, we can change directory into the project and activate the Python virtual environment.</p> <p>Next, we need to modify the adapter code. We will break this up into several steps:</p> <ol> <li>Add a library for connecting to Alibaba</li> <li>Modify the adapter definition to add fields for connecting to Alibaba Cloud</li> <li>Modify the <code>test</code> method to create an Alibaba Cloud connection and run a query</li> <li>Modify the <code>collect</code> method to collect objects, metrics, properties, and      relationships</li> <li>Verify the Alibaba Cloud MP</li> </ol>"},{"location":"guides/creating_a_new_management_pack/#add-a-library-for-connection-to-alibaba-cloud","title":"Add a library for connection to Alibaba Cloud","text":"<p>In order to add the metrics we want, we will need to be able to send requests to Alibaba Cloud. We could use any HTTP Rest library, such as <code>requests</code>, but it's usually easier to use a library designed for the specific service we are monitoring. Thus, for this sample we will use the official Alibaba Cloud SDK: <code>aliyun-python-sdk-core</code>. Since we will be monitoring ECS instances, we will also need <code>aliyun-python-sdk-ecs</code>.</p> <p>To add a library to the adapter, open the file <code>adapter_requirements.txt</code> and add a new line with the name of the library. Optionally, we can also add a version constraint. Here's what the modified file should look like: <pre><code>vmware-aria-operations-integration-sdk-lib==0.7.*\npsutil\naliyun-python-sdk-core==2.13.36\naliyun-python-sdk-ecs==4.24.61\n</code></pre></p> <p>Note: We can also remove the <code>psutil</code> library, as that is only used in the sample code that we will be replacing. However, we would then no longer be able to run <code>mp-test</code> until we have removed the sample code that depends on <code>psutil</code>, so for now we will keep it.</p>"},{"location":"guides/creating_a_new_management_pack/#modify-the-adapter-definition-to-add-fields-for-connecting-to-alibaba-cloud","title":"Modify the adapter definition to add fields for connecting to Alibaba Cloud","text":"<p>Now that we have added the library, we need to see what information it needs in order to connect. From the documentation, the client requires: * Access Key ID * Region ID * Access Secret</p> <p>In the <code>app/adapter.py</code> file, find the <code>get_adapter_definition()</code> method. We will define parameters for the <code>Access Key ID</code> and <code>Region ID</code>, and a credential for the <code>Access Key Secret</code>. We could put the <code>Access Key ID</code> in the credential, however credentials are not used to identify adapter instances. If <code>Region ID</code> was the only required parameter, then we would only be able to make one Adapter Instance per region. Using the <code>Access Key ID</code> as an additional identifier will allow us to monitor multiple accounts with the same <code>Region ID</code>.</p> <p>After also removing the 'ID' parameter used by the sample adapter, the method could look similar to this:</p> <pre><code>def get_adapter_definition() -&gt; AdapterDefinition:\n    definition = AdapterDefinition(ADAPTER_KIND, ADAPTER_NAME)\n\n    definition.define_string_parameter(\n        \"access_key_id\",\n        label=\"Access Key ID\",\n        description=\"The AccessKey ID of the RAM account\",\n        required=True,\n    )\n    definition.define_enum_parameter(\n        \"region_id\",\n        label=\"Region ID\",\n        values=[\n            \"cn-hangzhou\",\n            \"cn-beijing\",\n            \"cn-zhagjiakou\",\n            \"cn-shanghai\",\n            \"cn-qingdao\",\n            \"cn-huhehaote\",\n            \"cn-shenzhen\",\n            \"cn-chengdu\",\n            \"cn-hongkong\",\n            \"ap-northeast-1\",\n            \"ap-south-1\",\n            \"ap-southeast-1\",\n            \"ap-southeast-2\",\n            \"ap-southeast-3\",\n            \"ap-southeast-5\",\n            \"eu-central-1\",\n            \"eu-west-1\",\n            \"me-east-1\",\n            \"us-east-1\",\n            \"us-west-1\"\n        ],\n        description=\"Set the region to collect from. Only one region can be \"\n                    \"selected per Adapter Instance.\",\n        required=True,\n    )\n    ram_account = definition.define_credential_type(\"RAM Account\")\n    ram_account.define_password_parameter(\n        \"access_key_secret\",\n        \"AccessKey Secret\",\n        required=True,\n    )\n\n    # The key 'container_memory_limit' is a special key that is read by the VMware Aria Operations collector to\n    # determine how much memory to allocate to the docker container running this adapter. It does not\n    # need to be read inside the adapter code.\n    definition.define_int_parameter(\n        \"container_memory_limit\",\n        label=\"Adapter Memory Limit (MB)\",\n        description=\"Sets the maximum amount of memory VMware Aria Operations can \"\n                    \"allocate to the container running this adapter instance.\",\n        required=True,\n        advanced=True,\n        default=1024,\n    )\n</code></pre> <p>Now that we've defined the connection parameters, we should define the objects that we will collect. For now, let's collect some information about ECS Instances. This is a small example. The implementation in the samples directory includes ECS Metrics and an additional Security Group object type.</p> <pre><code>    ecs_instance = definition.define_object_type(\"ecs_instance\", \"ECS Instance\")\n    ecs_instance.define_string_identifier(\"instance_id\", \"Instance ID\")\n    ecs_instance.define_string_identifier(\"region_id\", \"Region ID\")\n    ecs_instance.define_numeric_property(\"cpu\", \"CPU Count\")\n    ecs_instance.define_numeric_property(\"memory\", \"Total Memory\", unit=Units.DATA_SIZE.MEBIBYTE)\n    ecs_instance.define_string_property(\"status\", \"Status\")\n    ecs_instance.define_string_property(\"instance_type\", \"Instance Type\")\n    ecs_instance.define_string_property(\"private_ip\", \"Private IP Addresses\")\n    ecs_instance.define_string_property(\"public_ip\", \"Public IP Addresses\")\n</code></pre>"},{"location":"guides/creating_a_new_management_pack/#modify-the-test-method-to-create-an-alibaba-cloud-connection-and-run-a-query","title":"Modify the <code>test</code> method to create an Alibaba Cloud connection and run a query","text":"<p>We can try to connect and run a test query. We will do this in the <code>test</code> method. Notice this takes an <code>AdapterInstance</code> as a parameter. We will replace all the code that is inside the try block.</p> <p>All the parameters and credentials from the definition will be present in this Adapter Instance. We can access them like this, using the <code>key</code>s that we defined in the <code>get_adapter_definition</code> function to get the value assigned to that parameter:</p> <pre><code>    access_key = adapter_instance.get_identifier_value(\"access_key_id\")\n    region = adapter_instance.get_identifier_value(\"region_id\")\n    secret = adapter_instance.get_credential_value(\"access_key_secret\")\n</code></pre> <p>We can then use them to connect to Alibaba Cloud and run a test query. First import the require modules:</p> <p><pre><code>from aliyunsdkcore.client import AcsClient\nfrom aliyunsdkecs.request.v20140526 import DescribeInstancesRequest\n</code></pre> Then using the identifier values from above, create a client and initiate a request: <pre><code>    # Create and initialize a AcsClient instance\n    client = AcsClient(\n        access_key,\n        secret,\n        region,\n    )\n\n    request = DescribeInstancesRequest.DescribeInstancesRequest()\n    request.set_accept_format('json')\n\n    response = client.do_action_with_exception(request)\n\n    logger.info(str(response, encoding='utf-8'))\n    return result\n</code></pre></p> <p>Since we can expect that this will sometimes fail, e.g., if the user provides the wrong Access Key or Secret, we should ensure there is good error-handling in this function.</p> <p>If we detect a failure (e.g., in the <code>except</code> block), we should call <code>result.with_error(error_message)</code> to indicate the test has failed. If no errors have been attached to the <code>result</code> object, the test will pass. (Note that calling <code>result.with_error(...)</code> multiple times in the same test will result in only the last error being displayed.)</p> <p>If the management pack will be widely distributed, it may also be worthwhile to catch common errors and ensure the resulting messages are clear and user-friendly.</p> <p>We should now be able to run <code>mp-test connect</code> to run this code. The <code>mp-test</code> tool will ask you to create a new connection, prompting for 'Access Key ID', 'Region ID', and 'Access Key Secret'. After, it will ask if it should override SuiteAPI<sup>1</sup> credentials. We will not need them for this sample, so we can select 'No'.</p> <p><sup>1</sup>SuiteAPI is a REST API on VMware Aria Operations that can be used for many purposes. The documentation for this API can be found on any VMware Aria Operations instance at https://[aria_ops_hostname]/suite-api/. The 'adapter_instance' object that is passed to the 'test', 'get_endpoints', and 'collect' methods can automatically connect to this API and has methods for querying it.</p> <p>If everything was successful, the result should look similar to this: <pre><code>(venv-Alibaba Cloud) \u276f mp-test connect\nChoose a connection:  default\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Connect [Finished]\n{}\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O         | Block I/O\n------------------------------+----------------------------+--------------+---------------------+--------------\n29.6 % (0.0% / 29.6% / 59.1%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 5.52 KiB / 8.76 KiB | 0.0 B / 0.0 B\n\nRequest completed in 1.24 seconds.\n\nAll validation logs written to '~/Code/alibaba-cloud-mp/logs/validation.log'\nValidation passed with no errors\n</code></pre></p>"},{"location":"guides/creating_a_new_management_pack/#modify-the-collect-method-to-collect-objects-metrics-properties-and-relationships","title":"Modify the <code>collect</code> method to collect objects, metrics, properties, and relationships","text":"<p>Now that the <code>test</code> method is working, we can implement the <code>collect</code> method. This is the method where we query Alibaba Cloud for the objects, metrics, etc, we want and send them to VMware Aria Operations.</p> <p>First, we should remove all the sample code inside the <code>try</code> block. All the code for the following steps should be inside the <code>try</code> block.</p> <p>Then, we need to establish a connection to Alibaba Cloud. We can do this in the same way as in test connect. In many cases creating a function for connecting that is called from both <code>test</code> and <code>collect</code> is worthwhile.</p> <p>Next, we'll run several queries to get the data from Alibaba Cloud that we want, add the objects to the <code>result</code>, add data to the objects, and return the result. This collects all the properties in the small definition above. The implementation in the samples directory has more data.</p> <pre><code>    request = DescribeInstancesRequest.DescribeInstancesRequest()\n    request.set_accept_format('json')\n\n    response = client.do_action_with_exception(request)\n    json_response = json.loads(response)\n\n    # Add the adapter instance so that we can make a relationship to it from the\n    # ECS instances\n    result.add_object(adapter_instance)\n\n    for instance in json_response.get(\"Instances\", {}).get(\"Instance\", []):\n        id = instance.get(\"InstanceId\")\n        if not id:\n            continue\n        name = instance.get(\"HostName\", id)\n\n        ecs_object = result.object(ADAPTER_KIND, \"ecs_instance\", name,\n                      identifiers=[Identifier(\"instance_id\", id),\n                                   Identifier(\"region_id\", region)])\n\n        ecs_object.add_parent(adapter_instance)\n\n        ecs_object.with_property(\"cpu\", instance.get(\"Cpu\"))\n        ecs_object.with_property(\"memory\", instance.get(\"Memory\"))\n        ecs_object.with_property(\"status\", instance.get(\"Status\"))\n        ecs_object.with_property(\"instance_type\", instance.get(\"InstanceType\"))\n        ecs_object.with_property(\"private_ip\", str(instance.get(\"VpcAttributes\", {}).get(\"PrivateIpAddress\", {}).get(\"IpAddress\", [])))\n        ecs_object.with_property(\"public_ip\", str(instance.get(\"PublicIpAddress\", {}).get(\"IpAddress\", [])))\n</code></pre>"},{"location":"guides/creating_a_new_management_pack/#verify-the-alibaba-cloud-mp","title":"Verify the Alibaba Cloud MP","text":"<p>To verify the MP, run <code>mp-test collect</code> using the same connection we created earlier. We should see all ECS Instances that are present in the selected region that the RAM user associated with the access key has permission to view, with a small number of properties attached to it. In addition, each ECS Instance should be a child of the Adapter Instance. For example, with a very small environment with a single ECS Instance, we may see a result similar to this: <pre><code>(venv-Alibaba Cloud) \u276f mp-test -c default collect\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Collect [Finished]\n{\n    \"nonExistingObjects\": [],\n    \"relationships\": [],\n    \"result\": [\n        {\n            \"events\": [],\n            \"key\": {\n                \"adapterKind\": \"AlibabaCloud\",\n                \"identifiers\": [\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"access_key_id\",\n                        \"value\": \"LTAI5tJAcgHHoDT9d4xWNQBu\"\n                    },\n                    {\n                        \"isPartOfUniqueness\": false,\n                        \"key\": \"container_memory_limit\",\n                        \"value\": \"1024\"\n                    },\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"region_id\",\n                        \"value\": \"us-east-1\"\n                    }\n                ],\n                \"name\": \"default\",\n                \"objectKind\": \"AlibabaCloud_adapter_instance\"\n            },\n            \"metrics\": [],\n            \"properties\": []\n        },\n        {\n            \"events\": [],\n            \"key\": {\n                \"adapterKind\": \"AlibabaCloud\",\n                \"identifiers\": [\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"instance_id\",\n                        \"value\": \"i-0xi23s0o5pgnbdir3e3j\"\n                    },\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"region_id\",\n                        \"value\": \"us-east-1\"\n                    }\n                ],\n                \"name\": \"iZ0xi23s0o5pgnbdir3e3jZ\",\n                \"objectKind\": \"ecs_instance\"\n            },\n            \"metrics\": [],\n            \"properties\": [\n                {\n                    \"key\": \"cpu\",\n                    \"numberValue\": 1.0,\n                    \"timestamp\": 1681933134430\n                },\n                {\n                    \"key\": \"memory\",\n                    \"numberValue\": 1024.0,\n                    \"timestamp\": 1681933134430\n                },\n                {\n                    \"key\": \"status\",\n                    \"stringValue\": \"Running\",\n                    \"timestamp\": 1681933134430\n                },\n                {\n                    \"key\": \"instance_type\",\n                    \"stringValue\": \"ecs.n1.tiny\",\n                    \"timestamp\": 1681933134430\n                },\n                {\n                    \"key\": \"private_ip\",\n                    \"stringValue\": \"['172.29.43.26']\",\n                    \"timestamp\": 1681933134430\n                },\n                {\n                    \"key\": \"public_ip\",\n                    \"stringValue\": \"['47.90.216.22']\",\n                    \"timestamp\": 1681933134430\n                }\n            ]\n        }\n    ]\n}\nCollection summary:\n\nTable cell format is: 'total (min/median/max)'\n\nObject Type                                 | Count | Metrics | Properties | Events | Parents | Children\n--------------------------------------------+-------+---------+------------+--------+---------+---------\nAlibabaCloud::AlibabaCloud_adapter_instance | 1     | 0       | 0          | 0      | 0       | 0\nAlibabaCloud::ecs_instance                  | 1     | 0       | 6          | 0      | 0       | 0\n\nParent Type | Child Type | Count\n------------+------------+------\n\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O          | Block I/O\n------------------------------+----------------------------+--------------+----------------------+--------------\n34.6 % (0.0% / 34.6% / 69.1%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 5.52 KiB / 10.21 KiB | 0.0 B / 0.0 B\n\nCollection completed in 0.96 seconds.\n\nAll validation logs written to '~/Code/alibaba-cloud-mp/logs/validation.log'\nValidation passed with no errors\n</code></pre></p> <p>When everything is working as expected locally using <code>mp-test</code>, we can run <code>mp-build</code> and install on VMware Aria Operations for a final verification.</p>"},{"location":"guides/creating_a_new_management_pack/#next-steps","title":"Next Steps","text":"<ul> <li>Adding to an Adapter<ul> <li>Defining an Adapter and Adapter Instance in the Object Model</li> <li>Adding a Configuration Field to an Adapter Instance</li> <li>Defining a Credential in the Object Model</li> <li>Creating an Adapter Instance</li> <li>Adding an Object Type to the Object Model</li> <li>Creating an Object</li> <li>Defining an Attribute in the Object Model</li> <li>Creating a Metric or Property</li> <li>Creating an Event</li> <li>Creating a Relationship</li> </ul> </li> <li>Adding Content<ul> <li>Adding a Dashboard</li> <li>Adding a Report Template</li> <li>Adding Alert Definitions</li> <li>Adding a Traversal</li> <li>Adding Localization</li> </ul> </li> </ul>"},{"location":"guides/extending_an_existing_management_pack/","title":"Extending an Existing Management Pack","text":"<p>This guide assumes you have already set up the SDK and know how to create a new project. It walks you through the steps necessary to extend an existing Management Pack to add additional data, using the MySQL Management Pack as an example.</p> <p>Extending an existing management pack is similar to creating a new management pack, but has some additional constraints. This section will create a management pack that adds metrics to the existing MySQL management pack's database object. It assumes you have already installed the SDK and understand the tools and steps in the 'Get Started' section. It also assumes that you have installed and configured the MySQL management pack on a VMware Aria Operations instance in your local network.</p> <p>For the purposes of this walkthrough, we will be adding five metrics to the MySQL database object that show the total amount of lock waits and statistics about the time spent waiting for those locks. This info can be found in MySQL in the table <code>performance_schema.table_lock_waits_summary_by_table</code>.</p> <p>The first step is to run <code>mp-init</code> and create a new project. There are no restrictions, except that the adapter kind key cannot be used by another management pack that is installed on the same system. For example, we used the following to create the sample:</p> <pre><code>\u276f mp-init\nEnter a directory to create the project in. This is the directory where adapter code, metadata, and\ncontent will reside. If the directory doesn't already exist, it will be created.\nPath: mysql-extension-mp\nManagement pack display name: Extended MySQL MP\nManagement pack adapter key: ExtendedMySQLMP\nManagement pack description: Adds 'Lock Wait' metrics to MySQL Database objects\nManagement pack vendor: VMware, Inc\nEnter a path to a EULA text file, or leave blank for no EULA:\nEnter a path to the management pack icon file, or leave blank for no icon:\nAn icon can be added later by setting the 'pak_icon' key in 'manifest.txt' to the\nicon file name and adding the icon file to the root project directory.\nCreating Project [Finished]\n\nproject generation completed\n</code></pre> <p>The completed management pack is found in the 'samples' directory, and can be used as a reference for this walkthrough or as a starting point for creating your own.</p> <p>Once the project finished generating, we can change directory into the project and activate the Python virtual environment.</p> <p>Next, we need to modify the adapter code. We will break this up into several steps:</p> <ol> <li>Add a library for connecting to MySQL</li> <li>Modify the adapter definition to add fields for connecting to MySQL</li> <li>Modify the <code>test</code> method to create a MySQL connection and run a query</li> <li>Modify the <code>collect</code> method to collect metrics, and attach them to the correct      database objects</li> <li>Verify the MP</li> </ol>"},{"location":"guides/extending_an_existing_management_pack/#add-a-library-for-connection-to-mysql","title":"Add a library for connection to MySQL","text":"<p>In order to add the metrics we want, we will need to be able to run a query against a MySQL database. There are several Python libraries that can help us do this. For now, let's use <code>mysql-connector-python</code>.</p> <p>To add a library to the adapter, open the file <code>adapter_requirements.txt</code> and add a new line with the name of the library. Optionally, we can also add a version constraint. Here's what the modified file should look like: <pre><code>vmware-aria-operations-integration-sdk-lib==0.7.*\npsutil\nmysql-connector-python&gt;=8.0.32\n</code></pre></p> Note <p>We can also remove the <code>psutil</code> library, as that is only used in the sample code that we will be replacing. However, we would then no longer be able to run <code>mp-test</code> until we have removed the sample code that depends on <code>psutil</code>, so for now we will keep it.</p>"},{"location":"guides/extending_an_existing_management_pack/#modify-the-adapter-definition-to-add-fields-for-connecting-to-mysql","title":"Modify the adapter definition to add fields for connecting to MySQL","text":"<p>Now that we have added the library, we need to see what information it needs in order to connect. Since the adapter will be running on the VMware Aria Operations Cloud Proxy, which is not where our MySQL instance is running, we will need the following: * Host * Port * Username * Password</p> <p>In the <code>app/adapter.py</code> file, find the <code>get_adapter_definition()</code> method. We will define parameters for the <code>Host</code> and <code>Port</code>, and a credential for the <code>Username</code> and <code>Password</code>. After also removing the 'ID' parameter from the sample adapter, the method should look similar to this:</p> <pre><code>def get_adapter_definition() -&gt; AdapterDefinition:\n    logger.info(\"Starting 'Get Adapter Definition'\")\n    definition = AdapterDefinition(ADAPTER_KIND, ADAPTER_NAME)\n\n    definition.define_string_parameter(\"host\", \"MySQL Host\")\n    definition.define_int_parameter(\"port\", \"Port\", default=3306)\n\n    credential = definition.define_credential_type(\"mysql_user\", \"MySQL User\")\n    credential.define_string_parameter(\"username\", \"Username\")\n    credential.define_password_parameter(\"password\", \"Password\")\n\n    # The key 'container_memory_limit' is a special key that is read by the VMware Aria\n    # Operations collector to determine how much memory to allocate to the docker\n    # container running this adapter. It does not need to be read inside the adapter\n    # code.\n    definition.define_int_parameter(\n        \"container_memory_limit\",\n        label=\"Adapter Memory Limit (MB)\",\n        description=\"Sets the maximum amount of memory VMware Aria Operations can \"\n                    \"allocate to the container running this adapter instance.\",\n        required=True,\n        advanced=True,\n        default=1024,\n    )\n\n    # This Adapter has no object types directly, rather it co-opts object types that\n    # are part of the MySQL MP to add additional metrics. As such, we can't define\n    # those object types here, because they're already defined in the MySQL MP with a\n    # different adapter type.\n\n    # If we decide to also create new objects (that are not part of an existing MP),\n    # those can be added here.\n\n    logger.info(\"Finished 'Get Adapter Definition'\")\n    logger.debug(f\"Returning adapter definition: {definition.to_json()}\")\n    return definition\n</code></pre> <p>The adapter definition is also where objects and metrics are defined, however we are only allowed to define objects and metrics that are a part of our adapter type. Because extensions modify objects that are part of a different adapter type, we can't add them. This means that we can't set metric metadata like 'units', 'labels', etc that we would generally be able to set.</p>"},{"location":"guides/extending_an_existing_management_pack/#modify-the-test-method-to-create-a-mysql-connection-and-run-a-query","title":"Modify the <code>test</code> method to create a MySQL connection and run a query","text":"<p>Now that we've defined our parameters, we can try to connect and run a test query. We will do this in the <code>test</code> method. Notice this takes an <code>AdapterInstance</code> as a parameter. We will replace all the code that is inside the try/except block.</p> <p>All the parameters and credentials from the definition will be present in this Adapter Instance. We can access them like this, using the <code>key</code>s that we defined in the <code>get_adapter_definition</code> function to get the value assigned to that parameter:</p> <pre><code>    hostname = adapter_instance.get_identifier_value(\"host\")\n    port = int(adapter_instance.get_identifier_value(\"port\", \"3306\"))\n    username = adapter_instance.get_credential_value(\"username\")\n    password = adapter_instance.get_credential_value(\"password\")\n</code></pre> <p>We can then use them to connect to MySQL and run a test query (be sure to import <code>mysql.connector</code>):</p> <pre><code>    connection = mysql.connector.connect(\n        host=hostname,\n        port=port,\n        user=username,\n        password=password,\n    )\n    cursor = connection.cursor()\n\n    # Run a simple test query\n    cursor.execute(\"SHOW databases\")\n    for database in cursor: # The cursor needs to be consumed before it is closed\n        logger.info(f\"Found database '{database}'\")\n    cursor.close()\n</code></pre> <p>Since we can expect that this will fail, e.g., if the user provides the wrong username and password, we should ensure there is good error-handling in this function.</p> <p>If we detect a failure (e.g., in the <code>except</code> block), we should call <code>result.with_error(error_message)</code> to indicate the test has failed. If no errors have been attached to the <code>result</code> object, the test will pass. (Note that calling <code>result.with_error(...)</code> multiple times in the same test will result in only the last error being displayed.)</p> <p>If the management pack will be widely distributed, it may also be worthwhile to catch common errors and ensure the resulting messages are clear and user-friendly.</p> <p>We should now be able to run <code>mp-test connect</code> to run this code. The <code>mp-test</code> tool will ask you to create a new connection, prompting for 'host', 'port', 'username', and 'password'. After, it will ask if it should override SuiteAPI<sup>1</sup> credentials. Unless you have already set these up, select 'Yes', as we will need them later when we modify the 'collect' method. It will ask you for the SuiteAPI hostname, which should be the hostname of the VMware Aria Operations instance where the MySQL management pack is running, and a username and password which have permission to access to the SuiteAPI on that system.</p> <p><sup>1</sup>SuiteAPI is a REST API on VMware Aria Operations that can be used for many purposes. The documentation for this API can be found on any VMware Aria Operations instance at https://[aria_ops_hostname]/suite-api/. The 'adapter_instance' object that is passed to the 'test', 'get_endpoints', and 'collect' methods can automatically connect to this API and has methods for querying it.</p> <p>If everything was successful, the result should look similar to this: <pre><code>(venv-Extended MySQL MP) \u276f mp-test connect\nChoose a connection:  New Connection\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502Connections are akin to Adapter Instances in VMware Aria Operations, and contain the parameters                                             \u2502\n\u2502needed to connect to a target environment. As such, the following connection parameters and credential fields are                           \u2502\n\u2502derived from the 'conf/describe.xml' file and are specific to each Management Pack.                                                         \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\nEnter connection parameter 'MySQL Host': mysql8-1.localnet\nEnter connection parameter 'Port': 3306\nEnter connection parameter 'Adapter Memory Limit (MB)': 1024\nEnter credential field 'Username': root\nEnter credential field 'Password': *********\nOverride default SuiteAPI connection information for SuiteAPI calls?  Yes\nSuite API Hostname: aria-ops-1.vmware.com\nSuite API User Name: admin\nSuite API Password: ********\nSet these as the default SuiteAPI connection?  Yes\nEnter a name for this connection: default\nSaved connection 'default' in '~/Code/extended-mysql-mp/config.json'.\nThe connection can be modified by manually editing this file.\nBuilding adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Endpoint URLs [Finished]\nRunning Connect [Finished]\n{}\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O         | Block I/O\n------------------------------+----------------------------+--------------+---------------------+--------------\n14.9 % (0.0% / 14.9% / 29.8%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 9.06 KiB / 4.16 KiB | 0.0 B / 0.0 B\n\nRequest completed in 1.85 seconds.\n\nAll validation logs written to '~/Code/mysql-extention-mp/logs/validation.log'\nValidation passed with no errors\n</code></pre></p>"},{"location":"guides/extending_an_existing_management_pack/#modify-the-collect-method-to-collect-metrics-and-attach-them-to-the-correct-database-objects","title":"Modify the <code>collect</code> method to collect metrics, and attach them to the correct database objects","text":"<p>Now that the <code>test</code> method is working, we can implement the <code>collect</code> method. This is the method where we query MySQL for the metrics we want and send them to VMware Aria Operations as part of the database objects. Before we begin writing code, we need to look up some information about the MySQL management pack. Specifically, we need the following information: * The MySQL Adapter Kind Key * The MySQL Database Object type * A way to create a database object that matches a database that already exists on   VMware Aria Operations (usually the identifier list, but the name can sometimes work,   as in this case).</p> <p>These will be used to ensure that the metrics are attached to existing MySQL objects, rather than creating new ones.</p> <p>To get this information, we will <code>ssh</code> into the collector where the MySQL management pack is running. Then <code>cd</code> to <code>$ALIVE_BASE/user/plugin/inbound/mysql/conf/</code>. From there, open the <code>describe.xml</code> file. The Adapter Kind key is at the top on the fourth line: <pre><code>&lt;?xml version = '1.0' encoding = 'UTF-8'?&gt;\n&lt;!-- &lt;!DOCTYPE AdapterKind SYSTEM \"describeSchema.xsd\"&gt; --&gt;\n&lt;!-- Copyright (c) 2020 VMware Inc. All Rights Reserved. --&gt;\n&lt;AdapterKind key=\"MySQLAdapter\" nameKey=\"1\" version=\"1\" xmlns=\"http://schemas.vmware.com/vcops/schema\"&gt;\n</code></pre> Inside the <code>AdapterKind</code> tag are <code>ResourceKinds/ResourceKind</code> tags, and we can search for the one that represents the database resource kind. Once we have found it we can see that it has two identifiers, one for the adapter instance ID, and one for the database name. <pre><code>   &lt;ResourceKinds&gt;\n      &lt;!-- ... --&gt;\n      &lt;ResourceKind key=\"mysql_database\" nameKey=\"64\" &gt;\n          &lt;ResourceIdentifier dispOrder=\"1\" key=\"adapter_instance_id\" length=\"\" nameKey=\"37\" required=\"true\" type=\"string\" identType=\"1\" enum=\"false\" default=\"\"&gt; &lt;/ResourceIdentifier&gt;\n          &lt;ResourceIdentifier dispOrder=\"2\" key=\"database_name\" length=\"\" nameKey=\"65\" required=\"true\" type=\"string\" identType=\"1\" enum=\"false\" default=\"\"&gt; &lt;/ResourceIdentifier&gt;\n</code></pre> In order to attach a metric to these objects, we will need all identifiers that have an <code>identType=1</code>. In this case, those are <code>adapter_instance_id</code> and <code>database_name</code>. This means that the combination of those two fields uniquely identify the object among all of the <code>mysql_database</code> objects in the <code>MySQLAdapter</code> adapter.</p> <p>Getting the <code>adapter_instance_id</code> requires a SuiteAPI call. We need to retrieve the Adapter Instances for <code>MySQLAdapter</code> that has the same host and port identifiers as our adapter, and then retrieving the id. However, if we look in VMware Aria Operations itself, we can see that each database's name has the format <code>mysql_host/mysql_database</code>, which should be unique (even if VMware Aria Operations isn't using it for determining uniqueness). Thus, a simpler way to get matching objects (in this case) is to construct the name, and ask the SuiteAPI to give us all <code>MySQLAdapter</code> <code>mysql_database</code> objects with those names. Then we can simply attach metrics to the resulting <code>mysql_database</code> objects, which will have all identifiers correctly set by the SuiteAPI.</p> <p>First, we should remove all the sample code inside the <code>try</code> block. All the code for the following steps should be inside the <code>try</code> block.</p> <p>Then, we need to establish a connection to MySQL. We can do this in the same way as in test connect. In many cases creating a function for connecting that is called from both <code>test</code> and <code>collect</code> is worthwhile. Then we can query the list of databases, and construct a list of database names that may be present:</p> <pre><code>        # Get the list of databases on this instance\n        cursor = connection.cursor()\n        cursor.execute(\"SHOW databases\")\n        database_names = [f\"{hostname}/{database[0]}\" for database in cursor]\n        cursor.close()\n</code></pre> <p>We then query the SuiteAPI for <code>mysql_database</code> objects from the <code>MySQLAdapter</code> adapter, with the names we computed. The queries that <code>query_for_resources</code> accepts are documented in the SuiteAPI documentation, and can search on many types of metadata about a resource. After that, we add the returned objects to the <code>result</code> and to a dictionary for quick access later.</p> <pre><code>        # Get the list of objects from the SuiteAPI that represent the MySQL\n        # databases that are on this instance, and add any we find to the result\n        databases = {}  # dict of database Objects by name for easy access\n        with adapter_instance.suite_api_client as suite_api:\n            dbs = suite_api.query_for_resources(\n                query={\n                    \"adapterKind\": [\"MySQLAdapter\"],\n                    \"resourceKind\": [\"mysql_database\"],\n                    \"name\": database_names,\n                },\n            )\n            for db in dbs:\n                databases[db.get_identifier_value(\"database_name\")] = db\n                # Add each database to the collection result. Objects must be\n                # added to the result in order for them to be returned by the\n                # collect method.\n                result.add_object(db)\n</code></pre> <p>Finally, we'll run the query to get the data from MySQL that we want, and add that data as metrics to the relevant databases, and return the result:</p> <pre><code>        # Run a query to get some additional data. Here we're getting info about\n        # lock waits on each database\n        cursor = connection.cursor()\n        cursor.execute(\"\"\"\n                    select OBJECT_SCHEMA,\n                           sum(COUNT_STAR)     as COUNT_STAR,\n                           sum(SUM_TIMER_WAIT) as SUM_TIMER_WAIT,\n                           max(MAX_TIMER_WAIT) as MAX_TIMER_WAIT,\n                           min(MIN_TIMER_WAIT) as MIN_TIMER_WAIT\n                    from performance_schema.table_lock_waits_summary_by_table\n                    group by OBJECT_SCHEMA\n                    \"\"\")\n\n        # Iterate through the results of the query, and add them to the appropriate\n        # database Object as metrics.\n        for row in cursor:\n            if len(row) != 5:\n                logger.error(f\"Row is not expected size: {repr(row)}\")\n                continue\n            database = databases.get(row[0])\n            if not database:\n                logger.info(f\"Database {row[0]} not found in Aria Operations\")\n                continue\n            database.with_metric(\"Table Locks|Count\", float(row[1]))\n            database.with_metric(\"Table Locks|Sum\", float(row[2]))\n            database.with_metric(\"Table Locks|Max\", float(row[3]))\n            if float(row[1] &gt; 0):\n                database.with_metric(\"Table Locks|Avg\", float(row[2])/float(row[1]))\n            else:\n                database.with_metric(\"Table Locks|Avg\", 0)\n            database.with_metric(\"Table Locks|Min\", float(row[4]))\n        cursor.close()\n\n        return result\n</code></pre>"},{"location":"guides/extending_an_existing_management_pack/#verify-the-mp","title":"Verify the MP","text":"<p>To verify the MP, run <code>mp-test</code> using the same connection we created earlier. If there are any <code>mysql_database</code> objects that have entries in the <code>table_lock_waits_summary_by_table</code> table, we should see those returned in the collection result. For example, if the MySQL management pack is configured to collect <code>loadgen</code>, <code>mysql</code>, and <code>sys</code>, and the data query returns: <pre><code>object_schema      | count_star | sum_timer_wait | max_timer_wait | min_timer_wait\n-------------------+------------+----------------+----------------+---------------\nmysql              | 0          | 0              |0               | 0\nperformance_schema | 0          | 0              |0               | 0\nsys                | 2          | 3946368        |2255204         | 1691164\n</code></pre> Then we would expect to see entries for each database monitored by MySQL, but new data should be present only for the subset that was also returned by the data query: <pre><code>{\n    \"nonExistingObjects\": [],\n    \"relationships\": [],\n    \"result\": [\n        {\n            \"events\": [],\n            \"key\": {\n                \"adapterKind\": \"MySQLAdapter\",\n                \"identifiers\": [\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"adapter_instance_id\",\n                        \"value\": \"347062\"\n                    },\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"database_name\",\n                        \"value\": \"loadgen\"\n                    }\n                ],\n                \"name\": \"mysql8-1.localnet/loadgen\",\n                \"objectKind\": \"mysql_database\"\n            },\n            \"metrics\": [],\n            \"properties\": []\n        },\n        {\n            \"events\": [],\n            \"key\": {\n                \"adapterKind\": \"MySQLAdapter\",\n                \"identifiers\": [\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"adapter_instance_id\",\n                        \"value\": \"347062\"\n                    },\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"database_name\",\n                        \"value\": \"mysql\"\n                    }\n                ],\n                \"name\": \"mysql8-1.localnet/mysql\",\n                \"objectKind\": \"mysql_database\"\n            },\n            \"metrics\": [\n                {\n                    \"key\": \"Table Locks|Count\",\n                    \"numberValue\": 0.0,\n                    \"timestamp\": 1681767040181\n                },\n                {\n                    \"key\": \"Table Locks|Sum\",\n                    \"numberValue\": 0.0,\n                    \"timestamp\": 1681767040181\n                },\n                {\n                    \"key\": \"Table Locks|Max\",\n                    \"numberValue\": 0.0,\n                    \"timestamp\": 1681767040181\n                },\n                {\n                    \"key\": \"Table Locks|Avg\",\n                    \"numberValue\": 0.0,\n                    \"timestamp\": 1681767040181\n                },\n                {\n                    \"key\": \"Table Locks|Min\",\n                    \"numberValue\": 0.0,\n                    \"timestamp\": 1681767040181\n                }\n            ],\n            \"properties\": []\n        },\n        {\n            \"events\": [],\n            \"key\": {\n                \"adapterKind\": \"MySQLAdapter\",\n                \"identifiers\": [\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"adapter_instance_id\",\n                        \"value\": \"347062\"\n                    },\n                    {\n                        \"isPartOfUniqueness\": true,\n                        \"key\": \"database_name\",\n                        \"value\": \"sys\"\n                    }\n                ],\n                \"name\": \"mysql8-1.localnet/sys\",\n                \"objectKind\": \"mysql_database\"\n            },\n            \"metrics\": [\n                {\n                    \"key\": \"Table Locks|Count\",\n                    \"numberValue\": 2.0,\n                    \"timestamp\": 1681767040182\n                },\n                {\n                    \"key\": \"Table Locks|Sum\",\n                    \"numberValue\": 3946368.0,\n                    \"timestamp\": 1681767040182\n                },\n                {\n                    \"key\": \"Table Locks|Max\",\n                    \"numberValue\": 2255204.0,\n                    \"timestamp\": 1681767040182\n                },\n                {\n                    \"key\": \"Table Locks|Avg\",\n                    \"numberValue\": 1973184.0,\n                    \"timestamp\": 1681767040182\n                },\n                {\n                    \"key\": \"Table Locks|Min\",\n                    \"numberValue\": 1691164.0,\n                    \"timestamp\": 1681767040182\n                }\n            ],\n            \"properties\": []\n        }\n    ]\n}\n</code></pre></p> <p>When everything is working as expected locally using <code>mp-test</code>, we can run <code>mp-build</code> and install on VMware Aria Operations for a final verification.</p>"},{"location":"guides/extending_an_existing_management_pack/#next-steps","title":"Next Steps","text":"<ul> <li>Adding to an Adapter<ul> <li>Defining an Adapter and Adapter Instance in the Object Model</li> <li>Adding a Configuration Field to an Adapter Instance</li> <li>Defining a Credential in the Object Model</li> <li>Creating an Adapter Instance</li> <li>Adding an Object Type to the Object Model</li> <li>Creating an Object</li> <li>Defining an Attribute in the Object Model</li> <li>Creating a Metric or Property</li> <li>Creating an Event</li> <li>Creating a Relationship</li> </ul> </li> <li>Adding Content<ul> <li>Adding a Dashboard</li> <li>Adding a Report Template</li> <li>Adding Alert Definitions</li> <li>Adding a Traversal</li> <li>Adding Localization</li> </ul> </li> </ul>"},{"location":"references/architecture/","title":"Architecture","text":"<p>This section describes how a Management Pack works, and how it interacts with the VMware  Aria Operations Collector.</p>"},{"location":"references/architecture/#management-pack","title":"Management Pack","text":"<p>A management pack consists of content, metadata, and an adapter.</p> <ul> <li>Content includes Dashboards,    Reports,    Symptoms and Alerts,    Traversals, and   Localization.</li> <li>Metadata includes the <code>describe.xml</code> file that describes an adapter, and the    <code>manifest.txt</code> file that describes the management pack as a whole.</li> <li>The Adapter is a container that performs the collection and sends the data to    VMware Aria Operations. The adapter container image consists of two parts:</li> <li>The Adapter/Collection code. This is the portion written by the SDK developer.</li> <li>A REST server specified by Collector Framework 2,     which handles communication between the collection code and the VMware Aria      Operations collector process.</li> </ul> <p></p> <p>A Cloud Proxy collector process managing adapter containers, which each correspond to one adapter instance. Within each container is the REST server and the adapter  process. The Commands.cfg file tells the REST server how to run the adapter process for each endpoint.</p>"},{"location":"references/architecture/#adaptercollection-code","title":"Adapter/Collection Code","text":"<p>The Collection code is the main user-written code. It provides three functions: * 'Test': Determines if connection information entered by a user is valid. * 'Collect': Collect data from an external source and format it into an object structure     which VMware Aria Operations can understand. * 'Get Endpoints': If the connection to the external source uses HTTPS, this method can    be used to tell VMware Aria Operations where to find certificates, and if they are    not signed by a Certificate Authority, present them to the user.</p> <p>Optionally, the adapter can provide a fourth method: * 'Definition': If present, this is used by <code>mp-build</code> and <code>mp-test</code> to     generate a <code>describe.xml</code> file. Otherwise, a <code>describe.xml</code> file must be manually    created. </p>"},{"location":"references/architecture/#rest-server","title":"Rest Server","text":"<p>The REST server specified by Collector Framework 2, handles communication between the collection code and the VMware Aria Operations  collector process. The SDK includes a base container image that includes a REST  server. In the adapter's dockerfile, this is specified in the 'FROM' directive on the  first line. For example, the following line Dockerfile creates an adapter using the <code>0.10.3</code> version of the Server: <pre><code>FROM projects.registry.vmware.com/vmware_aria_operations_integration_sdk/base-adapter:python-0.10.3\n\nCOPY adapter_requirements.txt .\nRUN pip3 install -r adapter_requirements.txt\n\nCOPY commands.cfg .\nCOPY app app\n</code></pre></p> <p>This server implements all the required endpoints, provides error handling, and adds  some additional context to the user code that is not present in the original REST  requests. The server also adds a definition endpoint which allows the collection code to describe itself, rather than requiring a  <code>describe.xml</code> file to be manually created, and some features that improve the debugging experience.</p>"},{"location":"references/architecture/#rest-server-collection-sequence","title":"Rest Server Collection Sequence","text":"<p>When performing a collection, test connection, definition, or get endpoints request, the following sequence takes place: 1. VMware Aria Operations Collector sends request to adapter. 2. Server reads <code>commands.cfg</code> to determine how to handle the request. 3. Server starts a subprocess with the command and arguments from <code>commands.cfg</code>, plus    the input and output named pipe arguments. 4. Server writes the request payload to 'input' named pipe. 5. Server waits for subprocess to complete and write its response to the 'output'    named pipe, then reads the result. 6. Server processes the result and sends it as a response to the original REST request. 7. If any steps failed, clean up and send an appropriate error message as REST request    response.</p> <p>Note: The <code>mp-test</code> tool by default has a timeout of 5 minutes for each REST request. This is different than the Cloud Proxy's <code>Adapter Handler</code>, which does not have any timeout. Thus, it is possible when running on a Cloud Proxy for a collection to wait forever at step (5) above.</p>"},{"location":"references/architecture/#calling-the-adaptercollection-code-from-the-rest-server","title":"Calling the Adapter/Collection Code from the Rest Server","text":"<p>The server determines how to call the user code by reading a file called <code>commands.cfg</code>  that is present in the Project Directory. This file provides a mapping from each  endpoint served by the REST server to an executable command that will run as a separate  process inside the container.  The default commands.cfg file for a Python adapter looks like this: <pre><code>[Commands]\ntest=/usr/local/bin/python app/adapter.py test\ncollect=/usr/local/bin/python app/adapter.py collect\nadapter_definition=/usr/local/bin/python app/adapter.py adapter_definition\nendpoint_urls=/usr/local/bin/python app/adapter.py endpoint_urls\n</code></pre> This can be modified if necessary. For example, by default there is a single entry point for all endpoints, and the correct method is called by looking at the last argument. However, it is possible to have different entry points for the different endpoints, or even use different languages or runtimes for different endpoints by modifying the command that gets run for a given endpoint.</p> <p>In addition, when the server calls the command listed, it always appends to extra arguments, an input and output named pipe. The named pipes are created by the Server inside a temporary directory that is created for each subprocess. For example, the server call the above test command will look similar to this: <pre><code>/usr/local/bin/python app/adapter.py test /tmp/tmpe1iu4msr/input_pipe /tmp/tmpe1iu4msr/output_pipe\n</code></pre></p> <p>Because commands are run as a subprocess, the server is able to detect and handle many common errors (such as the process crashing without writing a result) without affecting the operation of the server.</p> <p>Importantly, this model enforces that adapters remain stateless. Because each call  results in a new subprocess being created, there is no way to preserve state in the runtime environment. </p> Note <p>It is possible to pass data between collections by writing and reading to a  file on the container filesystem, but not encouraged. Any restarts of the adapter  instance (either by manual action or automatic migration) will create a new container,  and any data on the container filesystem will be lost.</p>"},{"location":"references/architecture/#adapter-container-lifecycle","title":"Adapter Container Lifecycle","text":"<p>Containers are managed by the Collector process that runs on a Cloud Proxy. A new temporary container will be started each time 'Validate Connection' is run from the Account creation dialog, and when saving a new account. This container will be stopped once the test is complete or the new account has been created. After the account/adapter instance has been created, the Collector process then creates a new container. This container is long-lived and tied to the specific adapter instance it was created for.</p> <p>That is, if there are three running adapter instances for a given management pack, there will also be three running containers. This allows isolation between adapter instances, and for simultaneous collections to occur without having to guard against race conditions, deadlocks, etc. within the adapter's collection code.</p> <p>Each container will continue to exist until or unless:</p> <ul> <li>The adapter instance is stopped or deleted</li> <li>The adapter instance is moved to a new collector, or migrates between collectors in a   collector group</li> <li>An unrecoverable error occurs in the container (such as exceeding the container's   memory limit)</li> </ul>"},{"location":"references/architecture/#management-pack-distribution","title":"Management Pack Distribution","text":"<p>Containerized adapters make use of an external container registry to distribute images. The user requires push access when building a Pack File, and the VMware Aria Operations Cloud Proxy needs anonymous pull access to the registry.</p> <p>Within a Pack File, the adapter container image is referenced by the registry location and image digest SHA.</p> <p>The following diagram shows how the processes for building and installing a Management  Pack work together with the registry.</p> <p></p> <p>Management Pack is composed of two artifacts: The Pack File, and the adapter image. Both are generated by the <code>mp-build</code> tool, and both are consumed by VMware Aria  Operations when installing a Management Pack.</p>"},{"location":"references/connections/","title":"Connections","text":""},{"location":"references/connections/#what-are-connections","title":"What are Connections?","text":"<p>A connection refers to the link between an Adapter and other external systems, such as a vCenter Server, other databases, or cloud services. These connections allow an Adapter to gather performance and capacity data about your virtual or physical infrastructure operations, which can then be analyzed and presented in a unified, comprehensive view. VMware Aria Operations uses this data to help automate and simplify operations management.</p> <p>Creating a connection usually involves specifying the IP address or hostname of the external system, along with the appropriate credentials to access that system. After establishing the connection, an Adapter can collect data from the connected system.</p> <p>Warning</p> <p>Credentials for connections are stored in plain text in the  project connections file. For this reason, we recommend that this  file is not included in version control (it is included in the .gitignore file by  default), and credentials should be revokable and have the minimum set of permissions necessary for the Adapter to function (Usually Read-Only is sufficient).</p> <p>In addition, sometimes it is desirable for an Adapter to query VMware Aria Operations'  <code>SuiteAPI</code>. To facilitate using the API, credentials and connection information are  automatically provided to the Adapter when running on a Cloud Proxy. To mimic this when  running locally using <code>mp-test</code>, <code>mp-test</code> needs the SuiteAPI hostname, username, and  password.</p> Note <p>Suite API documentation can be found on any VMware Aria Operations Cluster, by opening <code>https://[[vmware_aria_operations_cluster_hostname]]/suite-api/doc/swagger-ui.html</code>. </p> <p>When setting up a new connection, <code>mp-test</code> will ask if you want to set up the connection information for the SuiteAPI. If you are not using this functionality, this can be  skipped, otherwise, the hostname should be the VMware Aria Operations Cluster hostname,  and the username and password can be any user with permission to access the Suite API. <code>mp-test</code> will also prompt if you want to set the SuiteAPI credentials as the project  default. If you select 'yes', then every connection in this project will use the  provided credentials, unless they explicitly override them. To learn more about how  Suite API connections are handled, see the  project connections file documentation.</p>"},{"location":"references/connections/#how-are-connections-stored","title":"How are Connections Stored?","text":"<p>Connections are stored locally in the project connections file located in the root of the project. If no project config file exists at the time of creating a connection, one will be created.</p>"},{"location":"references/connections/#managing-connections","title":"Managing Connections","text":""},{"location":"references/connections/#creating-new-connections","title":"Creating New Connections","text":"<p>To create a connection, run <code>mp-test</code> and then select <code>New Connection</code>. mp-test will then create a new connection by parsing over the object model and using any identifiers and credentials. The new connection is then stored in the project connections file in the root of the project.</p>"},{"location":"references/connections/#editing-existing-connections","title":"Editing Existing Connections","text":"<p>To edit connections, simply modify the key-values in the project connections file located at the project's root that correspond to the value you want to change.</p> Example <p>To edit the <code>container_memory_limit</code>  for connection with name <code>large-memory</code>, we can edit the key-value for <code>container_memory_limit</code> inside the connection object (line 44).</p> config.json<pre><code>{\n  \"connections\": [\n      {\n          \"certificates\": [],\n          \"credential\": {},\n          \"custom_collection_number\": null,\n          \"custom_collection_window\": null,\n          \"identifiers\": {\n              \"host\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"example.com\"\n              },\n              \"container_memory_limit\": {\n                  \"part_of_uniqueness\": false,\n                  \"required\": true,\n                  \"value\": \"512\"\n              },\n              \"port\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"443\"\n              }\n          },\n          \"name\": \"small-memory\",\n          \"suite_api_hostname\": null,\n          \"suite_api_password\": null,\n          \"suite_api_username\": null\n      },\n      {\n          \"certificates\": [],\n          \"credential\": {},\n          \"custom_collection_number\": null,\n          \"custom_collection_window\": null,\n          \"identifiers\": {\n              \"api\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"ecample.com\"\n              },\n              \"container_memory_limit\": {\n                  \"part_of_uniqueness\": false,\n                  \"required\": true,\n                  \"value\": \"4096\"\n              },\n              \"port\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"443\"\n              }\n          },\n          \"name\": \"large-memory\",\n          \"suite_api_hostname\": null,\n          \"suite_api_password\": null,\n          \"suite_api_username\": null\n      }\n  ],\n  \"default_memory_limit\": 1024,\n  \"docker_port\": 8080,\n  \"suite_api_hostname\": \"hostname\",\n  \"suite_api_password\": \"password\",\n  \"suite_api_username\": \"username\"\n}\n</code></pre>"},{"location":"references/connections/#deleting-connections","title":"Deleting Connections","text":"<p>To delete a connection, remove the connection object from the <code>connections</code> list in the project connections file at the root of the project that corresponds to the connection you want to delete.</p> Example <p>To remove the connection with name <code>medium-memory</code>, we can delete the highlighted connection object</p> config.json<pre><code>{\n  \"connections\": [\n      {\n          \"certificates\": [],\n          \"credential\": {},\n          \"custom_collection_number\": null,\n          \"custom_collection_window\": null,\n          \"identifiers\": {\n              \"host\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"example.com\"\n              },\n              \"container_memory_limit\": {\n                  \"part_of_uniqueness\": false,\n                  \"required\": true,\n                  \"value\": \"512\"\n              },\n              \"port\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"443\"\n              }\n          },\n          \"name\": \"small-memory\",\n          \"suite_api_hostname\": null,\n          \"suite_api_password\": null,\n          \"suite_api_username\": null\n      },\n      {\n          \"certificates\": [],\n          \"credential\": {},\n          \"custom_collection_number\": null,\n          \"custom_collection_window\": null,\n          \"identifiers\": {\n              \"api\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"example.com\"\n              },\n              \"container_memory_limit\": {\n                  \"part_of_uniqueness\": false,\n                  \"required\": true,\n                  \"value\": \"1024\"\n              },\n              \"port\": {\n                  \"part_of_uniqueness\": true,\n                  \"required\": true,\n                  \"value\": \"443\"\n              }\n          },\n          \"name\": \"medium-memory\",\n          \"suite_api_hostname\": null,\n          \"suite_api_password\": null,\n          \"suite_api_username\": null\n      },\n  ],\n  \"default_memory_limit\": 1024,\n  \"docker_port\": 8080,\n  \"suite_api_hostname\": \"hostname\",\n  \"suite_api_password\": \"password\",\n  \"suite_api_username\": \"username\"\n}\n</code></pre>"},{"location":"references/global_config/","title":"Global Config File","text":""},{"location":"references/global_config/#default_container_registry_path-string-optional","title":"<code>default_container_registry_path</code> (string, optional)","text":"<p>Specifies the default container registry path to be used by mp-build any time the project config file doesn't contain a container_repository. This key value should contain the path used to tag and push images to a new repository.</p> Example <pre><code>{\n  \"default_container_registry_path\" : \"harbor.my-organization.com/my-project-registry/\"\n  ...\n}\n</code></pre> <p><code>mp-build</code> constructs a tag using the default_container_registry_path and the lowercase value of the <code>adapter_kinds</code> key in the <code>manifest.txt</code> file. For example, if the adapter_kinds value is \"AdapterName\" the resulting tag would be <code>harbor.my-organization.com/my-project-registry/adaptername</code>.</p>"},{"location":"references/global_config/#container_port-int-optional-default-8080","title":"<code>container_port</code> (int, optional. default: 8080)","text":"<p>Specifies the port for the Adapter's REST server to bind on. This value should only need to be changed if there is another process already using port 8080. This will change the default for all projects. If you need to change the port for an individual project, pass in the port using the <code>-P</code> (or <code>--port</code>) flag on <code>mp-test</code> and <code>mp-build</code>.</p> Example <pre><code>{\n    \"container_port\" : 8081,\n    ...\n }\n</code></pre>"},{"location":"references/global_config/#projects-array-of-strings","title":"<code>projects</code> (array of strings)","text":"<p>The SDK tools use this array of strings to track the locations of the projects. Each string value is a project location, formatted as a UNIX or DOS path (host OS). Tracking the location of each project allows the SDK tools to be used anywhere in the console besides the project directory. Any time a new project is created, tested, or built, the project is automatically appended to the list. Projects that no longer exist in the specified location are automatically removed.</p> Example <pre><code>{\n    \"projects\" : [\n        \"/user/management-paks/casandra-db-mp\",\n        \"/user/management-paks/mysql-mp\"\n        ]\n    ...\n }\n</code></pre>"},{"location":"references/mp-build/","title":"mp-build","text":""},{"location":"references/mp-build/#purpose","title":"Purpose","text":"<p>The mp-build tool builds a pak file and uploads the adapter container to a registry. <code>mp-build</code> does not perform any tests on the adapter; to test the adapter code, use the test tool.</p>"},{"location":"references/mp-build/#prerequisites","title":"Prerequisites","text":"<ul> <li>The VMware Aria Operations Integration SDK is installed, with the virtual environment active.</li> <li>A Management Pack project created by the mp-init tool.</li> <li>Write permissions to a container registry that is accessible from VMware Aria Operations.</li> <li>Access to the Docker daemon</li> </ul> Info <p>When the Docker daemon is not accessible, mp-init might crash with the \"Cannot connect to the Docker daemon\" error. For more information about this error, visit the Docker Troubleshooting and FAQs section.</p>"},{"location":"references/mp-build/#input","title":"Input","text":""},{"location":"references/mp-build/#command-line-arguments","title":"Command-line Arguments","text":"<pre><code>  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Path to root directory of project. Defaults to the current directory, or prompts if current directory is not a project.\n  -r [REGISTRY_TAG], --registry-tag [REGISTRY_TAG]\n                        The full container registry tag where the container image will be stored (overwrites config file).\n  --registry-username REGISTRY_USERNAME\n                        The container registry username.\n  --registry-password REGISTRY_PASSWORD\n                        The container registry password.\n  -i, --insecure-collector-communication\n                        If this flag is present, communication between the collector (Cloud Proxy) and the adapter will be unencrypted. If using a custom server with this option, the server must\n                        be configured to listen on port 8080.\n</code></pre>"},{"location":"references/mp-build/#interactive-prompts","title":"Interactive Prompts","text":""},{"location":"references/mp-build/#project","title":"Project","text":"<p>In order to build an adapter, the tool needs to know which adapter to build. This is done by specifying the project. It can be set in a number of ways. </p> <ul> <li> <p>If the <code>-p PROJECT_PATH</code> or <code>--path PROJECT_PATH</code> argument is specified, the project in the path will be used.</p> </li> <li> <p>If the current working directory is a Management Pack project, that project will be used (unless a valid project was specified in command line arguments).</p> </li> <li> <p>If neither of the above options resolves to a valid project, the tool will prompt the user to select one:</p> <p><code>Select a project:  \u276f /Users/user/projects/test    /Users/user/projects/nsx-alb-avi    Other</code></p> </li> </ul> <p>If 'Other' is selected, the tool will prompt for a project path. If the path is a valid project, the path will be saved and appear in the project selection prompt in the future.</p>"},{"location":"references/mp-build/#registry-credentials","title":"Registry Credentials","text":"<p>If the user is not logged into a container registry, <code>mp-build</code> will prompt the user to sign in to one and enter their credentials. By default <code>mp-build</code> uses the 'default_container_registry' specified in the global config file. Alternatively, the user can use the <code>--registry-tag</code>, <code>--registry-username</code>,<code>--registry-password</code>. Passing <code>--registry-tag</code> without specifying a registry will use the registry specified in  the local config.json file. If no registry exists in the config.json file, the user will be prompted to enter a one. Credentials are logged and stored using docker CLI:</p> <pre><code>Login into harbor-repo.vmware.com\nUsername: user \nPassword:  \nLogin Succeeded\n</code></pre>"},{"location":"references/mp-build/#output","title":"Output","text":"<p>After logging into harbor, <code>mp-build</code> will upload the image related to the Dockerfile located in the project's root directory. Then, it will generate a pak file inside the project's build directory. The Management Pack's name comes from the adapter key (provided during the <code>mp-init</code> process) and the adapter version. Both fields are in the <code>manifest.txt</code> file under the keys <code>name</code> and <code>version</code>.</p> <pre><code>build\n\u2514\u2500\u2500 ManagementPack_1.0.0.pak\n</code></pre>"},{"location":"references/mp-build/#pak-file","title":"Pak file","text":"<p>The primary artifact of the <code>mp-build</code> tool is a pak file that can be uploaded directly to on-prem VMware Aria Operations installations. The VMware Aria Operations Integration SDK does not currently have support for VMware Aria Operations Cloud. </p> <p>The pak file contains:  * The <code>manifest.txt</code> file and its localization inside the <code>resources</code> directory.  * The EULA file(s) * An optional Management Pack icon file. * All content inside the <code>content</code> directory. * An adapter.zip file, containing:   * The <code>conf</code> directory (including <code>describe.xml</code> and its localization file(s)).   * A configuration file that includes information about the adapter, including the container's registry, repository, and digest. </p> <p>A pak file is a zip file created using the deflate compression algorithm. The contents can be inspected by using most unzip tools for extraction (depending on the tool, it may be necessary to rename the <code>.pak</code> extension to <code>.zip</code>).</p>"},{"location":"references/mp-build/#logs","title":"Logs","text":"<p>Logs from build process are written to the <code>logs/build.log</code> file. This is useful for debugging purposes in case the build fails.</p>"},{"location":"references/mp-init/","title":"mp-init","text":""},{"location":"references/mp-init/#purpose","title":"Purpose","text":"<p>The <code>mp-init</code> tool generates project templates that contain all the requirements to develop a Management Pack with a containerized adapter for VMware Aria Operations. To build a Management Pack, use the build tool. When calling <code>mp-init</code>, the user will be prompted with a series of questions. The script will use these questions to generate an initial project structure and create classifiers that other tools and VMware Aria Operations will use.</p>"},{"location":"references/mp-init/#prerequisites","title":"Prerequisites","text":"<ul> <li>The VMware Aria Operations Integration SDK is installed, with the virtual environment active.</li> </ul> Warning <p>Running <code>mp-init</code> as root is not recommended, as this requires some directories to have escalated permissions.</p>"},{"location":"references/mp-init/#input","title":"Input","text":""},{"location":"references/mp-init/#command-line-arguments","title":"Command-line Arguments","text":"<p><code>mp-init</code> does not have any command-line arguments</p>"},{"location":"references/mp-init/#interactive-prompts","title":"Interactive Prompts","text":"<p>When using the <code>mp-init</code> script, it is helpful to know what technology the Management pack will monitor.</p>"},{"location":"references/mp-init/#project-directory","title":"Project Directory","text":"<p>The project directory where the mp-init tool can generate a project. The project contains a sample adapter, content directories, and metadata. If the project directory does not exist, it will be created. <pre><code>user@host:~mp-init\nEnter a directory to create the project in. This is the directory where adapter code, metadata, and\ncontent will reside. If the directory doesn't already exist, it will be created.\nPath: my-adapter\n</code></pre></p>"},{"location":"references/mp-init/#display-name","title":"Display Name","text":"<p>VMware Aria Operations Manager uses the display name as the name of the Management Pack generated by this project. The name should include the name of the technology the Management Pack monitors. <pre><code>Management pack display name: My Adapter\n</code></pre></p>"},{"location":"references/mp-init/#adapter-key","title":"Adapter Key","text":"<p>The adapter key is used internally to identify the Management Pack and Adapter. It should be unique and cannot contain spaces or other special characters. It also cannot start with a number. By default, it is set to the Display Name with special characters removed (if the Display Name begins with a number, 'Adapter' is prepended). <pre><code>Management pack adapter key: MyAdapter\n</code></pre></p>"},{"location":"references/mp-init/#description","title":"Description","text":"<p>A brief description of the Management Pack and the technology it monitors. The description should include relevant versions of the monitored technology. <pre><code>Management pack description: This management pack is an example for the VMware Aria Operations Integration SDK project.\n</code></pre></p>"},{"location":"references/mp-init/#vendor","title":"Vendor","text":"<p>The name of the vendor/developer of the Management Pack. VMware Aria Operations Manager will display this information during the installation of the  Management Pack generated by this project. <pre><code>Management pack vendor: My Company \n</code></pre></p>"},{"location":"references/mp-init/#eula","title":"EULA","text":"<p>The End-User License Agreement (EULA) is a text file that provides guidelines for distributing and using the Management Pack generated by this project. It is generally only necessary for Management Packs that will be distributed. The content of this file appears in VMware Aria Operations Manager during the installation of this management pack. <pre><code>Enter a path to a EULA text file, or leave blank for no EULA:\nA EULA can be added later by editing the default 'eula.txt' file.\n</code></pre></p>"},{"location":"references/mp-init/#icon","title":"Icon","text":"<p>The icon for the Management Pack generated by this project. The icon will be displayed in VMware Aria Operations Manager. The icon image must be 256x256 pixels in PNG format. <pre><code>Enter a path to the management pack icon file, or leave blank for no icon:\nAn icon can be added later by setting the 'pak_icon' key in 'manifest.txt' to the icon file name and adding the icon file to the root project directory.\n</code></pre></p>"},{"location":"references/mp-init/#output","title":"Output","text":"<p>The init script creates a project in the given path with the following structure: <pre><code>.\n\u251c\u2500\u2500 Dockerfile\n\u251c\u2500\u2500 adapter_requirements.txt\n\u251c\u2500\u2500 commands.cfg\n\u251c\u2500\u2500 eula.txt\n\u251c\u2500\u2500 manifest.txt\n\u251c\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 venv-ADAPTER NAME\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 adapter.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 constants.py\n\u251c\u2500\u2500 conf\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 describeSchema.xsd\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n\u251c\u2500\u2500 content\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 alertdefs\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 alertDefinitionSchema.xsd\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 customgroups\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 dashboards\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 files\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 reskndmetric\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 solutionconfig\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 topowidget\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 txtwidget\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 policies\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 recommendations\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 reports\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 resources\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 supermetrics\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 symptomdefs\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 traversalspecs\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 traversalSpecsSchema.xsd\n\u2514\u2500\u2500 resources\n    \u2514\u2500\u2500 resources.properties\n</code></pre></p>"},{"location":"references/mp-init/#dockerfile-file","title":"Dockerfile (file)","text":"<p>Contains all necessary instructions to build a container with an HTTP server, the user's executable adapter code, and any additional dependencies specified by the user.</p>"},{"location":"references/mp-init/#adapter_requirementstxt-file","title":"adapter_requirements.txt (file)","text":"<p>This file defines all the dependencies needed by the adapter at run time. This file is copied onto the container where the adapter runs and used by the default Dockerfile to install dependencies into the container image.</p>"},{"location":"references/mp-init/#requirementstxt-file","title":"requirements.txt (file)","text":"<p>This file defines all the dependencies needed for development of the adapter. This file does not get copied into the container image.</p>"},{"location":"references/mp-init/#commandscfg-file","title":"commands.cfg (file)","text":"<p>This files contains a list of the commands the HTTP server can run, along with the path to the executable related to the command. By default, all commands are run by executing the <code>adapter.py</code> file along with a parameter that defines a command. For example, when the HTTP server receives a request to run a test connection, it reads the commands.cfg key for <code>test</code> and runs the process defined by the key value, <code>/usr/local/bin/python app/adapter.py test</code>.</p>"},{"location":"references/mp-init/#app-directory","title":"app (directory)","text":"<p>By default, this directory contains a template adapter. The template adapter collects several objects and metrics from the container that the adapter is running in, and can be used as a starting point for creating a new adapter. The template adapter uses vmware-aria-operations-integration-sdk-lib to streamline the process of building adapter. The template adapter has comments throughout the code to help new users understand the process of creating their own adapter using the existing code. For additional guidance creating adapters see our <code>Guides</code> section.</p>"},{"location":"references/mp-init/#eulatxt-file","title":"eula.txt (file)","text":"<p>This file defines the End User License Agreement (EULA); If no EULA was provided then <code>mp-init</code> generates a template EULA.</p>"},{"location":"references/mp-init/#manifesttxt-file","title":"manifest.txt (file)","text":"<p>The manifest file contains top-level information that needed to install a management pack. The content is in JSON format.</p> <p>Note: The file must be encoded in UTF-8 format without a byte-order mark. If your editor automatically includes the byte-order mark when saving to UTF-8, you must remove it.</p> Manifest Property Value display_name A display name for this management pack, which appears in the list of installed management packs in the VMware Aria Operations Manager user interface. If not included or blank, the value of the name entry appears. Set to \"DISPLAY_NAME\" for localization<sup>2</sup>. name<sup>1</sup> Management pack name. Uniquely identifies the management pack but only appears in the VMware Aria Operations Manager user interface if display_name is blank. Valid values are ASCII alphanumeric characters [a-z], [A-Z], [0-9], and hyphen and underscore characters. description Brief description of the management pack and what it does. Set to \"DESCRIPTION\" for localization<sup>2</sup>. version A numeric string in the form \"major.minor.build\". For example: \"1.0.1234\". vcops_minimum_version Minimum version number of VMware Aria Operations Manager in which the management pack can be installed. For example, if the value is \" 7.0.0\", you cannot install the management pack version 6.7.0. disk_space<sup>1</sup> Size in megabytes that specifies the minimum disk space that must be available to install this management pack. run_scripts_on_all_nodes When true, validation and initialization scripts are run in all nodes in the cluster where the Management Pack is installed. The default is false, meaning that the scripts are only run in the specific node where the Management Pack is installed. eula_file<sup>1</sup> Name of the End User License Agreement (EULA) file. If not localized, the value must be \"eula.txt:\" The filename must be all lowercase for operating-system compatibility. The content of this file cannot be blank, and appears in VMware Aria Operations Manager during installation of this management pack. platform<sup>1</sup> An array of supported platforms. Set to [\"Linux-Non_VA\", \"Linux VA\"]. vendor<sup>1</sup> The vendor who provides this management pack. Set to \"VENDOR\" for localization<sup>2</sup>. pak_icon The file name for an icon image that appears in the VMware Aria Operations Manager user interface to visually identify this management pack. The icon image must be 256x256 pixels in PNG format. pak_validation_script A command that runs necessary validation code that must be performed before the management pack installation operation starts. For example: \"python validate.py\". adapter_pre_script A command that runs initialization actions to be performed at the beginning of the management pack installation operation. For example: \"python preAdapters.py\". adapter_post_script A command that runs initialization actions to be performed at the end of the management pack installation operation. For example: \"python postAdapters.py\" adapters<sup>1</sup> List of zipped adapter bundles. The VMware Aria Operations Integration SDK does not currently support multiple adapters in a single management pack. adapter_kinds<sup>1</sup> A comma-separated array of adapter kind keys for all adapters included in this management pack. For example, [\"myAdapter\"]. This value must match the AdapterKind <code>key</code> attribute in the <code>describe.xml</code> file. The VMware Aria Operations Integration SDK does not currently support multiple adapters in a single management pack. license_type Management Packs made using the VMware Aria Operations Integration SDK do not support licensing. <p><sup>1</sup> This property is required.</p> <p><sup>2</sup> Localized fields are specified in the property files located in the <code>resources/</code> directory. See Adding Localization.</p>"},{"location":"references/mp-init/#venv-adapter-name-directory","title":"venv-ADAPTER NAME (directory)","text":"<p>A Python virtual environment for the project. The directory name is prefixed with venv followed by the display name of the management pack. This virtual environment is created to allow users to use different versions of the SDK for every project.</p> <p>NOTE: This directory is excluded from version control. Users cloning the project will have to create their own venv directory( venv documentaion).</p>"},{"location":"references/mp-init/#conf-directory","title":"conf (directory)","text":"<p>The conf directory contains configuration files used by VMware Aria Operations to create a management pack instance.</p> <ul> <li>describe.xml: An XML configuration file that defines the object model for an adapter, along with semantic definitions for use in data analysis and management.</li> <li>describeSchema.xsd: A file that defines what elements and attributes may appear in the <code>describe.xml</code> document. This file does not need to be included in a Management Pack but is useful for validating that the <code>describe.xml</code> file is error-free.</li> </ul>"},{"location":"references/mp-init/#content-directory","title":"content (directory)","text":"<p>Contains all the content included in a management pack such as: alerts, dashboards, reports, recommendations, symptoms, and traversal specs. To learn more about adding content, consult the Adding Content guide.</p>"},{"location":"references/mp-init/#resources-directory","title":"resources (directory)","text":"<p>The resources directory contains localization file(s), by default <code>resources.properties</code>. This file specifies the mapping of <code>nameKey</code> attribute of elements inside the <code>manifest.txt</code>. For more information see Adding Localization.</p>"},{"location":"references/mp-test/","title":"mp-test","text":""},{"location":"references/mp-test/#purpose","title":"Purpose","text":"<p>The <code>mp-test</code> tool is used to test an adapter locally. It can verify that each of the <code>collect</code>, <code>test connection</code>, <code>endpoint urls</code>, and <code>version</code> endpoints run, validates that the output conforms to the VMware Aria Operations API, and displays the output along with any errors that were found.</p> <p>If the test tool runs error-free on each endpoint, then the Management Pack should run successfully on VMware Aria Operations.</p>"},{"location":"references/mp-test/#prerequisites","title":"Prerequisites","text":"<ul> <li>The VMware Aria Operations Integration SDK is installed, with the virtual environment active.</li> <li>A Management Pack project created by the mp-init tool.</li> <li>Access to the Docker daemon</li> </ul> Info <p>When the Docker daemon is not accessible, mp-init might crash with the \"Cannot connect to the Docker daemon\" error. For more information about this error, visit the Docker Troubleshooting and FAQs section.</p>"},{"location":"references/mp-test/#input","title":"Input","text":""},{"location":"references/mp-test/#command-line-arguments","title":"Command-line Arguments","text":"<pre><code>usage: mp-test [-h] [-p PATH] [-c CONNECTION] [-v {0,1,2,3}]\n               {connect,collect,long-run,endpoint_urls,version,wait} ...\n\nTool for running adapter test and collect methods outside of a VMware Aria Operations Cloud Proxy.\n\npositional arguments:\n  {connect,collect,long-run,endpoint_urls,version,wait}\n    connect             Simulate the 'test connection' method being called by the VMware Aria Operations collector.\n    collect             Simulate the 'collect' method being called by the VMware Aria Operations collector.\n    long-run            Simulate a long run collection and return data statistics about the overall collection.\n    endpoint_urls       Simulate the 'endpoint_urls' method being called by the VMware Aria Operations collector.\n    adapter_definition  Simulate the 'adapterDefinition' method being called by the mp-build tool to generate a describe.xml file.\n    version             Simulate the 'version' method being called by the VMware Aria Operations collector.\n    wait                Simulate the adapter running on a VMware Aria Operations collector and wait for user input to stop.\n                        Useful for calling REST methods via an external tool, such as Insomnia or Postman.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p PATH, --path PATH  Path to root directory of project. Defaults to the current directory, or prompts if\n                        current directory is not a project.\n  -c CONNECTION, --connection CONNECTION\n                        Name of a connection in this project.\n  -v [0-3], --verbosity [0-3]\n                        Determine the amount of console logging when performing validation. 0: No console\n                        logging; 3: Max console logging.\n</code></pre> <p>In addition, when using <code>collect</code> and <code>long-run</code> there are additional optional arguments:</p> <p><code>mp-test collect</code> <pre><code>usage: mp-test collect [-h] [-n [0-999]] [-w COLLECTION_WINDOW_START] [-t TIMEOUT]\n\noptions:\n  -h, --help            show this help message and exit\n  -n [0-999], --collection-number [0-999]\n                        Start at a custom collection number instead of 0.\n  -w COLLECTION_WINDOW_DURATION, --collection-window-duration COLLECTION_WINDOW_DURATION \n                        Sets a custom collection window duration in h hours, m minutes, or s seconds. The \n                        collection window end time will always be the current time. For example, '-w 20m' \n                        sets the window to the interval (20 minutes before now, now).\n  -t TIMEOUT, --timeout TIMEOUT\n                        Timeout limit for REST request performed.\n</code></pre></p> <p><code>mp-test long-run</code></p> <pre><code>usage: mp-test long-run [-h] [-d DURATION] [-i COLLECTION_INTERVAL] [-t TIMEOUT]\n\noptions:\n  -h, --help            show this help message and exit\n  -d DURATION, --duration DURATION\n                        Duration of the long run in h hours, m minutes, or s seconds.\n  -i COLLECTION_INTERVAL, --collection-interval COLLECTION_INTERVAL\n                        Amount of time to wait between collection start times. If a collection \n                        surpasses this interval, the next collection is delayed.\n  -t TIMEOUT, --timeout TIMEOUT\n                        Timeout limit for REST request performed. By default, the timeout will \n                        be set to 1.5 times the duration of the collection interval.\n</code></pre>"},{"location":"references/mp-test/#interactive-prompts","title":"Interactive Prompts","text":""},{"location":"references/mp-test/#project","title":"Project","text":"<p>In order to test an adapter, the tool needs to know which adapter to test. This is done by specifying the project. It can be set in a number of ways.  * If the <code>-p PROJECT_PATH</code> or <code>--path PROJECT_PATH</code> argument is specified, the project in the path will be used. * If the current working directory is a Management Pack project, that project will be used (unless a valid project was specified in command line arguments). * If neither of the above options resolves to a valid project, the tool will prompt the user to select one:     <pre><code>Select a project:\n\u276f /Users/user/projects/test\n  /Users/user/projects/nsx-alb-avi\n  Other\n</code></pre> If 'Other' is selected, the tool will prompt for a project path. If the path is a valid project, the path will be saved and appear in the project selection prompt in the future.</p>"},{"location":"references/mp-test/#connection","title":"Connection","text":"<p>A connection provides the inputs the adapter needs to connect to the target it will monitor, similar to creating a new Account (Adapter Instance) in VMware Aria Operations. A connection is derived from the <code>conf/describe.xml</code> file, and includes configuration fields and a credential (if one exists). See Adding a Configuration Field to an Adapter and Adding a Credential. Connections are specific to each Management Pack. The connection must be specified, and can be set in a number of ways. * If the <code>-c CONNECTION_NAME</code> or <code>--connection CONNECTION_NAME</code> argument is specified, the connection with the given name will be used.  * If a command line argument was not provided, or it was not a valid connection name, the tool will prompt the user to select an existing connection or create one:     <pre><code>Choose a connection:\n\u276f database1\n  database1_bad_credentials\n  New Connection\n</code></pre>     If <code>New Connection</code> is selected, than the test tool will prompt for a value for each configuration field (Resource Identifier) in the adapter instance resource of the describe.xml file. If the adapter instance resource has a credential, the tool will also prompt for each of the fields in the credential.</p> <pre><code>For example, in the default template there is no credential and a single configuration field called 'ID', so when creating a New Connection, the tool will prompt for a single field called 'ID':\n```\nEnter connection parameter 'ID': \n```\n\n&gt; Note: If a credential field is set as a password, the prompt will be obscured, however **it will be stored as plaintext in the project configuration file**.\n\nFinally, after all configuration and credential fields have been entered, the tool will prompt for a name for the connection. This is used to identify the connection in either a command line argument or in the interactive prompt.\n```\nEnter a name for this connection:\n```\n</code></pre>"},{"location":"references/mp-test/#method","title":"Method","text":"<p>Adapters must implement four endpoints: <code>Test Connection</code>, <code>Collect</code>, <code>Endpoint URLs</code>, and <code>Version</code>. Each invocation of the test tool can test one of these methods. The method must be specified, and can be set in a number of ways. * If one of the positional command line arguments was specified (<code>connect</code>, <code>collect</code>, <code>long-run</code>, <code>endpoint_urls</code>, <code>version</code>, or <code>wait</code>), that method will be used.  * If no command line argument for the method was provided, the tool will prompt the user to select one:     <code>Choose a method to test:      \u276f Test Connection        Collect        Long Run Collection        Endpoint URLs        Version</code></p>"},{"location":"references/mp-test/#output","title":"Output","text":"<p>The output of the test tool consists of three parts.</p>"},{"location":"references/mp-test/#result","title":"Result","text":"<p>The result is simply a JSON representation of the return value of the method that was called that is written to the console. For example, for the <code>collect</code> method, the result will have objects, metrics, properties, events, and relationships that are collected by the adapter code. The result should be manually inspected to ensure that all objects, relationships, etc are present as intended.</p>"},{"location":"references/mp-test/#validation","title":"Validation","text":"<p>After the result is received, the tool does some automatic validation of the results. If any issues are detected, the tool will write <code>Validation Failed:</code> to the console below the JSON result, followed by a list of the errors. The tool performs the following validation: * Ensure that the result JSON conforms to   the VMware Aria Operations Collector API Spec   .</p>"},{"location":"references/mp-test/#logs","title":"Logs","text":"<p>Logs from the server (<code>server.log</code>) and adapter (by default, <code>adapter.log</code>, but this can be changed) are written to the <code>logs</code> directory. This is useful for debugging issues or exceptions during execution.</p>"},{"location":"references/project_config/","title":"Project Config File","text":"<p>The project config file is a JSON file called <code>config.json</code> located at the root of the project. This document describes what data is present in the file.</p>"},{"location":"references/project_config/#default_memory_limit-int-default-1024","title":"<code>default_memory_limit</code> (int, default: 1024)","text":"<p>Determines how much memory can be allocated to the container running the adapter. In addition to the memory required by the Adapter, this includes memory used by the Base OS layer and the Adapter's REST server. If this limit is exceeded, the container will immediately exit.</p>"},{"location":"references/project_config/#container_repository-string","title":"<code>container_repository</code> (string)","text":"<p>Specifies the container repository to be used by mp-build. This key value should contain the  <code>host</code> and <code>path</code> used to tag and push images to the specified repository.</p> <p>This overrides the default_container_registry_path if it is present.</p> Example <pre><code>{\n    \"container_repository\" : \"harbor.my-organization.com/my-project-registry/adaptername\"\n    ...\n}\n</code></pre>"},{"location":"references/project_connections_config/","title":"Project Connections File","text":"<p>Warning</p> <p>Credentials for connections are stored in plain text in the  project connections file. For this reason, we recommend that this  file is not included in version control (it is included in the .gitignore file by  default), and credentials should be revokable and have the minimum set of permissions necessary for the Adapter to function (Usually Read-Only is sufficient).</p> <p>The project connections file is a JSON named <code>connections.json</code> located in the project's root directory. This document  describes what data is present in the file.</p> Note <p>If the file is not ignored by git, <code>mp-test</code> and <code>mp-build</code> will append the file to the project's <code>.gitignore</code> file. </p>"},{"location":"references/project_connections_config/#connections-array-of-objects","title":"<code>connections</code> (array of objects)","text":"<p>This property stores a list of connection objects.</p> Example config.json<pre><code>{\n    \"connections\" : [\n          {\n             ...\n            }\n        ]\n    ...\n }\n</code></pre>"},{"location":"references/project_connections_config/#credential-object","title":"<code>credential</code> (object)","text":"<p>An object that contains credential information.</p> Example config.json<pre><code>{\n    \"connections\" : [\n          {\n            \"credential\":{\n               \"token\": {\n                   \"password\": true,\n                   \"required\": true,\n                   \"value\": \"password\"\n                 }\n              \"credential_kind_key\": \"my_app_credential\"\n              }\n             ...\n            }\n        ]\n    ...\n }\n</code></pre>"},{"location":"references/project_connections_config/#identifiers-object","title":"<code>identifiers</code> (object)","text":"<p>An object that contains one or more identifiers. The identifiers should match the adapter instance identifiers defined in the Object Model.</p> Example config.json<pre><code>{\n    \"connections\" : [\n          {\n            \"identifiers\": {\n                \"container_memory_limit\": {\n                  \"part_of_uniqueness\": false,\n                  \"required\": true,\n                  \"value\": \"2048\"\n                },\n                \"enable_sotrage_collection\": {\n                  \"part_of_uniqueness\": false,\n                  \"required\": true,\n                  \"value\": \"False\"\n                },\n              }\n              ...\n            }\n        ]\n    ...\n }\n</code></pre>"},{"location":"references/project_connections_config/#custom_collection_number-int-optional","title":"<code>custom_collection_number</code> (int, optional)","text":"<p>The collection number <code>mp-test</code> passes to the adapter instance. This is helpful when testing adapter behaviours that are triggered based on collection number (for example, an expensive computation that can doesn't need to happen every collection).</p> Example config.json<pre><code>{\n    \"connections\" : [\n            \"custom_collection_number\": 10,\n            ...\n        ]\n    ...\n}\n</code></pre>"},{"location":"references/project_connections_config/#custom_collection_window-int-optional","title":"<code>custom_collection_window</code> (int, optional)","text":"<p>The collection window duration <code>mp-test</code> passed to the adapter instance. This is helpful when testing behaviours that are triggered based on collection window duration.</p> Example config.json<pre><code>{\n    \"connections\" : [\n            \"custom_collection_window\": 20,\n            ...\n        ]\n    ...\n}\n</code></pre>"},{"location":"references/project_connections_config/#name-string","title":"<code>name</code> (string)","text":"<p>The name of the connection. This is used as the connection identifier and can be used to specify a connection name when using <code>mp-test</code>.</p> Example <pre><code>{\n\"connections\" : [\n{\n...\nname:\"host-1\"\n},\n{\n...\nname:\"host-2\"\n}\n]\n...\n}\n</code></pre>"},{"location":"references/project_connections_config/#suite_api_hostname-string","title":"<code>suite_api_hostname</code> (string)","text":"<p>The suite API host name used for this connection. If there isn't one, the values should be 'null'.</p> Example <pre><code>{\n\"connections\" : [\n{\n...\nsuite_api_hostname: \"my-host.example.com\"\n}\n]\n...\n}\n</code></pre> Note <p>If this property is not provided for the connection, then it will fall back to the property defined outside of the connections.</p> <pre><code>{\n    \"connections\" : [\n          {\n             ...\n          }\n        ]\n    ...\n    suite_api_hostname: \"my-default-host.example.com\",\n    suite_api_password: \"my_password\",\n    suite_api_username: \"my_username\",\n }\n</code></pre>"},{"location":"references/project_connections_config/#suite_api_password-string","title":"<code>suite_api_password</code> (string)","text":"<p>The suite API password used to log in to the specified host. If there isn't one, the values should be 'null'.</p> Example <pre><code>{\n\"connections\" : [\n{\n...\nsuite_api_password: \"my_password\",\n}\n]\n...\n}\n</code></pre> Note <p>If this property is not provided for the connection, then it will fall back to the property defined outside of the connections.</p> <pre><code>{\n    \"connections\" : [\n          {\n             ...\n          }\n        ]\n    ...\n    suite_api_hostname: \"my-default-host.example.com\",\n    suite_api_password: \"my_password\",\n    suite_api_username: \"my_username\",\n }\n</code></pre>"},{"location":"references/project_connections_config/#suite_api_username-string","title":"<code>suite_api_username</code> (string)","text":"<p>The suite API username used to log in to the specified host. If there isn't one, the values should be 'null'.</p> Example <pre><code>{\n\"connections\" : [\n{\n...\nsuite_api_username: \"my_username\",\n}\n]\n...\n}\n</code></pre> Note <p>If this property is not provided for the connection, then it will fall back to the property defined outside of the connections.</p> <pre><code>{\n    \"connections\" : [\n          {\n             ...\n          }\n        ]\n    ...\n    suite_api_hostname: \"my-default-host.example.com\",\n    suite_api_password: \"my_password\",\n    suite_api_username: \"my_username\",\n }\n</code></pre>"},{"location":"references/python-lib/adapter_instance/","title":"Adapter instance","text":""},{"location":"references/python-lib/adapter_instance/#aria.ops.adapter_instance.AdapterInstance","title":"<code>AdapterInstance</code>","text":"<p>               Bases: <code>Object</code></p> Source code in <code>aria/ops/adapter_instance.py</code> <pre><code>class AdapterInstance(Object):  # type: ignore\n    def __init__(self, json: dict) -&gt; None:\n        adapter_key = json.get(\"adapter_key\", {})\n        super().__init__(\n            Key(\n                adapter_kind=adapter_key.get(\"adapter_kind\"),\n                object_kind=adapter_key.get(\"object_kind\"),\n                name=adapter_key.get(\"name\"),\n                identifiers=[\n                    Identifier(\n                        identifier.get(\"key\"),\n                        identifier.get(\"value\"),\n                        identifier.get(\"is_part_of_uniqueness\"),\n                    )\n                    for identifier in adapter_key.get(\"identifiers\", [])\n                ],\n            )\n        )\n\n        credential_config = json.get(\"credential_config\")\n        if type(credential_config) is dict:\n            self.credential_type = credential_config.get(\"credential_key\", None)\n            self.credentials = {\n                credential.get(\"key\"): credential.get(\"value\")\n                for credential in credential_config.get(\"credential_fields\", [])\n            }\n        else:\n            self.credential_type = None\n            self.credentials = {}\n\n        cluster_connection_info = json.get(\"cluster_connection_info\")\n        if type(cluster_connection_info) is dict:\n            self.suite_api_client = SuiteApiClient(\n                SuiteApiConnectionParameters(\n                    username=cluster_connection_info.get(\"user_name\"),\n                    password=cluster_connection_info.get(\"password\"),\n                    host=cluster_connection_info.get(\"host_name\"),\n                )\n            )\n        else:\n            self.suite_api_client = None\n\n        certificate_config = json.get(\"certificate_config\")\n        if type(certificate_config) is dict:\n            self.certificates = certificate_config.get(\"certificates\", [])\n        else:\n            self.certificates = []\n\n        self.collection_number: Optional[int] = json.get(\"collection_number\", None)\n        self.collection_window: Optional[Dict] = json.get(\"collection_window\", None)\n\n    def get_credential_type(self) -&gt; Optional[str]:\n        \"\"\"Get the type (key) of credential. This is useful if an adapter supports multiple types of credentials.\n\n        Returns:\n            the type of the credential used by this adapter instance, or None if the adapter instance does not have a credential.\n        \"\"\"\n        return self.credential_type  # type: ignore[no-any-return]\n\n    def get_credential_value(self, credential_key: str) -&gt; Optional[str]:\n        \"\"\"Retrieve the value of a given credential\n\n        Args:\n            credential_key (str): Key of the credential field\n\n        Returns:\n            value associated with the credential field, or None if a credential field with the given key does not exist.\n        \"\"\"\n        return self.credentials.get(credential_key)\n\n    @classmethod\n    def from_input(cls, infile: str = sys.argv[-2]) -&gt; AdapterInstance:\n        # The server always invokes methods with the input file as the second to last argument\n        return cls(read_from_pipe(infile))\n</code></pre>"},{"location":"references/python-lib/adapter_instance/#aria.ops.adapter_instance.AdapterInstance.get_credential_type","title":"<code>get_credential_type()</code>","text":"<p>Get the type (key) of credential. This is useful if an adapter supports multiple types of credentials.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>the type of the credential used by this adapter instance, or None if the adapter instance does not have a credential.</p> Source code in <code>aria/ops/adapter_instance.py</code> <pre><code>def get_credential_type(self) -&gt; Optional[str]:\n    \"\"\"Get the type (key) of credential. This is useful if an adapter supports multiple types of credentials.\n\n    Returns:\n        the type of the credential used by this adapter instance, or None if the adapter instance does not have a credential.\n    \"\"\"\n    return self.credential_type  # type: ignore[no-any-return]\n</code></pre>"},{"location":"references/python-lib/adapter_instance/#aria.ops.adapter_instance.AdapterInstance.get_credential_value","title":"<code>get_credential_value(credential_key)</code>","text":"<p>Retrieve the value of a given credential</p> <p>Parameters:</p> Name Type Description Default <code>credential_key</code> <code>str</code> <p>Key of the credential field</p> required <p>Returns:</p> Type Description <code>Optional[str]</code> <p>value associated with the credential field, or None if a credential field with the given key does not exist.</p> Source code in <code>aria/ops/adapter_instance.py</code> <pre><code>def get_credential_value(self, credential_key: str) -&gt; Optional[str]:\n    \"\"\"Retrieve the value of a given credential\n\n    Args:\n        credential_key (str): Key of the credential field\n\n    Returns:\n        value associated with the credential field, or None if a credential field with the given key does not exist.\n    \"\"\"\n    return self.credentials.get(credential_key)\n</code></pre>"},{"location":"references/python-lib/adapter_logging/","title":"Adapter logging","text":""},{"location":"references/python-lib/adapter_logging/#aria.ops.adapter_logging.getLogger","title":"<code>getLogger(name)</code>","text":"<p>A convenience function to get a logger with a specific name.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the logger.</p> required <p>Returns:</p> Type Description <code>Logger</code> <p>logging.Logger: The requested logger.</p> Source code in <code>aria/ops/adapter_logging.py</code> <pre><code>def getLogger(name: str) -&gt; logging.Logger:\n    \"\"\"\n    A convenience function to get a logger with a specific name.\n\n    Args:\n        name (str): The name of the logger.\n\n    Returns:\n        logging.Logger: The requested logger.\n    \"\"\"\n    return logging.getLogger(name)\n</code></pre>"},{"location":"references/python-lib/adapter_logging/#aria.ops.adapter_logging.rotate","title":"<code>rotate()</code>","text":"<p>Rotates the current adapter logs to their backups (e.g., <code>adapter.log</code> to <code>adapter.log.1</code>) and starts logging to the new adapter.log file.</p> Source code in <code>aria/ops/adapter_logging.py</code> <pre><code>def rotate() -&gt; None:\n    \"\"\"\n    Rotates the current adapter logs to their backups (e.g., `adapter.log` to\n    `adapter.log.1`) and starts logging to the new adapter.log file.\n    \"\"\"\n    if log_handler:\n        log_handler.doRollover()\n</code></pre>"},{"location":"references/python-lib/adapter_logging/#aria.ops.adapter_logging.setup_logging","title":"<code>setup_logging(filename, file_count=5, max_size=0)</code>","text":"<p>Sets up logging using the given parameters.</p> <p>Parameters:</p> Name Type Description Default <code>filename</code> <code>str</code> <p>The name of the file to log to.</p> required <code>file_count</code> <code>int</code> <p>The total number of files to retain. Defaults to 5.</p> <code>5</code> <code>max_size</code> <code>int</code> <p>The maximum size in bytes of each file before the file                       automatically rotates to a new one. Defaults to '0', which will                       do no automatic rotation. Requires calling the 'rotate()' function                       manually to ensure logs do not become too large.</p> <code>0</code> Source code in <code>aria/ops/adapter_logging.py</code> <pre><code>def setup_logging(filename: str, file_count: int = 5, max_size: int = 0) -&gt; None:\n    \"\"\"\n    Sets up logging using the given parameters.\n\n    Args:\n        filename (str): The name of the file to log to.\n        file_count (int, optional): The total number of files to retain. Defaults to 5.\n        max_size (int, optional): The maximum size in bytes of each file before the file\n                                  automatically rotates to a new one. Defaults to '0', which will\n                                  do no automatic rotation. Requires calling the 'rotate()' function\n                                  manually to ensure logs do not become too large.\n    \"\"\"\n    logdir = os.path.join(os.sep, \"var\", \"log\")\n    if os.access(logdir, os.W_OK):\n        try:\n            global log_handler\n            log_handler = RotatingFileHandler(\n                os.path.join(os.sep, \"var\", \"log\", filename),\n                maxBytes=max_size,\n                backupCount=file_count,\n            )\n            logging.basicConfig(\n                format=\"%(asctime)s,%(msecs)d %(name)s %(levelname)s %(message)s\",\n                datefmt=\"%Y-%m-%d %H:%M:%S\",\n                level=_get_default_log_level(),\n                handlers=[log_handler],\n            )\n            _set_log_levels()\n        except Exception as e:\n            logging.basicConfig(level=logging.INFO)\n            logging.exception(e)\n    else:\n        logging.basicConfig(level=logging.INFO)\n        logging.exception(\n            f\"Cannot write to log file '{os.path.join(logdir, filename)}'\"\n        )\n</code></pre>"},{"location":"references/python-lib/data/","title":"Data","text":""},{"location":"references/python-lib/data/#aria.ops.data.Metric","title":"<code>Metric</code>","text":"<p>Class representing a Metric Data Point.</p> <p>Metrics are numeric values that represent data at a particular point in time. These are stored as time series data.</p> <p>Examples:</p> <p>CPU Utilization Disk Capacity Current User Session Count Cumulative Data Received</p> Source code in <code>aria/ops/data.py</code> <pre><code>class Metric:\n    \"\"\"Class representing a Metric Data Point.\n\n    Metrics are numeric values that represent data at a particular point in time. These are stored as time series data.\n\n    Examples:\n        CPU Utilization\n        Disk Capacity\n        Current User Session Count\n        Cumulative Data Received\n    \"\"\"\n\n    def __init__(self, key: str, value: float, timestamp: Optional[int] = None):\n        \"\"\"\n        Creates a Metric.\n\n        Args:\n            key (str): A string representing the type of metric.\n            value (float): The value of the Metric.\n            timestamp (Optional[int], optional): Time in milliseconds since the Epoch when this metric\n                                                 value was recorded. Defaults to the current time.\n        \"\"\"\n        self.key = key\n        self.value = value\n\n        if timestamp is None:\n            self.timestamp = int(time.time() * 1000)\n        else:\n            self.timestamp = timestamp\n\n    def get_json(self) -&gt; dict:\n        \"\"\"\n        Get a JSON representation of this Metric.\n\n        Returns a JSON representation of this Metric in the format required by vROps.\n\n        Returns:\n            dict: A JSON representation of this Metric.\n        \"\"\"\n        return {\n            \"key\": self.key,\n            \"numberValue\": float(self.value),\n            \"timestamp\": self.timestamp,\n        }\n</code></pre>"},{"location":"references/python-lib/data/#aria.ops.data.Metric.__init__","title":"<code>__init__(key, value, timestamp=None)</code>","text":"<p>Creates a Metric.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A string representing the type of metric.</p> required <code>value</code> <code>float</code> <p>The value of the Metric.</p> required <code>timestamp</code> <code>Optional[int]</code> <p>Time in milliseconds since the Epoch when this metric                                  value was recorded. Defaults to the current time.</p> <code>None</code> Source code in <code>aria/ops/data.py</code> <pre><code>def __init__(self, key: str, value: float, timestamp: Optional[int] = None):\n    \"\"\"\n    Creates a Metric.\n\n    Args:\n        key (str): A string representing the type of metric.\n        value (float): The value of the Metric.\n        timestamp (Optional[int], optional): Time in milliseconds since the Epoch when this metric\n                                             value was recorded. Defaults to the current time.\n    \"\"\"\n    self.key = key\n    self.value = value\n\n    if timestamp is None:\n        self.timestamp = int(time.time() * 1000)\n    else:\n        self.timestamp = timestamp\n</code></pre>"},{"location":"references/python-lib/data/#aria.ops.data.Metric.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Metric.</p> <p>Returns a JSON representation of this Metric in the format required by vROps.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A JSON representation of this Metric.</p> Source code in <code>aria/ops/data.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"\n    Get a JSON representation of this Metric.\n\n    Returns a JSON representation of this Metric in the format required by vROps.\n\n    Returns:\n        dict: A JSON representation of this Metric.\n    \"\"\"\n    return {\n        \"key\": self.key,\n        \"numberValue\": float(self.value),\n        \"timestamp\": self.timestamp,\n    }\n</code></pre>"},{"location":"references/python-lib/data/#aria.ops.data.Property","title":"<code>Property</code>","text":"<p>Class representing a Property value.</p> <p>A Property is a value, usually a string, that will change infrequently or not at all. Only the current value is important.</p> <p>Examples:</p> <p>IP Address Software Version CPU Core Count</p> Source code in <code>aria/ops/data.py</code> <pre><code>class Property:\n    \"\"\"Class representing a Property value.\n\n    A Property is a value, usually a string, that will change infrequently or not at all. Only the current value is\n    important.\n\n    Examples:\n        IP Address\n        Software Version\n        CPU Core Count\n    \"\"\"\n\n    def __init__(\n        self, key: str, value: Union[float, str], timestamp: Optional[int] = None\n    ):\n        \"\"\"\n        Creates a Property.\n\n        Args:\n            key (str): A string representing the type of property.\n            value (Union[float, str]): The value of the property. Can be str or float.\n            timestamp (Optional[int], optional): Time in milliseconds since the Epoch when this property\n                                                 value was recorded. Defaults to the current time.\n        \"\"\"\n        self.key = key\n        self.value = value\n\n        if timestamp is None:\n            self.timestamp = int(time.time() * 1000)\n        else:\n            self.timestamp = timestamp\n\n    def get_json(self) -&gt; dict:\n        \"\"\"\n        Get a JSON representation of this Property.\n\n        Returns a JSON representation of this Property in the format required by vROps.\n\n        Returns:\n            dict: A JSON representation of this Property.\n        \"\"\"\n        if isinstance(self.value, str):\n            label = \"stringValue\"\n        else:\n            label = \"numberValue\"\n            self.value = float(self.value)\n\n        return {\"key\": self.key, label: self.value, \"timestamp\": self.timestamp}\n</code></pre>"},{"location":"references/python-lib/data/#aria.ops.data.Property.__init__","title":"<code>__init__(key, value, timestamp=None)</code>","text":"<p>Creates a Property.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A string representing the type of property.</p> required <code>value</code> <code>Union[float, str]</code> <p>The value of the property. Can be str or float.</p> required <code>timestamp</code> <code>Optional[int]</code> <p>Time in milliseconds since the Epoch when this property                                  value was recorded. Defaults to the current time.</p> <code>None</code> Source code in <code>aria/ops/data.py</code> <pre><code>def __init__(\n    self, key: str, value: Union[float, str], timestamp: Optional[int] = None\n):\n    \"\"\"\n    Creates a Property.\n\n    Args:\n        key (str): A string representing the type of property.\n        value (Union[float, str]): The value of the property. Can be str or float.\n        timestamp (Optional[int], optional): Time in milliseconds since the Epoch when this property\n                                             value was recorded. Defaults to the current time.\n    \"\"\"\n    self.key = key\n    self.value = value\n\n    if timestamp is None:\n        self.timestamp = int(time.time() * 1000)\n    else:\n        self.timestamp = timestamp\n</code></pre>"},{"location":"references/python-lib/data/#aria.ops.data.Property.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Property.</p> <p>Returns a JSON representation of this Property in the format required by vROps.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A JSON representation of this Property.</p> Source code in <code>aria/ops/data.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"\n    Get a JSON representation of this Property.\n\n    Returns a JSON representation of this Property in the format required by vROps.\n\n    Returns:\n        dict: A JSON representation of this Property.\n    \"\"\"\n    if isinstance(self.value, str):\n        label = \"stringValue\"\n    else:\n        label = \"numberValue\"\n        self.value = float(self.value)\n\n    return {\"key\": self.key, label: self.value, \"timestamp\": self.timestamp}\n</code></pre>"},{"location":"references/python-lib/event/","title":"Event","text":""},{"location":"references/python-lib/event/#aria.ops.event.Event","title":"<code>Event</code>  <code>dataclass</code>","text":"<p>Represents an Aria Operations Event.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message describes and identifies an event.</p> required <code>criticality</code> <code>Criticality</code> <p>The criticality or severity of the event.</p> <code>NONE</code> <code>fault_key</code> <code>str</code> <p>A metric/property key that this event is related to. Defaults to None, which                        indicates the event's source is not related to a metric or property.</p> <code>None</code> <code>auto_cancel</code> <code>bool</code> <p>If True, VMware Aria Operations should automatically cancel an event                           when it stops being sent. Otherwise, it is the responsibility of the adapter                           to send the event with a 'cancel_date' when the event should be canceled.                           Defaults to True.</p> <code>True</code> <code>start_date</code> <code>int</code> <p>If set, overrides the start date of the event. Defaults to None, which indicates                         the start time should be the time when VMware Aria Operations first sees the event.</p> <code>None</code> <code>update_date</code> <code>int</code> <p>If set, indicates that the event has been updated by the target at the                          indicated time. Defaults to None.</p> <code>None</code> <code>cancel_date</code> <code>int</code> <p>If 'auto_cancel' is set to False, use the cancel_date to indicate that the event should                          be cancelled. Defaults to None.</p> <code>None</code> <code>watch_wait_cycle</code> <code>int</code> <p>The number of times this event must be present in a collection before Aria                               Operations surfaces it in the UI. Defaults to 1.</p> <code>1</code> <code>cancel_wait_cycle</code> <code>int</code> <p>If 'auto_cancel' is set to True, sets the number of times this event must be                                absent in a collection before Aria Operations removes it from the UI.                                Defaults to 3.</p> <code>3</code> Source code in <code>aria/ops/event.py</code> <pre><code>@dataclass(frozen=True)\nclass Event:\n    \"\"\"\n    Represents an Aria Operations Event.\n\n    Args:\n        message (str): The message describes and identifies an event.\n        criticality (Criticality, optional): The criticality or severity of the event.\n        fault_key (str, optional): A metric/property key that this event is related to. Defaults to None, which\n                                   indicates the event's source is not related to a metric or property.\n        auto_cancel (bool, optional): If True, VMware Aria Operations should automatically cancel an event\n                                      when it stops being sent. Otherwise, it is the responsibility of the adapter\n                                      to send the event with a 'cancel_date' when the event should be canceled.\n                                      Defaults to True.\n        start_date (int, optional): If set, overrides the start date of the event. Defaults to None, which indicates\n                                    the start time should be the time when VMware Aria Operations first sees the event.\n        update_date (int, optional): If set, indicates that the event has been updated by the target at the\n                                     indicated time. Defaults to None.\n        cancel_date (int, optional): If 'auto_cancel' is set to False, use the cancel_date to indicate that the event should\n                                     be cancelled. Defaults to None.\n        watch_wait_cycle (int, optional): The number of times this event must be present in a collection before Aria\n                                          Operations surfaces it in the UI. Defaults to 1.\n        cancel_wait_cycle (int, optional): If 'auto_cancel' is set to True, sets the number of times this event must be\n                                           absent in a collection before Aria Operations removes it from the UI.\n                                           Defaults to 3.\n    \"\"\"\n\n    message: str\n    criticality: Criticality = Criticality.NONE\n    fault_key: Optional[str] = None\n    auto_cancel: bool = True\n    start_date: Optional[int] = None\n    update_date: Optional[int] = None\n    cancel_date: Optional[int] = None\n    watch_wait_cycle: int = 1\n    cancel_wait_cycle: int = 3\n\n    def get_json(self) -&gt; dict:\n        \"\"\"\n        Get a JSON representation of this Event.\n\n        Returns a JSON representation of this Event in the format required by Aria Operations.\n\n        Returns:\n            dict: A JSON representation of this Event.\n        \"\"\"\n        # message is the only required field. Other fields are optional but non-nullable if present\n        json: dict = {\"message\": self.message}\n\n        if self.criticality is not None:\n            json[\"criticality\"] = self.criticality.value\n        if self.message is not None:\n            json[\"message\"] = self.message\n        if self.fault_key is not None:\n            json[\"faultKey\"] = self.fault_key\n        if self.auto_cancel is not None:\n            json[\"autoCancel\"] = self.auto_cancel\n        if self.start_date is not None:\n            json[\"startDate\"] = self.start_date\n        if self.update_date is not None:\n            json[\"updateDate\"] = self.update_date\n        if self.cancel_date is not None:\n            json[\"cancelDate\"] = self.cancel_date\n        if self.watch_wait_cycle is not None:\n            json[\"watchWaitCycle\"] = self.watch_wait_cycle\n        if self.cancel_wait_cycle is not None:\n            json[\"cancelWaitCycle\"] = self.cancel_wait_cycle\n\n        return json\n</code></pre>"},{"location":"references/python-lib/event/#aria.ops.event.Event.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Event.</p> <p>Returns a JSON representation of this Event in the format required by Aria Operations.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A JSON representation of this Event.</p> Source code in <code>aria/ops/event.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"\n    Get a JSON representation of this Event.\n\n    Returns a JSON representation of this Event in the format required by Aria Operations.\n\n    Returns:\n        dict: A JSON representation of this Event.\n    \"\"\"\n    # message is the only required field. Other fields are optional but non-nullable if present\n    json: dict = {\"message\": self.message}\n\n    if self.criticality is not None:\n        json[\"criticality\"] = self.criticality.value\n    if self.message is not None:\n        json[\"message\"] = self.message\n    if self.fault_key is not None:\n        json[\"faultKey\"] = self.fault_key\n    if self.auto_cancel is not None:\n        json[\"autoCancel\"] = self.auto_cancel\n    if self.start_date is not None:\n        json[\"startDate\"] = self.start_date\n    if self.update_date is not None:\n        json[\"updateDate\"] = self.update_date\n    if self.cancel_date is not None:\n        json[\"cancelDate\"] = self.cancel_date\n    if self.watch_wait_cycle is not None:\n        json[\"watchWaitCycle\"] = self.watch_wait_cycle\n    if self.cancel_wait_cycle is not None:\n        json[\"cancelWaitCycle\"] = self.cancel_wait_cycle\n\n    return json\n</code></pre>"},{"location":"references/python-lib/object/","title":"Object","text":""},{"location":"references/python-lib/object/#aria.ops.object.Identifier","title":"<code>Identifier</code>","text":"<p>Represents a piece of data that identifies an Object.</p> Source code in <code>aria/ops/object.py</code> <pre><code>class Identifier:\n    \"\"\"Represents a piece of data that identifies an Object.\"\"\"\n\n    def __init__(\n        self, key: str, value: str, is_part_of_uniqueness: bool = True\n    ) -&gt; None:\n        \"\"\"Creates an identifier which is used as part of an Object's identification in a :class:`Key`.\n\n        This class represents a piece of data that identifies an Object. If `is_part_of_uniqueness` is False, this data\n        can change over time without creating a new Object. This is primarily used for human-readable values that are\n        useful in identification purposes, but may change at times.\n\n        Args:\n            key: A key that determines which identifier the value corresponds to.\n            value: The value of the identifier.\n            is_part_of_uniqueness: Determines if this key/value pair is used in the identification process.\n        \"\"\"\n        self.key = key\n        self.value = value\n        self.is_part_of_uniqueness = is_part_of_uniqueness\n\n    def __repr__(self) -&gt; str:\n        u = \"*\" if self.is_part_of_uniqueness else \"\"\n        return f\"{self.key}{u}:{self.value}\"\n\n    def __key(self) -&gt; tuple:\n        if self.is_part_of_uniqueness:\n            # 'True' is included as the second tuple because otherwise we could get a collision between a key that has\n            # a value of 'False' and a key that is not a part of uniqueness\n            return self.key, True, self.value\n        return self.key, False\n\n    def __eq__(self, other: Any) -&gt; bool:\n        if isinstance(other, Identifier):\n            if (\n                self.key == other.key\n                and self.is_part_of_uniqueness != other.is_part_of_uniqueness\n            ):\n                # TODO: is there a better way we can handle this case?\n                raise IdentifierUniquenessException(\n                    f\"Identifier '{self.key}' has an inconsistent uniqueness attribute\"\n                )\n            return self.__key() == other.__key()\n        return False\n\n    def __hash__(self) -&gt; int:\n        return hash(self.__key())\n\n    def get_json(self) -&gt; dict:\n        \"\"\"Get a JSON representation of this Identifier.\n\n        This method returns a JSON representation of this Identifier in the format required by vROps.\n\n        Returns:\n            dict: A JSON representation of this Identifier.\n        \"\"\"\n        return {\n            \"key\": self.key,\n            \"value\": self.value,\n            \"isPartOfUniqueness\": self.is_part_of_uniqueness,\n        }\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Identifier.__init__","title":"<code>__init__(key, value, is_part_of_uniqueness=True)</code>","text":"<p>Creates an identifier which is used as part of an Object's identification in a :class:<code>Key</code>.</p> <p>This class represents a piece of data that identifies an Object. If <code>is_part_of_uniqueness</code> is False, this data can change over time without creating a new Object. This is primarily used for human-readable values that are useful in identification purposes, but may change at times.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>A key that determines which identifier the value corresponds to.</p> required <code>value</code> <code>str</code> <p>The value of the identifier.</p> required <code>is_part_of_uniqueness</code> <code>bool</code> <p>Determines if this key/value pair is used in the identification process.</p> <code>True</code> Source code in <code>aria/ops/object.py</code> <pre><code>def __init__(\n    self, key: str, value: str, is_part_of_uniqueness: bool = True\n) -&gt; None:\n    \"\"\"Creates an identifier which is used as part of an Object's identification in a :class:`Key`.\n\n    This class represents a piece of data that identifies an Object. If `is_part_of_uniqueness` is False, this data\n    can change over time without creating a new Object. This is primarily used for human-readable values that are\n    useful in identification purposes, but may change at times.\n\n    Args:\n        key: A key that determines which identifier the value corresponds to.\n        value: The value of the identifier.\n        is_part_of_uniqueness: Determines if this key/value pair is used in the identification process.\n    \"\"\"\n    self.key = key\n    self.value = value\n    self.is_part_of_uniqueness = is_part_of_uniqueness\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Identifier.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Identifier.</p> <p>This method returns a JSON representation of this Identifier in the format required by vROps.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A JSON representation of this Identifier.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"Get a JSON representation of this Identifier.\n\n    This method returns a JSON representation of this Identifier in the format required by vROps.\n\n    Returns:\n        dict: A JSON representation of this Identifier.\n    \"\"\"\n    return {\n        \"key\": self.key,\n        \"value\": self.value,\n        \"isPartOfUniqueness\": self.is_part_of_uniqueness,\n    }\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.IdentifierUniquenessException","title":"<code>IdentifierUniquenessException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception when two Objects of the same type have the same identifier but the <code>is_part_of_uniqueness</code> attribute does not match.</p> Source code in <code>aria/ops/object.py</code> <pre><code>class IdentifierUniquenessException(Exception):\n    \"\"\"Exception when two Objects of the same type have the same identifier but the `is_part_of_uniqueness` attribute\n    does not match.\n    \"\"\"\n\n    pass\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Key","title":"<code>Key</code>","text":"<p>Object's Key class, used for identifying Objects</p> <p>Objects are identified by the Adapter Kind, Object Kind, and one or more Identifiers.</p> <p>Identifiers can be either the Object's 'name', or one or more 'Identifier' key-value pairs. In order for an 'Identifier' to be used for identification, it must have 'is_part_of_uniqueness' set to True (this is the default).</p> <p>Two Objects with the same Key are not permitted in a :class:<code>Result</code>.</p> <p>Objects must be created with the full key. Keys should not change after the Object has been created.</p> <p>All Objects with the same Adapter Kind and Object Kind must have the same set of Identifiers that have 'is_part_of_uniqueness' set to True.</p> Source code in <code>aria/ops/object.py</code> <pre><code>class Key:\n    \"\"\"Object's Key class, used for identifying Objects\n\n    Objects are identified by the Adapter Kind, Object Kind, and one or more Identifiers.\n\n    Identifiers can be either the Object's 'name', or one or more 'Identifier' key-value pairs.\n    In order for an 'Identifier' to be used for identification, it must have 'is_part_of_uniqueness' set to True\n    (this is the default).\n\n    Two Objects with the same Key are not permitted in a :class:`Result`.\n\n    Objects must be created with the full key. Keys should not change after the Object has been created.\n\n    All Objects with the same Adapter Kind and Object Kind must have the same set of Identifiers that have\n    'is_part_of_uniqueness' set to True.\n    \"\"\"\n\n    def __init__(\n        self,\n        adapter_kind: str,\n        object_kind: str,\n        name: str,\n        identifiers: Optional[List[Identifier]] = None,\n    ) -&gt; None:\n        \"\"\"Initializes a Key, which uniquely identifies a vROps Object.\n\n        Args:\n            adapter_kind: The Adapter Kind this Object is associated with.\n            object_kind: The Object Kind (e.g., class) of this Object.\n            name: A human-readable name for this Object. Should be unique if possible.\n            identifiers: A list of :class:`Identifier` that uniquely identify the Object. If none are present than\n                the name must be unique and is used for identification. All Objects with the same adapter kind and Object\n                kind must have the same set of identifiers.\n        \"\"\"\n        self.adapter_kind = adapter_kind\n        self.object_kind = object_kind\n        self.name = name\n        if identifiers is None:\n            identifiers = []\n        self.identifiers = {identifier.key: identifier for identifier in identifiers}\n\n    def __repr__(self) -&gt; str:\n        return f\"{self.adapter_kind}:{self.object_kind}:{self.identifiers}\"\n\n    def __key(self) -&gt; tuple:\n        # Sort all identifiers by 'key' that are part of uniqueness\n        unique_identifiers = sorted(\n            filter(lambda id_: id_.is_part_of_uniqueness, self.identifiers.values()),\n            key=lambda id_: id_.key,\n        )\n        if len(unique_identifiers) == 0:\n            # If there are no identifiers, or if all identifiers are not part of uniqueness, the name is used as\n            # uniquely identifying\n            return self.adapter_kind, self.object_kind, self.name\n        else:\n            # Otherwise, if there is at least one identifier that is part of uniqueness, name is not used for\n            # identification. Add each of the unique identifiers to the tuple, sorted by key\n            return (self.adapter_kind, self.object_kind) + tuple(unique_identifiers)\n\n    def __eq__(self, other: Any) -&gt; bool:\n        if isinstance(other, Key):\n            # TODO: raise exception if the object types are the same but identifier keys don't match?\n            return self.__key() == other.__key()\n        else:\n            return False\n\n    def __hash__(self) -&gt; int:\n        return hash(self.__key())\n\n    def get_identifier(\n        self, key: str, default_value: Optional[str] = None\n    ) -&gt; Optional[str]:\n        \"\"\"Return the value for the given identifier key.\n\n        Args:\n            key: The identifier key.\n            default_value: An optional default value.\n\n        Returns:\n            The value associated with the identifier.\n            If the value associated with the identifier is empty and 'default_value' is\n            provided, returns 'default_value'.\n            If the identifier does not exist, returns default_value if provided, else 'None'.\n        \"\"\"\n        if self.identifiers.get(key):\n            if self.identifiers[key].value or default_value is None:\n                return self.identifiers[key].value\n            return default_value\n        return default_value\n\n    def get_json(self) -&gt; dict:\n        \"\"\"Get a JSON representation of this Key.\n\n        This method returns a JSON representation of this Key in the format required by vROps.\n\n        Returns:\n            dict: A JSON representation of this Key.\n        \"\"\"\n        return {\n            \"name\": self.name,\n            \"adapterKind\": self.adapter_kind,\n            \"objectKind\": self.object_kind,\n            \"identifiers\": [\n                identifier.get_json() for identifier in self.identifiers.values()\n            ],\n        }\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Key.__init__","title":"<code>__init__(adapter_kind, object_kind, name, identifiers=None)</code>","text":"<p>Initializes a Key, which uniquely identifies a vROps Object.</p> <p>Parameters:</p> Name Type Description Default <code>adapter_kind</code> <code>str</code> <p>The Adapter Kind this Object is associated with.</p> required <code>object_kind</code> <code>str</code> <p>The Object Kind (e.g., class) of this Object.</p> required <code>name</code> <code>str</code> <p>A human-readable name for this Object. Should be unique if possible.</p> required <code>identifiers</code> <code>Optional[List[Identifier]]</code> <p>A list of :class:<code>Identifier</code> that uniquely identify the Object. If none are present than the name must be unique and is used for identification. All Objects with the same adapter kind and Object kind must have the same set of identifiers.</p> <code>None</code> Source code in <code>aria/ops/object.py</code> <pre><code>def __init__(\n    self,\n    adapter_kind: str,\n    object_kind: str,\n    name: str,\n    identifiers: Optional[List[Identifier]] = None,\n) -&gt; None:\n    \"\"\"Initializes a Key, which uniquely identifies a vROps Object.\n\n    Args:\n        adapter_kind: The Adapter Kind this Object is associated with.\n        object_kind: The Object Kind (e.g., class) of this Object.\n        name: A human-readable name for this Object. Should be unique if possible.\n        identifiers: A list of :class:`Identifier` that uniquely identify the Object. If none are present than\n            the name must be unique and is used for identification. All Objects with the same adapter kind and Object\n            kind must have the same set of identifiers.\n    \"\"\"\n    self.adapter_kind = adapter_kind\n    self.object_kind = object_kind\n    self.name = name\n    if identifiers is None:\n        identifiers = []\n    self.identifiers = {identifier.key: identifier for identifier in identifiers}\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Key.get_identifier","title":"<code>get_identifier(key, default_value=None)</code>","text":"<p>Return the value for the given identifier key.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The identifier key.</p> required <code>default_value</code> <code>Optional[str]</code> <p>An optional default value.</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The value associated with the identifier.</p> <code>Optional[str]</code> <p>If the value associated with the identifier is empty and 'default_value' is</p> <code>Optional[str]</code> <p>provided, returns 'default_value'.</p> <code>Optional[str]</code> <p>If the identifier does not exist, returns default_value if provided, else 'None'.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_identifier(\n    self, key: str, default_value: Optional[str] = None\n) -&gt; Optional[str]:\n    \"\"\"Return the value for the given identifier key.\n\n    Args:\n        key: The identifier key.\n        default_value: An optional default value.\n\n    Returns:\n        The value associated with the identifier.\n        If the value associated with the identifier is empty and 'default_value' is\n        provided, returns 'default_value'.\n        If the identifier does not exist, returns default_value if provided, else 'None'.\n    \"\"\"\n    if self.identifiers.get(key):\n        if self.identifiers[key].value or default_value is None:\n            return self.identifiers[key].value\n        return default_value\n    return default_value\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Key.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Key.</p> <p>This method returns a JSON representation of this Key in the format required by vROps.</p> <p>Returns:</p> Name Type Description <code>dict</code> <code>dict</code> <p>A JSON representation of this Key.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"Get a JSON representation of this Key.\n\n    This method returns a JSON representation of this Key in the format required by vROps.\n\n    Returns:\n        dict: A JSON representation of this Key.\n    \"\"\"\n    return {\n        \"name\": self.name,\n        \"adapterKind\": self.adapter_kind,\n        \"objectKind\": self.object_kind,\n        \"identifiers\": [\n            identifier.get_json() for identifier in self.identifiers.values()\n        ],\n    }\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object","title":"<code>Object</code>","text":"<p>Represents an Object (resource) in vROps.</p> <p>Contains :class:<code>Metric</code>, :class:<code>Property</code>, :class:<code>Event</code>, and relationships to other Objects. Each Object is identified by a unique :class:<code>Key</code>.</p> Source code in <code>aria/ops/object.py</code> <pre><code>class Object:\n    \"\"\"Represents an Object (resource) in vROps.\n\n    Contains :class:`Metric`, :class:`Property`, :class:`Event`, and relationships to other Objects. Each Object is\n    identified by a unique :class:`Key`.\n    \"\"\"\n\n    def __init__(self, key: Key) -&gt; None:\n        \"\"\"Create a new Object with a given Key.\n\n        This method is the preferred way to create a new Object. It should be called from the :class:`Result.object`\n        method on the :class:`Result` class, which ensures that for a given key only one Object exists.\n\n        Args:\n            key: The :class:`Key` that uniquely identifies this Object.\n        \"\"\"\n\n        self._key: Key = key\n        self._metrics: List[Metric] = []\n        self._properties: List[Property] = []\n        self._events: Set[Event] = set()\n        self._parents: Set[Key] = set()\n        self._children: Set[Key] = set()\n        self._updated_children: bool = False\n\n    def get_key(self) -&gt; Key:\n        \"\"\"Get a copy of the Object's Key.\n\n        An object's Key cannot change after it has been created.\n\n        Returns:\n            A copy of the object's key.\n        \"\"\"\n        return copy.deepcopy(self._key)\n\n    def adapter_type(self) -&gt; str:\n        \"\"\"Get the adapter type of this object\n\n        Returns:\n             The adapter type of this object\n        \"\"\"\n        return self._key.adapter_kind\n\n    def object_type(self) -&gt; str:\n        \"\"\"Get the type of this object\n\n        Returns:\n             The type of this object\n        \"\"\"\n        return self._key.object_kind\n\n    def get_identifier_value(\n        self, identifier_key: str, default_value: Optional[str] = None\n    ) -&gt; Optional[str]:\n        \"\"\"Retrieve the value of a given identifier\n\n        Args:\n            identifier_key (str): Key of the identifier\n            default_value (str): An optional default value\n\n        Returns:\n            The value associated with the identifier.\n            If the value associated with the identifier is empty and 'default_value' is\n            provided, returns 'default_value'.\n            If the identifier does not exist, returns default_value if provided, else 'None'.\n        \"\"\"\n        return self._key.get_identifier(identifier_key, default_value)\n\n    def add_metric(self, metric: Metric) -&gt; None:\n        \"\"\"Adds a single Metric data point to this Object.\n\n        Args:\n            metric (Metric): A Metric data point to add to this Object.\n        \"\"\"\n        self._metrics.append(metric)\n\n    def add_metrics(self, metrics: List[Metric]) -&gt; None:\n        \"\"\"Adds a list of Metric data points to this Object.\n\n        Args:\n            metrics (List[Metric]): A list of Metric data points to add to this Object.\n        \"\"\"\n        for metric in metrics:\n            self.add_metric(metric)\n\n    def with_metric(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Method that handles creating a :class:`Metric` data point, and adding to this Object.\n\n        The signature matches :class:`Metric.__init__`.\n        \"\"\"\n        self.add_metric(Metric(*args, **kwargs))\n\n    def get_metric(self, key: str) -&gt; List[Metric]:\n        \"\"\"\n\n        Args:\n         key (str): Metric key of the metric to return.\n\n        Returns:\n            All metrics matching the given key.\n        \"\"\"\n        return list(filter(lambda metric: metric.key == key, self._metrics))\n\n    def get_metric_values(self, key: str) -&gt; List[float]:\n        \"\"\"\n\n        Args:\n            key (str): Metric key of the metric to return.\n\n        Returns (List[float]): A list of the metric values in chronological order.\n        \"\"\"\n        # find matching metrics\n        metrics = self.get_metric(key)\n\n        # sort metrics by timestamp from oldest  to newest\n        metrics.sort(key=lambda metric: metric.timestamp)  # type: ignore\n\n        return [m.value for m in metrics]\n\n    def get_last_metric_value(self, key: str) -&gt; Optional[float]:\n        \"\"\"\n\n        Args:\n            key (str) : Metric key of the metric to return.\n\n        Returns:\n            The latest value of the metric or None if no metric exists with the given key.\n        \"\"\"\n        metrics = self.get_metric_values(key)\n\n        if not metrics:\n            return None\n        else:\n            return metrics[-1]\n\n    def add_property(self, property_: Property) -&gt; None:\n        \"\"\"Method that adds a single Property value to this Object\n\n        Args:\n            property_ (Property): A :class:`Property` value to add to this Object\n        \"\"\"\n        self._properties.append(property_)\n\n    def add_properties(self, properties: List[Property]) -&gt; None:\n        \"\"\"Method that adds a list of Property values to this Object\n\n        Args:\n            properties (List[Property]): A list of :class:`Property` values to add to this Object\n        \"\"\"\n        for property_ in properties:\n            self.add_property(property_)\n\n    def with_property(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Method that handles creating a :class:`Property` value, and adding to this Object.\n\n        The signature matches :class:`Property.__init__`.\n        \"\"\"\n        self.add_property(Property(*args, **kwargs))\n\n    def get_property(self, key: str) -&gt; List[Property]:\n        \"\"\"\n\n        Args:\n            key (str): Property key of the property to return.\n\n        Returns:\n             All properties matching the given key\n        \"\"\"\n        return list(filter(lambda property_: property_.key == key, self._properties))\n\n    def get_property_values(self, key: str) -&gt; List[str]:\n        \"\"\"\n\n        Args:\n            key (str): Property key of the property to return.\n\n        Returns:\n            A list of the property values in chronological order.\n        \"\"\"\n        # find matching properties\n        properties = self.get_property(key)\n\n        # sort properties by timestamp from oldest  to newest\n        properties.sort(key=lambda property_: property_.timestamp)  # type: ignore\n\n        return [p.value for p in properties]\n\n    def get_last_property_value(self, key: str) -&gt; Optional[str | float]:\n        \"\"\"\n\n        Args:\n            key (str): Property key of the property to return.\n\n        Returns:\n             The latest value of the property or None if no property exists with the given key.\n        \"\"\"\n        properties = self.get_property_values(key)\n\n        if not properties:\n            return None\n        else:\n            return properties[-1]\n\n    def add_event(self, event: Event) -&gt; None:\n        \"\"\"Method that adds a single Event to this Object\n\n        Args:\n            event: An :class:`Event` to add to this Object\n        \"\"\"\n        self._events.add(event)\n\n    def add_events(self, events: List[Event]) -&gt; None:\n        \"\"\"Method that adds a list of Events to this Object\n\n        Args:\n            events (List[Event]): A list of :class:`Event` to add to this Object\n        \"\"\"\n        for event in events:\n            self.add_event(event)\n\n    def with_event(self, *args: Any, **kwargs: Any) -&gt; None:\n        \"\"\"Method that handles creating an :class:`Event`, and adding to this Object.\n\n        The signature matches :class:`Event.__init__`.\n        \"\"\"\n        self.add_event(Event(*args, **kwargs))\n\n    def add_parent(self, parent: Object) -&gt; None:\n        \"\"\"Method that adds a parent Object to this Object.\n\n        This Object will also be added as a child to the parent.\n\n        Relationship cycles are not permitted.\n\n        Args:\n            parent (Object): Parent :class:`Object`\n        \"\"\"\n        self._parents.add(parent._key)\n        parent._children.add(self._key)\n\n    def add_parents(self, parents: List[Object]) -&gt; None:\n        \"\"\"Method that adds a list of parent Objects to this Object.\n\n        This Object will also be added as a child to each of the parents.\n\n        Relationship cycles are not permitted.\n\n        Args:\n            parents (List[Object]): A list of parent :class:`Object`\n        \"\"\"\n        for parent in parents:\n            self.add_parent(parent)\n\n    def get_parents(self) -&gt; Set[Key]:\n        \"\"\"\n        Returns:\n         A set of all object keys that are parents of this object\n        \"\"\"\n        return self._parents\n\n    def add_child(self, child: Object) -&gt; None:\n        \"\"\"Method that adds a child Object to this Object.\n\n        This Object will also be added as a parent to the child.\n\n        Relationship cycles are not permitted.\n\n        Args:\n            child (Object): Child :class:`Object`\n        \"\"\"\n        self._updated_children = True\n        self._children.add(child._key)\n        child._parents.add(self._key)\n\n    def add_children(self, children: List[Object]) -&gt; None:\n        \"\"\"Method that adds a list of child Objects to this Object.\n\n        This Object will also be added as a parent to each of the children.\n\n        Relationship cycles are not permitted.\n\n        Args:\n            children (List[Object]): A list of child :class:`Object`\n        \"\"\"\n        # We want to set this even in the case where the list is empty\n        self._updated_children = True\n        for child in children:\n            self.add_child(child)\n\n    def get_children(self) -&gt; Set[Key]:\n        \"\"\"\n        Returns:\n            A set of all object keys that are children of this object\n        \"\"\"\n        return self._children\n\n    def has_content(self) -&gt; bool:\n        \"\"\"\n        Returns:\n             True if the object contains any metrics, properties or events; False otherwise.\n        \"\"\"\n        return bool(self._metrics) or bool(self._properties) or bool(self._events)\n\n    def get_json(self) -&gt; dict:\n        \"\"\"Get a JSON representation of this Object\n\n        Returns a JSON representation of this Object in the format required by vROps.\n\n        Returns:\n             A JSON representation of this Object\n        \"\"\"\n        return {\n            \"key\": self._key.get_json(),\n            \"metrics\": [metric.get_json() for metric in self._metrics],\n            \"properties\": [prop.get_json() for prop in self._properties],\n            \"events\": [event.get_json() for event in self._events],\n        }\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.__init__","title":"<code>__init__(key)</code>","text":"<p>Create a new Object with a given Key.</p> <p>This method is the preferred way to create a new Object. It should be called from the :class:<code>Result.object</code> method on the :class:<code>Result</code> class, which ensures that for a given key only one Object exists.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>Key</code> <p>The :class:<code>Key</code> that uniquely identifies this Object.</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def __init__(self, key: Key) -&gt; None:\n    \"\"\"Create a new Object with a given Key.\n\n    This method is the preferred way to create a new Object. It should be called from the :class:`Result.object`\n    method on the :class:`Result` class, which ensures that for a given key only one Object exists.\n\n    Args:\n        key: The :class:`Key` that uniquely identifies this Object.\n    \"\"\"\n\n    self._key: Key = key\n    self._metrics: List[Metric] = []\n    self._properties: List[Property] = []\n    self._events: Set[Event] = set()\n    self._parents: Set[Key] = set()\n    self._children: Set[Key] = set()\n    self._updated_children: bool = False\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.adapter_type","title":"<code>adapter_type()</code>","text":"<p>Get the adapter type of this object</p> <p>Returns:</p> Type Description <code>str</code> <p>The adapter type of this object</p> Source code in <code>aria/ops/object.py</code> <pre><code>def adapter_type(self) -&gt; str:\n    \"\"\"Get the adapter type of this object\n\n    Returns:\n         The adapter type of this object\n    \"\"\"\n    return self._key.adapter_kind\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_child","title":"<code>add_child(child)</code>","text":"<p>Method that adds a child Object to this Object.</p> <p>This Object will also be added as a parent to the child.</p> <p>Relationship cycles are not permitted.</p> <p>Parameters:</p> Name Type Description Default <code>child</code> <code>Object</code> <p>Child :class:<code>Object</code></p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_child(self, child: Object) -&gt; None:\n    \"\"\"Method that adds a child Object to this Object.\n\n    This Object will also be added as a parent to the child.\n\n    Relationship cycles are not permitted.\n\n    Args:\n        child (Object): Child :class:`Object`\n    \"\"\"\n    self._updated_children = True\n    self._children.add(child._key)\n    child._parents.add(self._key)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_children","title":"<code>add_children(children)</code>","text":"<p>Method that adds a list of child Objects to this Object.</p> <p>This Object will also be added as a parent to each of the children.</p> <p>Relationship cycles are not permitted.</p> <p>Parameters:</p> Name Type Description Default <code>children</code> <code>List[Object]</code> <p>A list of child :class:<code>Object</code></p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_children(self, children: List[Object]) -&gt; None:\n    \"\"\"Method that adds a list of child Objects to this Object.\n\n    This Object will also be added as a parent to each of the children.\n\n    Relationship cycles are not permitted.\n\n    Args:\n        children (List[Object]): A list of child :class:`Object`\n    \"\"\"\n    # We want to set this even in the case where the list is empty\n    self._updated_children = True\n    for child in children:\n        self.add_child(child)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_event","title":"<code>add_event(event)</code>","text":"<p>Method that adds a single Event to this Object</p> <p>Parameters:</p> Name Type Description Default <code>event</code> <code>Event</code> <p>An :class:<code>Event</code> to add to this Object</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_event(self, event: Event) -&gt; None:\n    \"\"\"Method that adds a single Event to this Object\n\n    Args:\n        event: An :class:`Event` to add to this Object\n    \"\"\"\n    self._events.add(event)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_events","title":"<code>add_events(events)</code>","text":"<p>Method that adds a list of Events to this Object</p> <p>Parameters:</p> Name Type Description Default <code>events</code> <code>List[Event]</code> <p>A list of :class:<code>Event</code> to add to this Object</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_events(self, events: List[Event]) -&gt; None:\n    \"\"\"Method that adds a list of Events to this Object\n\n    Args:\n        events (List[Event]): A list of :class:`Event` to add to this Object\n    \"\"\"\n    for event in events:\n        self.add_event(event)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_metric","title":"<code>add_metric(metric)</code>","text":"<p>Adds a single Metric data point to this Object.</p> <p>Parameters:</p> Name Type Description Default <code>metric</code> <code>Metric</code> <p>A Metric data point to add to this Object.</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_metric(self, metric: Metric) -&gt; None:\n    \"\"\"Adds a single Metric data point to this Object.\n\n    Args:\n        metric (Metric): A Metric data point to add to this Object.\n    \"\"\"\n    self._metrics.append(metric)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_metrics","title":"<code>add_metrics(metrics)</code>","text":"<p>Adds a list of Metric data points to this Object.</p> <p>Parameters:</p> Name Type Description Default <code>metrics</code> <code>List[Metric]</code> <p>A list of Metric data points to add to this Object.</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_metrics(self, metrics: List[Metric]) -&gt; None:\n    \"\"\"Adds a list of Metric data points to this Object.\n\n    Args:\n        metrics (List[Metric]): A list of Metric data points to add to this Object.\n    \"\"\"\n    for metric in metrics:\n        self.add_metric(metric)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_parent","title":"<code>add_parent(parent)</code>","text":"<p>Method that adds a parent Object to this Object.</p> <p>This Object will also be added as a child to the parent.</p> <p>Relationship cycles are not permitted.</p> <p>Parameters:</p> Name Type Description Default <code>parent</code> <code>Object</code> <p>Parent :class:<code>Object</code></p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_parent(self, parent: Object) -&gt; None:\n    \"\"\"Method that adds a parent Object to this Object.\n\n    This Object will also be added as a child to the parent.\n\n    Relationship cycles are not permitted.\n\n    Args:\n        parent (Object): Parent :class:`Object`\n    \"\"\"\n    self._parents.add(parent._key)\n    parent._children.add(self._key)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_parents","title":"<code>add_parents(parents)</code>","text":"<p>Method that adds a list of parent Objects to this Object.</p> <p>This Object will also be added as a child to each of the parents.</p> <p>Relationship cycles are not permitted.</p> <p>Parameters:</p> Name Type Description Default <code>parents</code> <code>List[Object]</code> <p>A list of parent :class:<code>Object</code></p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_parents(self, parents: List[Object]) -&gt; None:\n    \"\"\"Method that adds a list of parent Objects to this Object.\n\n    This Object will also be added as a child to each of the parents.\n\n    Relationship cycles are not permitted.\n\n    Args:\n        parents (List[Object]): A list of parent :class:`Object`\n    \"\"\"\n    for parent in parents:\n        self.add_parent(parent)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_properties","title":"<code>add_properties(properties)</code>","text":"<p>Method that adds a list of Property values to this Object</p> <p>Parameters:</p> Name Type Description Default <code>properties</code> <code>List[Property]</code> <p>A list of :class:<code>Property</code> values to add to this Object</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_properties(self, properties: List[Property]) -&gt; None:\n    \"\"\"Method that adds a list of Property values to this Object\n\n    Args:\n        properties (List[Property]): A list of :class:`Property` values to add to this Object\n    \"\"\"\n    for property_ in properties:\n        self.add_property(property_)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.add_property","title":"<code>add_property(property_)</code>","text":"<p>Method that adds a single Property value to this Object</p> <p>Parameters:</p> Name Type Description Default <code>property_</code> <code>Property</code> <p>A :class:<code>Property</code> value to add to this Object</p> required Source code in <code>aria/ops/object.py</code> <pre><code>def add_property(self, property_: Property) -&gt; None:\n    \"\"\"Method that adds a single Property value to this Object\n\n    Args:\n        property_ (Property): A :class:`Property` value to add to this Object\n    \"\"\"\n    self._properties.append(property_)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_children","title":"<code>get_children()</code>","text":"<p>Returns:</p> Type Description <code>Set[Key]</code> <p>A set of all object keys that are children of this object</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_children(self) -&gt; Set[Key]:\n    \"\"\"\n    Returns:\n        A set of all object keys that are children of this object\n    \"\"\"\n    return self._children\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_identifier_value","title":"<code>get_identifier_value(identifier_key, default_value=None)</code>","text":"<p>Retrieve the value of a given identifier</p> <p>Parameters:</p> Name Type Description Default <code>identifier_key</code> <code>str</code> <p>Key of the identifier</p> required <code>default_value</code> <code>str</code> <p>An optional default value</p> <code>None</code> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>The value associated with the identifier.</p> <code>Optional[str]</code> <p>If the value associated with the identifier is empty and 'default_value' is</p> <code>Optional[str]</code> <p>provided, returns 'default_value'.</p> <code>Optional[str]</code> <p>If the identifier does not exist, returns default_value if provided, else 'None'.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_identifier_value(\n    self, identifier_key: str, default_value: Optional[str] = None\n) -&gt; Optional[str]:\n    \"\"\"Retrieve the value of a given identifier\n\n    Args:\n        identifier_key (str): Key of the identifier\n        default_value (str): An optional default value\n\n    Returns:\n        The value associated with the identifier.\n        If the value associated with the identifier is empty and 'default_value' is\n        provided, returns 'default_value'.\n        If the identifier does not exist, returns default_value if provided, else 'None'.\n    \"\"\"\n    return self._key.get_identifier(identifier_key, default_value)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Object</p> <p>Returns a JSON representation of this Object in the format required by vROps.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A JSON representation of this Object</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"Get a JSON representation of this Object\n\n    Returns a JSON representation of this Object in the format required by vROps.\n\n    Returns:\n         A JSON representation of this Object\n    \"\"\"\n    return {\n        \"key\": self._key.get_json(),\n        \"metrics\": [metric.get_json() for metric in self._metrics],\n        \"properties\": [prop.get_json() for prop in self._properties],\n        \"events\": [event.get_json() for event in self._events],\n    }\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_key","title":"<code>get_key()</code>","text":"<p>Get a copy of the Object's Key.</p> <p>An object's Key cannot change after it has been created.</p> <p>Returns:</p> Type Description <code>Key</code> <p>A copy of the object's key.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_key(self) -&gt; Key:\n    \"\"\"Get a copy of the Object's Key.\n\n    An object's Key cannot change after it has been created.\n\n    Returns:\n        A copy of the object's key.\n    \"\"\"\n    return copy.deepcopy(self._key)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_last_metric_value","title":"<code>get_last_metric_value(key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str) </code> <p>Metric key of the metric to return.</p> required <p>Returns:</p> Type Description <code>Optional[float]</code> <p>The latest value of the metric or None if no metric exists with the given key.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_last_metric_value(self, key: str) -&gt; Optional[float]:\n    \"\"\"\n\n    Args:\n        key (str) : Metric key of the metric to return.\n\n    Returns:\n        The latest value of the metric or None if no metric exists with the given key.\n    \"\"\"\n    metrics = self.get_metric_values(key)\n\n    if not metrics:\n        return None\n    else:\n        return metrics[-1]\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_last_property_value","title":"<code>get_last_property_value(key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Property key of the property to return.</p> required <p>Returns:</p> Type Description <code>Optional[str | float]</code> <p>The latest value of the property or None if no property exists with the given key.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_last_property_value(self, key: str) -&gt; Optional[str | float]:\n    \"\"\"\n\n    Args:\n        key (str): Property key of the property to return.\n\n    Returns:\n         The latest value of the property or None if no property exists with the given key.\n    \"\"\"\n    properties = self.get_property_values(key)\n\n    if not properties:\n        return None\n    else:\n        return properties[-1]\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_metric","title":"<code>get_metric(key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Metric key of the metric to return.</p> required <p>Returns:</p> Type Description <code>List[Metric]</code> <p>All metrics matching the given key.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_metric(self, key: str) -&gt; List[Metric]:\n    \"\"\"\n\n    Args:\n     key (str): Metric key of the metric to return.\n\n    Returns:\n        All metrics matching the given key.\n    \"\"\"\n    return list(filter(lambda metric: metric.key == key, self._metrics))\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_metric_values","title":"<code>get_metric_values(key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Metric key of the metric to return.</p> required <p>Returns (List[float]): A list of the metric values in chronological order.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_metric_values(self, key: str) -&gt; List[float]:\n    \"\"\"\n\n    Args:\n        key (str): Metric key of the metric to return.\n\n    Returns (List[float]): A list of the metric values in chronological order.\n    \"\"\"\n    # find matching metrics\n    metrics = self.get_metric(key)\n\n    # sort metrics by timestamp from oldest  to newest\n    metrics.sort(key=lambda metric: metric.timestamp)  # type: ignore\n\n    return [m.value for m in metrics]\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_parents","title":"<code>get_parents()</code>","text":"<p>Returns:</p> Type Description <code>Set[Key]</code> <p>A set of all object keys that are parents of this object</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_parents(self) -&gt; Set[Key]:\n    \"\"\"\n    Returns:\n     A set of all object keys that are parents of this object\n    \"\"\"\n    return self._parents\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_property","title":"<code>get_property(key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Property key of the property to return.</p> required <p>Returns:</p> Type Description <code>List[Property]</code> <p>All properties matching the given key</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_property(self, key: str) -&gt; List[Property]:\n    \"\"\"\n\n    Args:\n        key (str): Property key of the property to return.\n\n    Returns:\n         All properties matching the given key\n    \"\"\"\n    return list(filter(lambda property_: property_.key == key, self._properties))\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.get_property_values","title":"<code>get_property_values(key)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Property key of the property to return.</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>A list of the property values in chronological order.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def get_property_values(self, key: str) -&gt; List[str]:\n    \"\"\"\n\n    Args:\n        key (str): Property key of the property to return.\n\n    Returns:\n        A list of the property values in chronological order.\n    \"\"\"\n    # find matching properties\n    properties = self.get_property(key)\n\n    # sort properties by timestamp from oldest  to newest\n    properties.sort(key=lambda property_: property_.timestamp)  # type: ignore\n\n    return [p.value for p in properties]\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.has_content","title":"<code>has_content()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>True if the object contains any metrics, properties or events; False otherwise.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def has_content(self) -&gt; bool:\n    \"\"\"\n    Returns:\n         True if the object contains any metrics, properties or events; False otherwise.\n    \"\"\"\n    return bool(self._metrics) or bool(self._properties) or bool(self._events)\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.object_type","title":"<code>object_type()</code>","text":"<p>Get the type of this object</p> <p>Returns:</p> Type Description <code>str</code> <p>The type of this object</p> Source code in <code>aria/ops/object.py</code> <pre><code>def object_type(self) -&gt; str:\n    \"\"\"Get the type of this object\n\n    Returns:\n         The type of this object\n    \"\"\"\n    return self._key.object_kind\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.with_event","title":"<code>with_event(*args, **kwargs)</code>","text":"<p>Method that handles creating an :class:<code>Event</code>, and adding to this Object.</p> <p>The signature matches :class:<code>Event.__init__</code>.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def with_event(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Method that handles creating an :class:`Event`, and adding to this Object.\n\n    The signature matches :class:`Event.__init__`.\n    \"\"\"\n    self.add_event(Event(*args, **kwargs))\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.with_metric","title":"<code>with_metric(*args, **kwargs)</code>","text":"<p>Method that handles creating a :class:<code>Metric</code> data point, and adding to this Object.</p> <p>The signature matches :class:<code>Metric.__init__</code>.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def with_metric(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Method that handles creating a :class:`Metric` data point, and adding to this Object.\n\n    The signature matches :class:`Metric.__init__`.\n    \"\"\"\n    self.add_metric(Metric(*args, **kwargs))\n</code></pre>"},{"location":"references/python-lib/object/#aria.ops.object.Object.with_property","title":"<code>with_property(*args, **kwargs)</code>","text":"<p>Method that handles creating a :class:<code>Property</code> value, and adding to this Object.</p> <p>The signature matches :class:<code>Property.__init__</code>.</p> Source code in <code>aria/ops/object.py</code> <pre><code>def with_property(self, *args: Any, **kwargs: Any) -&gt; None:\n    \"\"\"Method that handles creating a :class:`Property` value, and adding to this Object.\n\n    The signature matches :class:`Property.__init__`.\n    \"\"\"\n    self.add_property(Property(*args, **kwargs))\n</code></pre>"},{"location":"references/python-lib/pipe_utils/","title":"Pipe utils","text":""},{"location":"references/python-lib/pipe_utils/#aria.ops.pipe_utils.read_from_pipe","title":"<code>read_from_pipe(input_pipe)</code>","text":"<p>Reads data from the input pipe.</p> <p>Parameters:</p> Name Type Description Default <code>input_pipe</code> <code>str</code> <p>The path to the input pipe.</p> required <p>Returns:</p> Type Description <code>Optional[Union[dict, list]]</code> <p>Optional[Union[dict, list]]: The data read from the input pipe, or None if there was an error.</p> Source code in <code>aria/ops/pipe_utils.py</code> <pre><code>def read_from_pipe(input_pipe: str) -&gt; Optional[Union[dict, list]]:\n    \"\"\"Reads data from the input pipe.\n\n    Args:\n        input_pipe (str): The path to the input pipe.\n\n    Returns:\n        Optional[Union[dict, list]]: The data read from the input pipe, or None if there was an error.\n    \"\"\"\n    logger.debug(f\"Input Pipe: {input_pipe}\")\n    try:\n        with open(input_pipe, \"r\") as input_file:\n            logger.debug(f\"Opened {input_file.name}\")\n            return json.load(input_file)  # type: ignore[no-any-return]\n    except Exception as e:\n        logger.error(\"Error when reading from Input Pipe.\")\n        logger.debug(e)\n        return None\n</code></pre>"},{"location":"references/python-lib/pipe_utils/#aria.ops.pipe_utils.write_to_pipe","title":"<code>write_to_pipe(output_pipe, result)</code>","text":"<p>Writes data to the output pipe.</p> <p>Parameters:</p> Name Type Description Default <code>output_pipe</code> <code>str</code> <p>The path to the output pipe.</p> required <code>result</code> <code>Optional[Union[dict, list]]</code> <p>The data to write to the output pipe.</p> required Source code in <code>aria/ops/pipe_utils.py</code> <pre><code>def write_to_pipe(output_pipe: str, result: Optional[Union[dict, list]]) -&gt; None:\n    \"\"\"Writes data to the output pipe.\n\n    Args:\n        output_pipe (str): The path to the output pipe.\n        result (Optional[Union[dict, list]]): The data to write to the output pipe.\n    \"\"\"\n    logger.debug(repr(result))\n    logger.debug(f\"Output Pipe: {output_pipe}\")\n    try:\n        with open(output_pipe, \"w\") as output_file:\n            logger.debug(f\"Opened {output_pipe}\")\n            json.dump(result, output_file)\n            logger.debug(f\"Closing {output_pipe}\")\n    except Exception as e:\n        logger.error(\"Error when writing to Output Pipe.\")\n        logger.debug(e)\n    logger.debug(\"Finished writing results to Output Pipe.\")\n</code></pre>"},{"location":"references/python-lib/result/","title":"Result","text":""},{"location":"references/python-lib/result/#aria.ops.result.CollectResult","title":"<code>CollectResult</code>","text":"<p>Class for managing a collection of Aria Operations Objects</p> Source code in <code>aria/ops/result.py</code> <pre><code>class CollectResult:\n    \"\"\"Class for managing a collection of Aria Operations Objects\"\"\"\n\n    def __init__(\n        self,\n        obj_list: Optional[list[Object]] = None,\n        target_definition: AdapterDefinition = None,\n    ) -&gt; None:\n        \"\"\"Initializes a Result\n\n        A result contains objects, which can be added at initialization or later.\n        Each object has a key containing one or more identifiers plus the object type\n        and adapter type. Keys must be unique across objects in a Result.\n\n        Args:\n            obj_list (Optional[List[Object]]): an optional list of objects to send to Aria Operations. Objects can be\n                added later using add_object. Defaults to None\n            target_definition (AdapterDefinition): an optional description of the returned objects, used for validation\n                purposes. Defaults to None.\n        \"\"\"\n        self.objects: dict[Key, Object] = {}\n        if type(obj_list) is list:\n            self.add_objects(obj_list)\n        self.definition: AdapterDefinition = target_definition\n        self.adapter_type = None\n        if self.definition:\n            self.adapter_type = self.definition.key\n        self._error_message: Optional[str] = None\n        self.update_relationships: RelationshipUpdateMode = RelationshipUpdateModes.AUTO\n\n    def _object_is_external(self, obj: Object) -&gt; bool:\n        return bool(self.adapter_type) and not obj.adapter_type() == self.adapter_type\n\n    def object(\n        self,\n        adapter_kind: str,\n        object_kind: str,\n        name: str,\n        identifiers: Optional[list[Identifier]] = None,\n    ) -&gt; Object:\n        \"\"\"Get or create the object with key specified by adapter_kind, object_kind,\n        name, and identifiers.\n\n        This is the preferred method for creating new Objects. If this method is used\n        exclusively, all object references with the same key will point to the same\n        object.\n\n        If an object with the same key already exists in the result, return that\n        object, otherwise create a new object, add it to the result, and return it.\n        See discussion on keys in the documentation for the :class:`object.Key` class.\n\n        If this method is used to create an object, it does not need to be added\n        later using `add_object` (or `add_objects`)\n\n        Args:\n            adapter_kind (str): The adapter kind of the object\n            object_kind (str): The resource kind of the object\n            name (str): The name of the object\n            identifiers (Optional[List[Identifier]]): An optional list of Identifiers for the object\n\n        Returns:\n             The object with the given key\n        \"\"\"\n        obj = Object(Key(adapter_kind, object_kind, name, identifiers))\n        return self.objects.setdefault(obj.get_key(), obj)\n\n    def get_object(self, obj_key: Key) -&gt; Optional[Object]:\n        \"\"\"Get and return the object corresponding to the given key, if it exists\n\n        Args:\n            obj_key (Key): The object key to search for\n\n        Returns:\n             The object with the given key, or None if the key is not in the result\n        \"\"\"\n        return self.objects.get(obj_key, None)\n\n    def get_objects_by_type(\n        self, object_type: str, adapter_type: Optional[str] = None\n    ) -&gt; List[Object]:\n        \"\"\"Returns all objects with the given type. If adapter_type is present,\n        the objects must also be from the given adapter type.\n\n        Args:\n            object_type (str): The object type to return\n            adapter_type (Optional[str]): The adapter type of the objects to return. Defaults to None\n\n        Returns:\n             A list of objects matching the object type and adapter type\n        \"\"\"\n        return [\n            obj\n            for obj in self.objects.values()\n            if obj.adapter_type() == object_type\n            and (adapter_type is None or adapter_type == obj.adapter_type())\n        ]\n\n    def add_object(self, obj: Object) -&gt; Object:\n        \"\"\"Adds the given object to the Result and returns it.\n\n        Adds the given object to the Result and returns it. A different object with\n        the same key cannot already exist in the Result. If it does,\n        an ObjectKeyAlreadyExistsException will be raised.\n\n        Args:\n            obj (Object): An object to add to the Result.\n\n        Returns:\n            Object: The object.\n\n        Raises:\n            ObjectKeyAlreadyExistsException: If a different object with the same key\n                already exists in the Result.\n        \"\"\"\n        o = self.objects.setdefault(obj.get_key(), obj)\n        if o is obj:\n            return o\n        raise ObjectKeyAlreadyExistsException(\n            f\"A different object with key {obj.get_key()} already exists.\"\n        )\n\n    def add_objects(self, obj_list: list[Object]) -&gt; None:\n        \"\"\"Adds the given objects to the Result and returns it.\n\n        Adds the given objects to the Result. A different object with the same key\n        cannot already exist in the Result. If it does, an\n        :class:`ObjectKeyAlreadyExistsException` will be raised.\n\n        Args:\n            obj_list (List[Object]): A list of objects to add to the Result\n\n        Returns:\n            The object\n\n        Raises:\n            ObjectKeyAlreadyExistsException: if a different object with the same\n                key already exists in the Result\n        \"\"\"\n        for obj in obj_list:\n            self.add_object(obj)\n\n    def with_error(self, error_message: str) -&gt; None:\n        \"\"\"Set the Adapter Instance to an error state with the provided message.\n\n        If this method is called multiple times, only the most recent error message\n        will be recorded. If error_message is set, no results (objects, relationships)\n        will be returned.\n\n        Args:\n            error_message (str): A string containing the error message\n        \"\"\"\n        self._error_message = error_message\n\n    def get_json(self) -&gt; dict:\n        \"\"\"Get a JSON representation of this Result\n\n        Returns a JSON representation of this Result in the format required by Aria\n        Operations. The representation includes all objects (including the object's\n        events, properties, and metrics) in the Result. Relationships are returned\n        following the update_relationships flag (See RelationshipUpdateMode).\n\n        Returns:\n            A JSON representation of this Result\n        \"\"\"\n        if self._error_message is None:\n            result = {\n                \"result\": [\n                    obj.get_json()\n                    for obj in self.objects.values()\n                    if not self._object_is_external(obj) or obj.has_content()\n                ],\n                \"relationships\": [],\n                \"nonExistingObjects\": [],\n            }\n            if (\n                self.update_relationships == RelationshipUpdateModes.ALL\n                or self.update_relationships == RelationshipUpdateModes.PER_OBJECT\n                or (\n                    self.update_relationships == RelationshipUpdateModes.AUTO\n                    and any([obj._updated_children for obj in self.objects.values()])\n                )\n            ):\n                result.update(\n                    {\n                        \"relationships\": [\n                            {\n                                \"parent\": obj.get_key().get_json(),\n                                \"children\": [\n                                    child_key.get_json()\n                                    for child_key in obj.get_children()\n                                ],\n                            }\n                            for obj in self.objects.values()\n                            if (\n                                self.update_relationships\n                                == RelationshipUpdateModes.PER_OBJECT\n                                and obj._updated_children\n                            )\n                            or not self.update_relationships\n                            == RelationshipUpdateModes.PER_OBJECT\n                        ],\n                    }\n                )\n            return result\n        else:\n            return {\"errorMessage\": self._error_message}\n\n    def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n        \"\"\"Opens the output pipe and sends results directly back to the server\n\n        This method can only be called once per collection.\n\n        Args:\n            output_pipe (str): The path to the input pipe. Defaults to sys.argv[-1]\n        \"\"\"\n        # The server always invokes methods with the output file as the last argument\n        write_to_pipe(output_pipe, self.get_json())\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.__init__","title":"<code>__init__(obj_list=None, target_definition=None)</code>","text":"<p>Initializes a Result</p> <p>A result contains objects, which can be added at initialization or later. Each object has a key containing one or more identifiers plus the object type and adapter type. Keys must be unique across objects in a Result.</p> <p>Parameters:</p> Name Type Description Default <code>obj_list</code> <code>Optional[List[Object]]</code> <p>an optional list of objects to send to Aria Operations. Objects can be added later using add_object. Defaults to None</p> <code>None</code> <code>target_definition</code> <code>AdapterDefinition</code> <p>an optional description of the returned objects, used for validation purposes. Defaults to None.</p> <code>None</code> Source code in <code>aria/ops/result.py</code> <pre><code>def __init__(\n    self,\n    obj_list: Optional[list[Object]] = None,\n    target_definition: AdapterDefinition = None,\n) -&gt; None:\n    \"\"\"Initializes a Result\n\n    A result contains objects, which can be added at initialization or later.\n    Each object has a key containing one or more identifiers plus the object type\n    and adapter type. Keys must be unique across objects in a Result.\n\n    Args:\n        obj_list (Optional[List[Object]]): an optional list of objects to send to Aria Operations. Objects can be\n            added later using add_object. Defaults to None\n        target_definition (AdapterDefinition): an optional description of the returned objects, used for validation\n            purposes. Defaults to None.\n    \"\"\"\n    self.objects: dict[Key, Object] = {}\n    if type(obj_list) is list:\n        self.add_objects(obj_list)\n    self.definition: AdapterDefinition = target_definition\n    self.adapter_type = None\n    if self.definition:\n        self.adapter_type = self.definition.key\n    self._error_message: Optional[str] = None\n    self.update_relationships: RelationshipUpdateMode = RelationshipUpdateModes.AUTO\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.add_object","title":"<code>add_object(obj)</code>","text":"<p>Adds the given object to the Result and returns it.</p> <p>Adds the given object to the Result and returns it. A different object with the same key cannot already exist in the Result. If it does, an ObjectKeyAlreadyExistsException will be raised.</p> <p>Parameters:</p> Name Type Description Default <code>obj</code> <code>Object</code> <p>An object to add to the Result.</p> required <p>Returns:</p> Name Type Description <code>Object</code> <code>Object</code> <p>The object.</p> <p>Raises:</p> Type Description <code>ObjectKeyAlreadyExistsException</code> <p>If a different object with the same key already exists in the Result.</p> Source code in <code>aria/ops/result.py</code> <pre><code>def add_object(self, obj: Object) -&gt; Object:\n    \"\"\"Adds the given object to the Result and returns it.\n\n    Adds the given object to the Result and returns it. A different object with\n    the same key cannot already exist in the Result. If it does,\n    an ObjectKeyAlreadyExistsException will be raised.\n\n    Args:\n        obj (Object): An object to add to the Result.\n\n    Returns:\n        Object: The object.\n\n    Raises:\n        ObjectKeyAlreadyExistsException: If a different object with the same key\n            already exists in the Result.\n    \"\"\"\n    o = self.objects.setdefault(obj.get_key(), obj)\n    if o is obj:\n        return o\n    raise ObjectKeyAlreadyExistsException(\n        f\"A different object with key {obj.get_key()} already exists.\"\n    )\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.add_objects","title":"<code>add_objects(obj_list)</code>","text":"<p>Adds the given objects to the Result and returns it.</p> <p>Adds the given objects to the Result. A different object with the same key cannot already exist in the Result. If it does, an :class:<code>ObjectKeyAlreadyExistsException</code> will be raised.</p> <p>Parameters:</p> Name Type Description Default <code>obj_list</code> <code>List[Object]</code> <p>A list of objects to add to the Result</p> required <p>Returns:</p> Type Description <code>None</code> <p>The object</p> <p>Raises:</p> Type Description <code>ObjectKeyAlreadyExistsException</code> <p>if a different object with the same key already exists in the Result</p> Source code in <code>aria/ops/result.py</code> <pre><code>def add_objects(self, obj_list: list[Object]) -&gt; None:\n    \"\"\"Adds the given objects to the Result and returns it.\n\n    Adds the given objects to the Result. A different object with the same key\n    cannot already exist in the Result. If it does, an\n    :class:`ObjectKeyAlreadyExistsException` will be raised.\n\n    Args:\n        obj_list (List[Object]): A list of objects to add to the Result\n\n    Returns:\n        The object\n\n    Raises:\n        ObjectKeyAlreadyExistsException: if a different object with the same\n            key already exists in the Result\n    \"\"\"\n    for obj in obj_list:\n        self.add_object(obj)\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this Result</p> <p>Returns a JSON representation of this Result in the format required by Aria Operations. The representation includes all objects (including the object's events, properties, and metrics) in the Result. Relationships are returned following the update_relationships flag (See RelationshipUpdateMode).</p> <p>Returns:</p> Type Description <code>dict</code> <p>A JSON representation of this Result</p> Source code in <code>aria/ops/result.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"Get a JSON representation of this Result\n\n    Returns a JSON representation of this Result in the format required by Aria\n    Operations. The representation includes all objects (including the object's\n    events, properties, and metrics) in the Result. Relationships are returned\n    following the update_relationships flag (See RelationshipUpdateMode).\n\n    Returns:\n        A JSON representation of this Result\n    \"\"\"\n    if self._error_message is None:\n        result = {\n            \"result\": [\n                obj.get_json()\n                for obj in self.objects.values()\n                if not self._object_is_external(obj) or obj.has_content()\n            ],\n            \"relationships\": [],\n            \"nonExistingObjects\": [],\n        }\n        if (\n            self.update_relationships == RelationshipUpdateModes.ALL\n            or self.update_relationships == RelationshipUpdateModes.PER_OBJECT\n            or (\n                self.update_relationships == RelationshipUpdateModes.AUTO\n                and any([obj._updated_children for obj in self.objects.values()])\n            )\n        ):\n            result.update(\n                {\n                    \"relationships\": [\n                        {\n                            \"parent\": obj.get_key().get_json(),\n                            \"children\": [\n                                child_key.get_json()\n                                for child_key in obj.get_children()\n                            ],\n                        }\n                        for obj in self.objects.values()\n                        if (\n                            self.update_relationships\n                            == RelationshipUpdateModes.PER_OBJECT\n                            and obj._updated_children\n                        )\n                        or not self.update_relationships\n                        == RelationshipUpdateModes.PER_OBJECT\n                    ],\n                }\n            )\n        return result\n    else:\n        return {\"errorMessage\": self._error_message}\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.get_object","title":"<code>get_object(obj_key)</code>","text":"<p>Get and return the object corresponding to the given key, if it exists</p> <p>Parameters:</p> Name Type Description Default <code>obj_key</code> <code>Key</code> <p>The object key to search for</p> required <p>Returns:</p> Type Description <code>Optional[Object]</code> <p>The object with the given key, or None if the key is not in the result</p> Source code in <code>aria/ops/result.py</code> <pre><code>def get_object(self, obj_key: Key) -&gt; Optional[Object]:\n    \"\"\"Get and return the object corresponding to the given key, if it exists\n\n    Args:\n        obj_key (Key): The object key to search for\n\n    Returns:\n         The object with the given key, or None if the key is not in the result\n    \"\"\"\n    return self.objects.get(obj_key, None)\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.get_objects_by_type","title":"<code>get_objects_by_type(object_type, adapter_type=None)</code>","text":"<p>Returns all objects with the given type. If adapter_type is present, the objects must also be from the given adapter type.</p> <p>Parameters:</p> Name Type Description Default <code>object_type</code> <code>str</code> <p>The object type to return</p> required <code>adapter_type</code> <code>Optional[str]</code> <p>The adapter type of the objects to return. Defaults to None</p> <code>None</code> <p>Returns:</p> Type Description <code>List[Object]</code> <p>A list of objects matching the object type and adapter type</p> Source code in <code>aria/ops/result.py</code> <pre><code>def get_objects_by_type(\n    self, object_type: str, adapter_type: Optional[str] = None\n) -&gt; List[Object]:\n    \"\"\"Returns all objects with the given type. If adapter_type is present,\n    the objects must also be from the given adapter type.\n\n    Args:\n        object_type (str): The object type to return\n        adapter_type (Optional[str]): The adapter type of the objects to return. Defaults to None\n\n    Returns:\n         A list of objects matching the object type and adapter type\n    \"\"\"\n    return [\n        obj\n        for obj in self.objects.values()\n        if obj.adapter_type() == object_type\n        and (adapter_type is None or adapter_type == obj.adapter_type())\n    ]\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.object","title":"<code>object(adapter_kind, object_kind, name, identifiers=None)</code>","text":"<p>Get or create the object with key specified by adapter_kind, object_kind, name, and identifiers.</p> <p>This is the preferred method for creating new Objects. If this method is used exclusively, all object references with the same key will point to the same object.</p> <p>If an object with the same key already exists in the result, return that object, otherwise create a new object, add it to the result, and return it. See discussion on keys in the documentation for the :class:<code>object.Key</code> class.</p> <p>If this method is used to create an object, it does not need to be added later using <code>add_object</code> (or <code>add_objects</code>)</p> <p>Parameters:</p> Name Type Description Default <code>adapter_kind</code> <code>str</code> <p>The adapter kind of the object</p> required <code>object_kind</code> <code>str</code> <p>The resource kind of the object</p> required <code>name</code> <code>str</code> <p>The name of the object</p> required <code>identifiers</code> <code>Optional[List[Identifier]]</code> <p>An optional list of Identifiers for the object</p> <code>None</code> <p>Returns:</p> Type Description <code>Object</code> <p>The object with the given key</p> Source code in <code>aria/ops/result.py</code> <pre><code>def object(\n    self,\n    adapter_kind: str,\n    object_kind: str,\n    name: str,\n    identifiers: Optional[list[Identifier]] = None,\n) -&gt; Object:\n    \"\"\"Get or create the object with key specified by adapter_kind, object_kind,\n    name, and identifiers.\n\n    This is the preferred method for creating new Objects. If this method is used\n    exclusively, all object references with the same key will point to the same\n    object.\n\n    If an object with the same key already exists in the result, return that\n    object, otherwise create a new object, add it to the result, and return it.\n    See discussion on keys in the documentation for the :class:`object.Key` class.\n\n    If this method is used to create an object, it does not need to be added\n    later using `add_object` (or `add_objects`)\n\n    Args:\n        adapter_kind (str): The adapter kind of the object\n        object_kind (str): The resource kind of the object\n        name (str): The name of the object\n        identifiers (Optional[List[Identifier]]): An optional list of Identifiers for the object\n\n    Returns:\n         The object with the given key\n    \"\"\"\n    obj = Object(Key(adapter_kind, object_kind, name, identifiers))\n    return self.objects.setdefault(obj.get_key(), obj)\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.send_results","title":"<code>send_results(output_pipe=sys.argv[-1])</code>","text":"<p>Opens the output pipe and sends results directly back to the server</p> <p>This method can only be called once per collection.</p> <p>Parameters:</p> Name Type Description Default <code>output_pipe</code> <code>str</code> <p>The path to the input pipe. Defaults to sys.argv[-1]</p> <code>argv[-1]</code> Source code in <code>aria/ops/result.py</code> <pre><code>def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n    \"\"\"Opens the output pipe and sends results directly back to the server\n\n    This method can only be called once per collection.\n\n    Args:\n        output_pipe (str): The path to the input pipe. Defaults to sys.argv[-1]\n    \"\"\"\n    # The server always invokes methods with the output file as the last argument\n    write_to_pipe(output_pipe, self.get_json())\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.CollectResult.with_error","title":"<code>with_error(error_message)</code>","text":"<p>Set the Adapter Instance to an error state with the provided message.</p> <p>If this method is called multiple times, only the most recent error message will be recorded. If error_message is set, no results (objects, relationships) will be returned.</p> <p>Parameters:</p> Name Type Description Default <code>error_message</code> <code>str</code> <p>A string containing the error message</p> required Source code in <code>aria/ops/result.py</code> <pre><code>def with_error(self, error_message: str) -&gt; None:\n    \"\"\"Set the Adapter Instance to an error state with the provided message.\n\n    If this method is called multiple times, only the most recent error message\n    will be recorded. If error_message is set, no results (objects, relationships)\n    will be returned.\n\n    Args:\n        error_message (str): A string containing the error message\n    \"\"\"\n    self._error_message = error_message\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.EndpointResult","title":"<code>EndpointResult</code>","text":"<p>Class for managing the results of an adapter instance get endpoint URLs call</p> <p>The result of this should be a set of urls that the adapter will connect to. Aria Operations will then attempt to connect to each of these urls securely, and prompt the user to accept or reject the certificate presented by each URL.</p> Source code in <code>aria/ops/result.py</code> <pre><code>class EndpointResult:\n    \"\"\"Class for managing the results of an adapter instance get endpoint URLs call\n\n    The result of this should be a set of urls that the adapter will connect to.\n    Aria Operations will then attempt to connect to each of these urls securely,\n    and prompt the user to accept or reject the certificate presented by each URL.\n\n    \"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initializes an EndpointResult\"\"\"\n        self.endpoints: list[str] = []\n\n    def with_endpoint(self, endpoint_url: str) -&gt; None:\n        \"\"\"Adds an endpoint to the list of endpoints Aria Operations will test for\n        certificate validation.\n\n        If this method is called multiple times, each url will be called by Aria\n        Operations.\n\n        Args:\n            endpoint_url (srt): A string containing the url\n        \"\"\"\n        self.endpoints.append(endpoint_url)\n\n    def get_json(self) -&gt; dict:\n        \"\"\"Get a JSON representation of this EndpointResult\n\n        Returns a JSON representation of this EndpointResult in the format required\n        by Aria Operations.\n\n        Returns:\n             A JSON representation of this EndpointResult\n        \"\"\"\n        return {\"endpointUrls\": self.endpoints}\n\n    def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n        \"\"\"Opens the output pipe and sends results directly back to the server\n\n        This method can only be called once per collection.\n\n        Args:\n            output_pipe (str): The path to the input pipe. Defaults to sys.argv[-1]\n        \"\"\"\n        # The server always invokes methods with the output file as the last argument\n        write_to_pipe(output_pipe, self.get_json())\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.EndpointResult.__init__","title":"<code>__init__()</code>","text":"<p>Initializes an EndpointResult</p> Source code in <code>aria/ops/result.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initializes an EndpointResult\"\"\"\n    self.endpoints: list[str] = []\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.EndpointResult.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this EndpointResult</p> <p>Returns a JSON representation of this EndpointResult in the format required by Aria Operations.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A JSON representation of this EndpointResult</p> Source code in <code>aria/ops/result.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"Get a JSON representation of this EndpointResult\n\n    Returns a JSON representation of this EndpointResult in the format required\n    by Aria Operations.\n\n    Returns:\n         A JSON representation of this EndpointResult\n    \"\"\"\n    return {\"endpointUrls\": self.endpoints}\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.EndpointResult.send_results","title":"<code>send_results(output_pipe=sys.argv[-1])</code>","text":"<p>Opens the output pipe and sends results directly back to the server</p> <p>This method can only be called once per collection.</p> <p>Parameters:</p> Name Type Description Default <code>output_pipe</code> <code>str</code> <p>The path to the input pipe. Defaults to sys.argv[-1]</p> <code>argv[-1]</code> Source code in <code>aria/ops/result.py</code> <pre><code>def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n    \"\"\"Opens the output pipe and sends results directly back to the server\n\n    This method can only be called once per collection.\n\n    Args:\n        output_pipe (str): The path to the input pipe. Defaults to sys.argv[-1]\n    \"\"\"\n    # The server always invokes methods with the output file as the last argument\n    write_to_pipe(output_pipe, self.get_json())\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.EndpointResult.with_endpoint","title":"<code>with_endpoint(endpoint_url)</code>","text":"<p>Adds an endpoint to the list of endpoints Aria Operations will test for certificate validation.</p> <p>If this method is called multiple times, each url will be called by Aria Operations.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint_url</code> <code>srt</code> <p>A string containing the url</p> required Source code in <code>aria/ops/result.py</code> <pre><code>def with_endpoint(self, endpoint_url: str) -&gt; None:\n    \"\"\"Adds an endpoint to the list of endpoints Aria Operations will test for\n    certificate validation.\n\n    If this method is called multiple times, each url will be called by Aria\n    Operations.\n\n    Args:\n        endpoint_url (srt): A string containing the url\n    \"\"\"\n    self.endpoints.append(endpoint_url)\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.ObjectKeyAlreadyExistsException","title":"<code>ObjectKeyAlreadyExistsException</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Exception when two objects with the same Key are added to the same :class:<code>Result</code></p> Source code in <code>aria/ops/result.py</code> <pre><code>class ObjectKeyAlreadyExistsException(Exception):\n    \"\"\"Exception when two objects with the same Key are added to the same\n    :class:`Result`\"\"\"\n\n    pass\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.RelationshipUpdateModes","title":"<code>RelationshipUpdateModes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>If 'update_relationships' is 'ALL', all relationships between objects are returned. This mode will remove any currently-existing relationships in VMware Aria Operations that are not present in the Result.</p> <p>If 'update_relationships' is 'NONE', no relationships will be returned, even if there are relationships between objects in the Result. All currently-existing relationships in VMware Aria Operations will be preserved.</p> <p>If 'update_relationships' is 'AUTO' (or not explicitly set), then the mode will behave like 'ALL' if any object in the Result has at least one relationship, otherwise the mode will behave like 'NONE' if no objects have any relationships in the Result. This default behavior makes it easy to skip collecting all relationships for a collection without overwriting previously-collected relationships, e.g., for performance reasons.</p> <p>If 'update_relationships' is 'PER_OBJECT', then only objects with updated relationships will be returned. This is similar to 'AUTO' except that if an object's child relationships have not been updated/set (by calling 'add_child' or 'add_children'), existing child relationships in VMware Aria Operations will be preserved. This means that to remove all relationships from an object (without setting any new relationships), the adapter must call 'add_children' on the object with an empty collection of children. This mode is useful for updating a subset of objects' relationships in a collection, but requires more care to ensure relationships are removed when appropriate.</p> Source code in <code>aria/ops/result.py</code> <pre><code>class RelationshipUpdateModes(Enum):  # type: ignore\n    \"\"\"\n    If 'update_relationships' is 'ALL', all relationships between objects are\n    returned. This mode will remove any currently-existing relationships in VMware\n    Aria Operations that are not present in the Result.\n\n    If 'update_relationships' is 'NONE', no relationships will be returned, even if\n    there are relationships between objects in the Result. All currently-existing\n    relationships in VMware Aria Operations will be preserved.\n\n    If 'update_relationships' is 'AUTO' (or not explicitly set), then the mode will\n    behave like 'ALL' if any object in the Result has at least one relationship,\n    otherwise the mode will behave like 'NONE' if no objects have any relationships in\n    the Result. This default behavior makes it easy to skip collecting all relationships\n    for a collection without overwriting previously-collected relationships, e.g., for\n    performance reasons.\n\n    If 'update_relationships' is 'PER_OBJECT', then only objects with updated\n    relationships will be returned. This is similar to 'AUTO' except that if an\n    object's child relationships have not been updated/set (by calling 'add_child' or\n    'add_children'), existing child relationships in VMware Aria Operations will be\n    preserved. This means that to remove all relationships from an object\n    (without setting any new relationships), the adapter must call 'add_children' on\n    the object with an empty collection of children. This mode is useful for updating a\n    subset of objects' relationships in a collection, but requires more care to\n    ensure relationships are removed when appropriate.\n    \"\"\"\n\n    ALL = RelationshipUpdateMode(1)\n    NONE = RelationshipUpdateMode(2)\n    AUTO = RelationshipUpdateMode(3)\n    PER_OBJECT = RelationshipUpdateMode(4)\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.TestResult","title":"<code>TestResult</code>","text":"<p>Class for managing the results of an adapter instance connection test</p> Source code in <code>aria/ops/result.py</code> <pre><code>class TestResult:\n    \"\"\"Class for managing the results of an adapter instance connection test\"\"\"\n\n    def __init__(self) -&gt; None:\n        \"\"\"Initializes a Result\"\"\"\n        self._error_message: Optional[str] = None\n\n    def is_success(self) -&gt; bool:\n        \"\"\"\n\n        Returns:\n             True if the TestResult represents a successful test\n        \"\"\"\n        return self._error_message is None\n\n    def with_error(self, error_message: str) -&gt; None:\n        \"\"\"Set the adapter instance connection test to failed, and display the given\n        error message.\n\n        If this method is called multiple times, only the most recent error message\n        will be recorded. If error_message is set, the test is considered failed.\n\n        Args:\n            error_message (str): A string containing the error message\n        \"\"\"\n        self._error_message = error_message\n\n    def get_json(self) -&gt; dict:\n        \"\"\"Get a JSON representation of this TestResult\n\n        Returns a JSON representation of this TestResult in the format required by\n        Aria Operations, indicating either a successful test, or a failed test with\n        error message.\n\n        Returns:\n             A JSON representation of this TestResult\n        \"\"\"\n        if self.is_success():\n            return {}\n        else:\n            return {\"errorMessage\": self._error_message}\n\n    def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n        \"\"\"Opens the output pipe and sends results directly back to the server\n\n        This method can only be called once per collection.\n\n        Args:\n            output_pipe (str): The path to the input pipe. Defaults to sys.argv[-1]\n        \"\"\"\n        # The server always invokes methods with the output file as the last argument\n        write_to_pipe(output_pipe, self.get_json())\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.TestResult.__init__","title":"<code>__init__()</code>","text":"<p>Initializes a Result</p> Source code in <code>aria/ops/result.py</code> <pre><code>def __init__(self) -&gt; None:\n    \"\"\"Initializes a Result\"\"\"\n    self._error_message: Optional[str] = None\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.TestResult.get_json","title":"<code>get_json()</code>","text":"<p>Get a JSON representation of this TestResult</p> <p>Returns a JSON representation of this TestResult in the format required by Aria Operations, indicating either a successful test, or a failed test with error message.</p> <p>Returns:</p> Type Description <code>dict</code> <p>A JSON representation of this TestResult</p> Source code in <code>aria/ops/result.py</code> <pre><code>def get_json(self) -&gt; dict:\n    \"\"\"Get a JSON representation of this TestResult\n\n    Returns a JSON representation of this TestResult in the format required by\n    Aria Operations, indicating either a successful test, or a failed test with\n    error message.\n\n    Returns:\n         A JSON representation of this TestResult\n    \"\"\"\n    if self.is_success():\n        return {}\n    else:\n        return {\"errorMessage\": self._error_message}\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.TestResult.is_success","title":"<code>is_success()</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p>True if the TestResult represents a successful test</p> Source code in <code>aria/ops/result.py</code> <pre><code>def is_success(self) -&gt; bool:\n    \"\"\"\n\n    Returns:\n         True if the TestResult represents a successful test\n    \"\"\"\n    return self._error_message is None\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.TestResult.send_results","title":"<code>send_results(output_pipe=sys.argv[-1])</code>","text":"<p>Opens the output pipe and sends results directly back to the server</p> <p>This method can only be called once per collection.</p> <p>Parameters:</p> Name Type Description Default <code>output_pipe</code> <code>str</code> <p>The path to the input pipe. Defaults to sys.argv[-1]</p> <code>argv[-1]</code> Source code in <code>aria/ops/result.py</code> <pre><code>def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n    \"\"\"Opens the output pipe and sends results directly back to the server\n\n    This method can only be called once per collection.\n\n    Args:\n        output_pipe (str): The path to the input pipe. Defaults to sys.argv[-1]\n    \"\"\"\n    # The server always invokes methods with the output file as the last argument\n    write_to_pipe(output_pipe, self.get_json())\n</code></pre>"},{"location":"references/python-lib/result/#aria.ops.result.TestResult.with_error","title":"<code>with_error(error_message)</code>","text":"<p>Set the adapter instance connection test to failed, and display the given error message.</p> <p>If this method is called multiple times, only the most recent error message will be recorded. If error_message is set, the test is considered failed.</p> <p>Parameters:</p> Name Type Description Default <code>error_message</code> <code>str</code> <p>A string containing the error message</p> required Source code in <code>aria/ops/result.py</code> <pre><code>def with_error(self, error_message: str) -&gt; None:\n    \"\"\"Set the adapter instance connection test to failed, and display the given\n    error message.\n\n    If this method is called multiple times, only the most recent error message\n    will be recorded. If error_message is set, the test is considered failed.\n\n    Args:\n        error_message (str): A string containing the error message\n    \"\"\"\n    self._error_message = error_message\n</code></pre>"},{"location":"references/python-lib/suite_api_client/","title":"Suite api client","text":""},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient","title":"<code>SuiteApiClient</code>","text":"<p>Class for simplifying calls to the SuiteAPI</p> <p>Automatically handles: * Token based authentication * Required headers * Releasing tokens (when used in a 'with' statement) * Paging (when using 'paged_get' or 'paged_post') * Logging requests</p> <p>This class is intended to be used in a with statement: with VROpsSuiteAPIClient() as suiteApiClient:     # Code using suiteApiClient goes here     ...</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>class SuiteApiClient:\n    \"\"\"Class for simplifying calls to the SuiteAPI\n\n    Automatically handles:\n    * Token based authentication\n    * Required headers\n    * Releasing tokens (when used in a 'with' statement)\n    * Paging (when using 'paged_get' or 'paged_post')\n    * Logging requests\n\n    This class is intended to be used in a with statement:\n    with VROpsSuiteAPIClient() as suiteApiClient:\n        # Code using suiteApiClient goes here\n        ...\n    \"\"\"\n\n    def __init__(self, connection_params: SuiteApiConnectionParameters):\n        \"\"\"Initializes a SuiteAPI client.\n\n        Args:\n             connection_params (SuiteApiConnectionParameters): Connection parameters for the Suite API.\n        \"\"\"\n        self.credential = connection_params\n        self.token = \"\"\n\n    def __enter__(self) -&gt; SuiteApiClient:\n        \"\"\"Acquire a token upon entering the 'with' context\n\n        Returns:\n            SuiteApiClient: The current instance of the class.\n        \"\"\"\n        self.token = self.get_token()\n        return self\n\n    def __exit__(\n        self,\n        exception_type: Optional[Type[BaseException]],\n        exception_value: Optional[BaseException],\n        traceback: Optional[TracebackType],\n    ) -&gt; None:\n        \"\"\"Release the token upon exiting the 'with' context\n\n        Args:\n            exception_type (Optional[Type[BaseException]]): Unused\n            exception_value (Optional[BaseException]): Unused\n            traceback (Optional[TracebackType]): Unused\n        \"\"\"\n        self.release_token()\n\n    def get_token(self) -&gt; str:\n        \"\"\"Get the authentication token\n\n        Gets the current authentication token. If no current token exists, acquires an authentication token first.\n\n        Returns:\n             The authentication token\n        \"\"\"\n        if self.token == \"\":\n            with self.post(\n                \"/api/auth/token/acquire\",\n                json={\n                    \"username\": self.credential.username,\n                    \"password\": self.credential.password,\n                    \"authSource\": self.credential.auth_source,\n                },\n            ) as token_response:\n                if token_response.ok:\n                    self.token = token_response.json()[\"token\"]\n                    logger.debug(\"Acquired token \" + self.token)\n                else:\n                    logger.warning(\n                        f\"Could not acquire SuiteAPI token: {token_response}\"\n                    )\n\n        return self.token\n\n    def release_token(self) -&gt; None:\n        \"\"\"Release the authentication token, if it exists\"\"\"\n\n        if self.token != \"\":\n            self.post(\"auth/token/release\").close()\n            self.token = \"\"\n\n    def get(self, url: str, **kwargs: Any) -&gt; Response:\n        \"\"\"Send a GET request to the SuiteAPI\n        The 'Response' object should be used in a 'with' block or\n        manually closed after use\n\n        Args:\n            url (str): URL to send GET request to\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n            The API response\n        \"\"\"\n        return self._request_wrapper(requests.get, url, **kwargs)\n\n    def paged_get(self, url: str, key: str, **kwargs: Any) -&gt; dict:\n        \"\"\"Send a GET request to the SuiteAPI that gets a paged response\n\n        Args:\n            url (str): URL to send GET request to\n            key (str): Json key that contains the paged data\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n             The API response\n        \"\"\"\n        return self._paged_request(requests.get, url, key, **kwargs)\n\n    def post(self, url: str, **kwargs: Any) -&gt; Response:\n        \"\"\"Send a POST request to the SuiteAPI\n        The 'Response' object should be used in a 'with' block or\n        manually closed after use\n\n        Args:\n            url (str): URL to send POST request to\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n             The API response\n        \"\"\"\n        kwargs.setdefault(\"headers\", {})\n        kwargs[\"headers\"].setdefault(\"Content-Type\", \"application/json\")\n        return self._request_wrapper(requests.post, url, **kwargs)\n\n    def paged_post(self, url: str, key: str, **kwargs: Any) -&gt; dict:\n        \"\"\"Send a POST request to the SuiteAPI that gets a paged response.\n\n        Args:\n            url (str): URL to send POST request to\n            key (str): Json key that contains the paged data\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n             The API response\n        \"\"\"\n        kwargs.setdefault(\"headers\", {})\n        kwargs[\"headers\"].setdefault(\"Content-Type\", \"application/json\")\n        return self._paged_request(requests.post, url, key, **kwargs)\n\n    def put(self, url: str, **kwargs: Any) -&gt; Response:\n        \"\"\"Send a PUT request to the SuiteAPI\n        The 'Response' object should be used in a 'with' block or\n        manually closed after use\n\n        Args:\n            url (str): URL to send PUT request to\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n             The API response\n        \"\"\"\n        return self._request_wrapper(requests.put, url, **kwargs)\n\n    def patch(self, url: str, **kwargs: Any) -&gt; Response:\n        \"\"\"Send a PATCH request to the SuiteAPI\n        The 'Response' object should be used in a 'with' block or\n        manually closed after use\n\n        Args:\n            url (str): URL to send PATCH request to\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n            The API response\n        \"\"\"\n        return self._request_wrapper(requests.patch, url, **kwargs)\n\n    def delete(self, url: str, **kwargs: Any) -&gt; Response:\n        \"\"\"Send a DELETE request to the SuiteAPI\n        The 'Response' object should be used in a 'with' block or\n        manually closed after use\n\n        Args:\n            url (str): URL to send DELETE request to\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n             The API response\n        \"\"\"\n        return self._request_wrapper(requests.delete, url, **kwargs)\n\n    def _add_paging(self, **kwargs: Any) -&gt; dict:\n        kwargs.setdefault(\"params\", {})\n        kwargs[\"params\"].setdefault(\"page\", 0)\n        kwargs[\"params\"].setdefault(\"pageSize\", 1000)\n\n        if \"page\" in kwargs:\n            kwargs[\"params\"][\"page\"] = kwargs.pop(\"page\")\n        if \"pageSize\" in kwargs:\n            kwargs[\"params\"][\"pageSize\"] = kwargs.pop(\"pageSize\")\n\n        return kwargs\n\n    # Implementations for common endpoints:\n\n    def query_for_resources(self, query: Dict[str, Any]) -&gt; list[Object]:\n        \"\"\"Query for resources using the Suite API, and convert the\n        responses to SDK Objects.\n\n        Note that not all information from the query is returned. For example, the\n        query returns health statuses of each object, but those are not present in\n        the resulting Objects. If information other than the Object itself is needed,\n        you will need to call the endpoint and process the results manually.\n\n        Args:\n            query (Dict[str, Any]): json of the resourceQuery, as defined in the SuiteAPI docs:\n                https://[[aria-ops-hostname]]/suite-api/doc/swagger-ui.html#/Resources/getMatchingResourcesUsingPOST\n\n        Returns:\n             list of sdk Objects representing each of the returned objects.\n        \"\"\"\n        try:\n            results = []\n            if \"name\" in query and \"regex\" in query:\n                # This is behavior in the suite api itself, we're just warning about it\n                # here to avoid confusion.\n                logger.warning(\n                    \"'name' and 'regex' are mutually exclusive in resource \"\n                    \"queries. Ignoring the 'regex' key in favor of 'name' \"\n                    \"key.\"\n                )\n            # The 'name' key takes an array but only looks up the first element.\n            # Fix that limitation here.\n            if \"name\" in query and len(query[\"name\"]) &gt; 1:\n                json_body = query.copy()\n                # TODO: Improve concurrancy when we add async support\n                #  to suite_api_client\n                for name in query[\"name\"]:\n                    json_body.update({\"name\": [name]})\n                    response = self.paged_post(\n                        \"/api/resources/query\", \"resourceList\", json=json_body\n                    )\n                    results.extend(response.get(\"resourceList\", []))\n            else:\n                response = self.paged_post(\n                    \"/api/resources/query\",\n                    \"resourceList\",\n                    json=query,\n                )\n                results = response.get(\"resourceList\", [])\n            return [key_to_object(obj[\"resourceKey\"]) for obj in results]\n        except Exception as e:\n            logger.error(e)\n            logger.exception(e)\n            return []\n\n    def _paged_request(\n        self, request_func: Callable, url: str, key: str, **kwargs: Any\n    ) -&gt; dict:\n        \"\"\"Send a request to the SuiteAPI that returns a paged response. Each response must have data returned in an\n        array at key 'key'. The array from the responses will be combined into a single array and returned in a map of\n        the form:\n        {\n           \"{key}\": [aggregated data]\n        }\n\n        Args:\n            url(str): URL to send request to\n            key (str): Json key that contains the paged data\n            kwargs (Any): Additional keyword arguments to pass to request\n\n        Returns:\n             The API response\n        \"\"\"\n        kwargs = self._add_paging(**kwargs)\n        with self._request_wrapper(request_func, url, **kwargs) as page_0:\n            if page_0.status_code &lt; 300:\n                page_0_body = json.loads(page_0.text)\n            else:\n                # _request_wrapper will log the error\n                # TODO: How should we communicate to caller that\n                #       request(s) have failed?\n                return {key: []}\n        total_objects = int(\n            page_0_body.get(\"pageInfo\", {\"totalCount\": 1}).get(\"totalCount\", 1)\n        )\n        page_size = kwargs[\"params\"][\"pageSize\"]\n        remaining_pages = math.ceil(total_objects / page_size) - 1\n        objects = page_0_body.get(key, [])\n        while remaining_pages &gt; 0:\n            kwargs = self._add_paging(page=remaining_pages, **kwargs)\n            with self._request_wrapper(request_func, url, **kwargs) as page_n:\n                if page_n.status_code &lt; 300:\n                    page_n_body = json.loads(page_n.text)\n            objects.extend(page_n_body.get(key, []))\n            remaining_pages -= 1\n        return {key: objects}\n\n    def _request_wrapper(\n        self, request_func: Callable[..., Response], url: str, **kwargs: Any\n    ) -&gt; Response:\n        kwargs = self._to_vrops_request(url, **kwargs)\n        result = request_func(**kwargs)\n        if result.ok:\n            logger.info(\n                f\"{request_func.__name__} {kwargs['url']}: OK({result.status_code})\"\n            )\n        else:\n            logger.warning(\n                f\"{request_func.__name__} {kwargs['url']}: ERROR({result.status_code})\"\n            )\n        logger.debug(result.text)\n        return result\n\n    def _to_vrops_request(self, url: str, **kwargs: Any) -&gt; dict:\n        kwargs.setdefault(\"url\", url)\n        kwargs.setdefault(\"headers\", {})\n        if self.token:\n            kwargs[\"headers\"][\"Authorization\"] = \"vRealizeOpsToken \" + self.token\n        kwargs[\"headers\"].setdefault(\"Accept\", \"application/json\")\n        kwargs.setdefault(\"verify\", False)\n\n        url = kwargs[\"url\"]\n        if \"internal/\" in url:\n            kwargs[\"headers\"][\"X-vRealizeOps-API-use-unsupported\"] = \"true\"\n            logger.info(f\"Using unsupported API: {url}\")\n        if url.startswith(\"http\"):\n            return kwargs\n\n        if url.startswith(\"/\"):\n            url = url[1:]\n        if url.startswith(\"suite-api/\"):\n            url = url[10:]\n        elif url.startswith(\"api\") or url.startswith(\"internal\"):\n            kwargs[\"url\"] = self.credential.host + url\n        else:\n            kwargs[\"url\"] = self.credential.host + \"api/\" + url\n        return kwargs\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.__enter__","title":"<code>__enter__()</code>","text":"<p>Acquire a token upon entering the 'with' context</p> <p>Returns:</p> Name Type Description <code>SuiteApiClient</code> <code>SuiteApiClient</code> <p>The current instance of the class.</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def __enter__(self) -&gt; SuiteApiClient:\n    \"\"\"Acquire a token upon entering the 'with' context\n\n    Returns:\n        SuiteApiClient: The current instance of the class.\n    \"\"\"\n    self.token = self.get_token()\n    return self\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.__exit__","title":"<code>__exit__(exception_type, exception_value, traceback)</code>","text":"<p>Release the token upon exiting the 'with' context</p> <p>Parameters:</p> Name Type Description Default <code>exception_type</code> <code>Optional[Type[BaseException]]</code> <p>Unused</p> required <code>exception_value</code> <code>Optional[BaseException]</code> <p>Unused</p> required <code>traceback</code> <code>Optional[TracebackType]</code> <p>Unused</p> required Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def __exit__(\n    self,\n    exception_type: Optional[Type[BaseException]],\n    exception_value: Optional[BaseException],\n    traceback: Optional[TracebackType],\n) -&gt; None:\n    \"\"\"Release the token upon exiting the 'with' context\n\n    Args:\n        exception_type (Optional[Type[BaseException]]): Unused\n        exception_value (Optional[BaseException]): Unused\n        traceback (Optional[TracebackType]): Unused\n    \"\"\"\n    self.release_token()\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.__init__","title":"<code>__init__(connection_params)</code>","text":"<p>Initializes a SuiteAPI client.</p> <p>Parameters:</p> Name Type Description Default <code>connection_params</code> <code>SuiteApiConnectionParameters</code> <p>Connection parameters for the Suite API.</p> required Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def __init__(self, connection_params: SuiteApiConnectionParameters):\n    \"\"\"Initializes a SuiteAPI client.\n\n    Args:\n         connection_params (SuiteApiConnectionParameters): Connection parameters for the Suite API.\n    \"\"\"\n    self.credential = connection_params\n    self.token = \"\"\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.delete","title":"<code>delete(url, **kwargs)</code>","text":"<p>Send a DELETE request to the SuiteAPI The 'Response' object should be used in a 'with' block or manually closed after use</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send DELETE request to</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def delete(self, url: str, **kwargs: Any) -&gt; Response:\n    \"\"\"Send a DELETE request to the SuiteAPI\n    The 'Response' object should be used in a 'with' block or\n    manually closed after use\n\n    Args:\n        url (str): URL to send DELETE request to\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n         The API response\n    \"\"\"\n    return self._request_wrapper(requests.delete, url, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.get","title":"<code>get(url, **kwargs)</code>","text":"<p>Send a GET request to the SuiteAPI The 'Response' object should be used in a 'with' block or manually closed after use</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send GET request to</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def get(self, url: str, **kwargs: Any) -&gt; Response:\n    \"\"\"Send a GET request to the SuiteAPI\n    The 'Response' object should be used in a 'with' block or\n    manually closed after use\n\n    Args:\n        url (str): URL to send GET request to\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n        The API response\n    \"\"\"\n    return self._request_wrapper(requests.get, url, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.get_token","title":"<code>get_token()</code>","text":"<p>Get the authentication token</p> <p>Gets the current authentication token. If no current token exists, acquires an authentication token first.</p> <p>Returns:</p> Type Description <code>str</code> <p>The authentication token</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def get_token(self) -&gt; str:\n    \"\"\"Get the authentication token\n\n    Gets the current authentication token. If no current token exists, acquires an authentication token first.\n\n    Returns:\n         The authentication token\n    \"\"\"\n    if self.token == \"\":\n        with self.post(\n            \"/api/auth/token/acquire\",\n            json={\n                \"username\": self.credential.username,\n                \"password\": self.credential.password,\n                \"authSource\": self.credential.auth_source,\n            },\n        ) as token_response:\n            if token_response.ok:\n                self.token = token_response.json()[\"token\"]\n                logger.debug(\"Acquired token \" + self.token)\n            else:\n                logger.warning(\n                    f\"Could not acquire SuiteAPI token: {token_response}\"\n                )\n\n    return self.token\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.paged_get","title":"<code>paged_get(url, key, **kwargs)</code>","text":"<p>Send a GET request to the SuiteAPI that gets a paged response</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send GET request to</p> required <code>key</code> <code>str</code> <p>Json key that contains the paged data</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def paged_get(self, url: str, key: str, **kwargs: Any) -&gt; dict:\n    \"\"\"Send a GET request to the SuiteAPI that gets a paged response\n\n    Args:\n        url (str): URL to send GET request to\n        key (str): Json key that contains the paged data\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n         The API response\n    \"\"\"\n    return self._paged_request(requests.get, url, key, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.paged_post","title":"<code>paged_post(url, key, **kwargs)</code>","text":"<p>Send a POST request to the SuiteAPI that gets a paged response.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send POST request to</p> required <code>key</code> <code>str</code> <p>Json key that contains the paged data</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>dict</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def paged_post(self, url: str, key: str, **kwargs: Any) -&gt; dict:\n    \"\"\"Send a POST request to the SuiteAPI that gets a paged response.\n\n    Args:\n        url (str): URL to send POST request to\n        key (str): Json key that contains the paged data\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n         The API response\n    \"\"\"\n    kwargs.setdefault(\"headers\", {})\n    kwargs[\"headers\"].setdefault(\"Content-Type\", \"application/json\")\n    return self._paged_request(requests.post, url, key, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.patch","title":"<code>patch(url, **kwargs)</code>","text":"<p>Send a PATCH request to the SuiteAPI The 'Response' object should be used in a 'with' block or manually closed after use</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send PATCH request to</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def patch(self, url: str, **kwargs: Any) -&gt; Response:\n    \"\"\"Send a PATCH request to the SuiteAPI\n    The 'Response' object should be used in a 'with' block or\n    manually closed after use\n\n    Args:\n        url (str): URL to send PATCH request to\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n        The API response\n    \"\"\"\n    return self._request_wrapper(requests.patch, url, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.post","title":"<code>post(url, **kwargs)</code>","text":"<p>Send a POST request to the SuiteAPI The 'Response' object should be used in a 'with' block or manually closed after use</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send POST request to</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def post(self, url: str, **kwargs: Any) -&gt; Response:\n    \"\"\"Send a POST request to the SuiteAPI\n    The 'Response' object should be used in a 'with' block or\n    manually closed after use\n\n    Args:\n        url (str): URL to send POST request to\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n         The API response\n    \"\"\"\n    kwargs.setdefault(\"headers\", {})\n    kwargs[\"headers\"].setdefault(\"Content-Type\", \"application/json\")\n    return self._request_wrapper(requests.post, url, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.put","title":"<code>put(url, **kwargs)</code>","text":"<p>Send a PUT request to the SuiteAPI The 'Response' object should be used in a 'with' block or manually closed after use</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>URL to send PUT request to</p> required <code>kwargs</code> <code>Any</code> <p>Additional keyword arguments to pass to request</p> <code>{}</code> <p>Returns:</p> Type Description <code>Response</code> <p>The API response</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def put(self, url: str, **kwargs: Any) -&gt; Response:\n    \"\"\"Send a PUT request to the SuiteAPI\n    The 'Response' object should be used in a 'with' block or\n    manually closed after use\n\n    Args:\n        url (str): URL to send PUT request to\n        kwargs (Any): Additional keyword arguments to pass to request\n\n    Returns:\n         The API response\n    \"\"\"\n    return self._request_wrapper(requests.put, url, **kwargs)\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.query_for_resources","title":"<code>query_for_resources(query)</code>","text":"<p>Query for resources using the Suite API, and convert the responses to SDK Objects.</p> <p>Note that not all information from the query is returned. For example, the query returns health statuses of each object, but those are not present in the resulting Objects. If information other than the Object itself is needed, you will need to call the endpoint and process the results manually.</p> <p>Parameters:</p> Name Type Description Default <code>query</code> <code>Dict[str, Any]</code> <p>json of the resourceQuery, as defined in the SuiteAPI docs: https://[[aria-ops-hostname]]/suite-api/doc/swagger-ui.html#/Resources/getMatchingResourcesUsingPOST</p> required <p>Returns:</p> Type Description <code>list[Object]</code> <p>list of sdk Objects representing each of the returned objects.</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def query_for_resources(self, query: Dict[str, Any]) -&gt; list[Object]:\n    \"\"\"Query for resources using the Suite API, and convert the\n    responses to SDK Objects.\n\n    Note that not all information from the query is returned. For example, the\n    query returns health statuses of each object, but those are not present in\n    the resulting Objects. If information other than the Object itself is needed,\n    you will need to call the endpoint and process the results manually.\n\n    Args:\n        query (Dict[str, Any]): json of the resourceQuery, as defined in the SuiteAPI docs:\n            https://[[aria-ops-hostname]]/suite-api/doc/swagger-ui.html#/Resources/getMatchingResourcesUsingPOST\n\n    Returns:\n         list of sdk Objects representing each of the returned objects.\n    \"\"\"\n    try:\n        results = []\n        if \"name\" in query and \"regex\" in query:\n            # This is behavior in the suite api itself, we're just warning about it\n            # here to avoid confusion.\n            logger.warning(\n                \"'name' and 'regex' are mutually exclusive in resource \"\n                \"queries. Ignoring the 'regex' key in favor of 'name' \"\n                \"key.\"\n            )\n        # The 'name' key takes an array but only looks up the first element.\n        # Fix that limitation here.\n        if \"name\" in query and len(query[\"name\"]) &gt; 1:\n            json_body = query.copy()\n            # TODO: Improve concurrancy when we add async support\n            #  to suite_api_client\n            for name in query[\"name\"]:\n                json_body.update({\"name\": [name]})\n                response = self.paged_post(\n                    \"/api/resources/query\", \"resourceList\", json=json_body\n                )\n                results.extend(response.get(\"resourceList\", []))\n        else:\n            response = self.paged_post(\n                \"/api/resources/query\",\n                \"resourceList\",\n                json=query,\n            )\n            results = response.get(\"resourceList\", [])\n        return [key_to_object(obj[\"resourceKey\"]) for obj in results]\n    except Exception as e:\n        logger.error(e)\n        logger.exception(e)\n        return []\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiClient.release_token","title":"<code>release_token()</code>","text":"<p>Release the authentication token, if it exists</p> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def release_token(self) -&gt; None:\n    \"\"\"Release the authentication token, if it exists\"\"\"\n\n    if self.token != \"\":\n        self.post(\"auth/token/release\").close()\n        self.token = \"\"\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiConnectionParameters","title":"<code>SuiteApiConnectionParameters</code>","text":"Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>class SuiteApiConnectionParameters:\n    def __init__(\n        self, host: str, username: str, password: str, auth_source: str = \"LOCAL\"\n    ):\n        \"\"\"Initialize SuiteApi Connection Parameters\n\n        Args:\n            host (str): The host to use for connecting to the SuiteAPI.\n            username (str): Username used to authenticate to SuiteAPI\n            password (str): Password used to authenticate to SuiteAPI\n            auth_source (str): Source of authentication. Defaults to \"LOCAL\"\n        \"\"\"\n        if \"http\" in host:\n            self.host = f\"{host}/suite-api/\"\n        else:\n            self.host = f\"https://{host}/suite-api/\"\n        self.username = username\n        self.password = password\n        self.auth_source = auth_source\n</code></pre>"},{"location":"references/python-lib/suite_api_client/#aria.ops.suite_api_client.SuiteApiConnectionParameters.__init__","title":"<code>__init__(host, username, password, auth_source='LOCAL')</code>","text":"<p>Initialize SuiteApi Connection Parameters</p> <p>Parameters:</p> Name Type Description Default <code>host</code> <code>str</code> <p>The host to use for connecting to the SuiteAPI.</p> required <code>username</code> <code>str</code> <p>Username used to authenticate to SuiteAPI</p> required <code>password</code> <code>str</code> <p>Password used to authenticate to SuiteAPI</p> required <code>auth_source</code> <code>str</code> <p>Source of authentication. Defaults to \"LOCAL\"</p> <code>'LOCAL'</code> Source code in <code>aria/ops/suite_api_client.py</code> <pre><code>def __init__(\n    self, host: str, username: str, password: str, auth_source: str = \"LOCAL\"\n):\n    \"\"\"Initialize SuiteApi Connection Parameters\n\n    Args:\n        host (str): The host to use for connecting to the SuiteAPI.\n        username (str): Username used to authenticate to SuiteAPI\n        password (str): Password used to authenticate to SuiteAPI\n        auth_source (str): Source of authentication. Defaults to \"LOCAL\"\n    \"\"\"\n    if \"http\" in host:\n        self.host = f\"{host}/suite-api/\"\n    else:\n        self.host = f\"https://{host}/suite-api/\"\n    self.username = username\n    self.password = password\n    self.auth_source = auth_source\n</code></pre>"},{"location":"references/python-lib/timer/","title":"Timer","text":""},{"location":"references/python-lib/definition/adapter_definition/","title":"Adapter definition","text":""},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition","title":"<code>AdapterDefinition</code>","text":"<p>               Bases: <code>GroupType</code></p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>class AdapterDefinition(GroupType):  # type: ignore\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        adapter_instance_key: Optional[str] = None,\n        adapter_instance_label: Optional[str] = None,\n        version: int = 1,\n    ):\n        \"\"\"\n        Args:\n            key (str): The adapter key is used to identify the adapter and its object types. It must be unique across\n                all Management Packs.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI for this adapter.\n                Defaults to the key.\n            adapter_instance_key (Optional[str]): Object type of the adapter instance object. Defaults to\n                '{adapter key}_adapter_instance'.\n            adapter_instance_label (Optional[str]): Label that is displayed in the VMware Aria Operations UI for the\n                adapter instance object type. Defaults to '{adapter label} Adapter Instance'.\n            version (int): Version of the definition. This should be incremented for new releases of the adapter.\n                Defaults to 1\n        \"\"\"\n        key = validate_key(key, \"Adapter\")\n        if not key[0].isalpha():\n            raise KeyException(\"Adapter key must start with a letter.\")\n        if len(key.split()) &gt; 1:\n            raise KeyException(\"Adapter key cannot contain whitespace.\")\n        if not all(c.isalnum() or c == \"_\" for c in key):\n            raise KeyException(\n                \"Adapter key cannot contain special characters besides '_'.\"\n            )\n\n        self.key = key\n\n        self.label = label\n        if label is None:\n            self.label = key\n\n        self.adapter_instance_key = adapter_instance_key\n        if adapter_instance_key is None:\n            self.adapter_instance_key = f\"{self.key}_adapter_instance\"\n\n        self.adapter_instance_label = adapter_instance_label\n        if adapter_instance_label is None:\n            self.adapter_instance_label = f\"{self.label} Adapter Instance\"\n\n        self.version = version\n        self.parameters: dict = OrderedDict()\n        self.credentials: dict = {}\n        self.object_types: dict = {}\n\n        super().__init__()\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"adapter_key\": self.key,\n            \"adapter_label\": self.label,\n            \"describe_version\": self.version,\n            \"schema_version\": 1,\n            \"adapter_instance\": {\n                \"key\": self.adapter_instance_key,\n                \"label\": self.adapter_instance_label,\n                \"identifiers\": [\n                    identifier.to_json() for identifier in self.parameters.values()\n                ],\n            }\n            | super().to_json(),\n            \"credential_types\": [\n                credential_type.to_json()\n                for credential_type in self.credentials.values()\n            ],\n            \"object_types\": [\n                object_type.to_json() for object_type in self.object_types.values()\n            ],\n        }\n\n    def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n        \"\"\"Opens the output pipe and sends results directly back to the server\n\n        This method can only be called once per server request.\n        \"\"\"\n        # The server always invokes methods with the output file as the last argument\n        write_to_pipe(output_pipe, self.to_json())\n\n    def define_string_parameter(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[str] = None,\n        max_length: int = 512,\n        required: bool = True,\n        advanced: bool = False,\n    ) -&gt; StringParameter:\n        \"\"\"\n        Create a new string parameter and add it to the adapter instance. The user will be asked to provide a value for\n        this parameter each time a new account/adapter instance is created.\n\n        Args:\n            key (str): Used to identify the parameter\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the\n                VMware Aria Operations UI.\n            default (Optional[str]): The default value of the parameter. Defaults to None\n            max_length (int): The max length of the parameter value. Defaults to 512.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n\n        Returns:\n             The created string parameter definition.\n        \"\"\"\n        parameter = StringParameter(\n            key,\n            label,\n            description,\n            default,\n            max_length,\n            required,\n            advanced,\n            display_order=len(self.parameters),\n        )\n        self.add_parameter(parameter)\n        return parameter\n\n    def define_int_parameter(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[int] = None,\n        required: bool = True,\n        advanced: bool = False,\n    ) -&gt; IntParameter:\n        \"\"\"\n        Create a new integer parameter and add it to the adapter instance. The user will be asked to provide a value for\n        this parameter each time a new account/adapter instance is created.\n\n        Args:\n            key (str): Used to identify the parameter\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n            default (Optional[int]): The default value of the parameter.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n\n        Returns:\n             The created int parameter definition.\n        \"\"\"\n        parameter = IntParameter(\n            key,\n            label,\n            description,\n            default,\n            required,\n            advanced,\n            display_order=len(self.parameters),\n        )\n        self.add_parameter(parameter)\n        return parameter\n\n    def define_enum_parameter(\n        self,\n        key: str,\n        values: list[str],\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[str] = None,\n        required: bool = True,\n        advanced: bool = False,\n    ) -&gt; EnumParameter:\n        \"\"\"\n        Create a new enum parameter and add it to the adapter instance. The user will be asked to provide a value for\n        this parameter each time a new account/adapter instance is created.\n\n        Args:\n            key (str): Used to identify the parameter\n            values (List[str]): An array containing all enum values. If 'default' is specified and not part of this array, it\n                will be added as an additional enum value (values are case-sensitive). Enum values are not localizable.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n            default (Optional[str]): The default value of the parameter.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n\n        Returns:\n             The created enum parameter definition.\n        \"\"\"\n        parameter = EnumParameter(\n            key,\n            values,\n            label,\n            description,\n            default,\n            required,\n            advanced,\n            display_order=len(self.parameters),\n        )\n        self.add_parameter(parameter)\n        return parameter\n\n    def add_parameter(self, parameter: Parameter) -&gt; None:\n        \"\"\"\n        Add a parameter to the adapter instance. The user will be asked to provide a value for\n        this parameter each time a new account/adapter instance is created.\n\n        Args:\n            parameter (Parameter): The parameter to add to the adapter instance.\n        \"\"\"\n        key = parameter.key\n        if key in self.parameters:\n            raise DuplicateKeyException(\n                f\"Parameter with key {key} already exists in adapter definition.\"\n            )\n        self.parameters[key] = parameter\n\n    def define_credential_type(\n        self, key: str = \"default_credential\", label: Optional[str] = None\n    ) -&gt; CredentialType:\n        \"\"\"\n        Create a new credential type and add it to this adapter instance. When more than one credential types are\n        present, The user will be required to select the type and then fill in the parameters for that type, as only\n        one credential type can be used for any given adapter instance.\n\n        Args:\n            key (str): Used to identify the credential type\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n\n        Returns:\n             The created credential type.\n        \"\"\"\n        credential = CredentialType(key, label)\n        self.add_credential_type(credential)\n        return credential\n\n    def add_credential_types(self, credential_types: list[CredentialType]) -&gt; None:\n        \"\"\"\n        Add a list of credential types to the adapter instance.\n\n        Args:\n            credential_types (List[CredentialType]): A list of credential types to add.\n        \"\"\"\n        for credential_type in credential_types:\n            self.add_credential_type(credential_type)\n\n    def add_credential_type(self, credential_type: CredentialType) -&gt; None:\n        \"\"\"\n        Add a credential type to the adapter instance. When more than one credential types are present, The user will\n        be required to select the type and then fill in the parameters for that type, as only one credential type can be\n        used for any given adapter instance.\n\n        Args:\n            credential_type (CredentialType): The credential type to add.\n        \"\"\"\n        key = credential_type.key\n        if key in self.credentials:\n            raise DuplicateKeyException(\n                f\"Credential type with key {key} already exists in adapter definition.\"\n            )\n        self.credentials[key] = credential_type\n\n    def define_object_type(self, key: str, label: Optional[str] = None) -&gt; ObjectType:\n        \"\"\"\n        Create a new object type definition and add it to this adapter definition.\n\n        Args:\n            key (str): The object type\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI for this object type. Defaults to the key.\n\n        Returns:\n             The created object type definition\n        \"\"\"\n        object_type = ObjectType(key, label)\n        self.add_object_type(object_type)\n        return object_type\n\n    def add_object_types(self, object_types: list[ObjectType]) -&gt; None:\n        \"\"\"\n        Adds a list of object types to this adapter definition\n        Args:\n            object_types (List[ObjectType]): A list of object type definitions.\n        \"\"\"\n        for object_type in object_types:\n            self.add_object_type(object_type)\n\n    def add_object_type(self, object_type: ObjectType) -&gt; None:\n        \"\"\"\n        Adds an object type to this adapter definition\n\n        Args:\n            object_type (ObjectType): An object type definition.\n        \"\"\"\n        key = object_type.key\n        if key in self.object_types:\n            raise DuplicateKeyException(\n                f\"Object type with key {key} already exists in adapter definition.\"\n            )\n        self.object_types[key] = object_type\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.__init__","title":"<code>__init__(key, label=None, adapter_instance_key=None, adapter_instance_label=None, version=1)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The adapter key is used to identify the adapter and its object types. It must be unique across all Management Packs.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI for this adapter. Defaults to the key.</p> <code>None</code> <code>adapter_instance_key</code> <code>Optional[str]</code> <p>Object type of the adapter instance object. Defaults to '{adapter key}_adapter_instance'.</p> <code>None</code> <code>adapter_instance_label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI for the adapter instance object type. Defaults to '{adapter label} Adapter Instance'.</p> <code>None</code> <code>version</code> <code>int</code> <p>Version of the definition. This should be incremented for new releases of the adapter. Defaults to 1</p> <code>1</code> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    adapter_instance_key: Optional[str] = None,\n    adapter_instance_label: Optional[str] = None,\n    version: int = 1,\n):\n    \"\"\"\n    Args:\n        key (str): The adapter key is used to identify the adapter and its object types. It must be unique across\n            all Management Packs.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI for this adapter.\n            Defaults to the key.\n        adapter_instance_key (Optional[str]): Object type of the adapter instance object. Defaults to\n            '{adapter key}_adapter_instance'.\n        adapter_instance_label (Optional[str]): Label that is displayed in the VMware Aria Operations UI for the\n            adapter instance object type. Defaults to '{adapter label} Adapter Instance'.\n        version (int): Version of the definition. This should be incremented for new releases of the adapter.\n            Defaults to 1\n    \"\"\"\n    key = validate_key(key, \"Adapter\")\n    if not key[0].isalpha():\n        raise KeyException(\"Adapter key must start with a letter.\")\n    if len(key.split()) &gt; 1:\n        raise KeyException(\"Adapter key cannot contain whitespace.\")\n    if not all(c.isalnum() or c == \"_\" for c in key):\n        raise KeyException(\n            \"Adapter key cannot contain special characters besides '_'.\"\n        )\n\n    self.key = key\n\n    self.label = label\n    if label is None:\n        self.label = key\n\n    self.adapter_instance_key = adapter_instance_key\n    if adapter_instance_key is None:\n        self.adapter_instance_key = f\"{self.key}_adapter_instance\"\n\n    self.adapter_instance_label = adapter_instance_label\n    if adapter_instance_label is None:\n        self.adapter_instance_label = f\"{self.label} Adapter Instance\"\n\n    self.version = version\n    self.parameters: dict = OrderedDict()\n    self.credentials: dict = {}\n    self.object_types: dict = {}\n\n    super().__init__()\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.add_credential_type","title":"<code>add_credential_type(credential_type)</code>","text":"<p>Add a credential type to the adapter instance. When more than one credential types are present, The user will be required to select the type and then fill in the parameters for that type, as only one credential type can be used for any given adapter instance.</p> <p>Parameters:</p> Name Type Description Default <code>credential_type</code> <code>CredentialType</code> <p>The credential type to add.</p> required Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def add_credential_type(self, credential_type: CredentialType) -&gt; None:\n    \"\"\"\n    Add a credential type to the adapter instance. When more than one credential types are present, The user will\n    be required to select the type and then fill in the parameters for that type, as only one credential type can be\n    used for any given adapter instance.\n\n    Args:\n        credential_type (CredentialType): The credential type to add.\n    \"\"\"\n    key = credential_type.key\n    if key in self.credentials:\n        raise DuplicateKeyException(\n            f\"Credential type with key {key} already exists in adapter definition.\"\n        )\n    self.credentials[key] = credential_type\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.add_credential_types","title":"<code>add_credential_types(credential_types)</code>","text":"<p>Add a list of credential types to the adapter instance.</p> <p>Parameters:</p> Name Type Description Default <code>credential_types</code> <code>List[CredentialType]</code> <p>A list of credential types to add.</p> required Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def add_credential_types(self, credential_types: list[CredentialType]) -&gt; None:\n    \"\"\"\n    Add a list of credential types to the adapter instance.\n\n    Args:\n        credential_types (List[CredentialType]): A list of credential types to add.\n    \"\"\"\n    for credential_type in credential_types:\n        self.add_credential_type(credential_type)\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.add_object_type","title":"<code>add_object_type(object_type)</code>","text":"<p>Adds an object type to this adapter definition</p> <p>Parameters:</p> Name Type Description Default <code>object_type</code> <code>ObjectType</code> <p>An object type definition.</p> required Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def add_object_type(self, object_type: ObjectType) -&gt; None:\n    \"\"\"\n    Adds an object type to this adapter definition\n\n    Args:\n        object_type (ObjectType): An object type definition.\n    \"\"\"\n    key = object_type.key\n    if key in self.object_types:\n        raise DuplicateKeyException(\n            f\"Object type with key {key} already exists in adapter definition.\"\n        )\n    self.object_types[key] = object_type\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.add_object_types","title":"<code>add_object_types(object_types)</code>","text":"<p>Adds a list of object types to this adapter definition Args:     object_types (List[ObjectType]): A list of object type definitions.</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def add_object_types(self, object_types: list[ObjectType]) -&gt; None:\n    \"\"\"\n    Adds a list of object types to this adapter definition\n    Args:\n        object_types (List[ObjectType]): A list of object type definitions.\n    \"\"\"\n    for object_type in object_types:\n        self.add_object_type(object_type)\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.add_parameter","title":"<code>add_parameter(parameter)</code>","text":"<p>Add a parameter to the adapter instance. The user will be asked to provide a value for this parameter each time a new account/adapter instance is created.</p> <p>Parameters:</p> Name Type Description Default <code>parameter</code> <code>Parameter</code> <p>The parameter to add to the adapter instance.</p> required Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def add_parameter(self, parameter: Parameter) -&gt; None:\n    \"\"\"\n    Add a parameter to the adapter instance. The user will be asked to provide a value for\n    this parameter each time a new account/adapter instance is created.\n\n    Args:\n        parameter (Parameter): The parameter to add to the adapter instance.\n    \"\"\"\n    key = parameter.key\n    if key in self.parameters:\n        raise DuplicateKeyException(\n            f\"Parameter with key {key} already exists in adapter definition.\"\n        )\n    self.parameters[key] = parameter\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.define_credential_type","title":"<code>define_credential_type(key='default_credential', label=None)</code>","text":"<p>Create a new credential type and add it to this adapter instance. When more than one credential types are present, The user will be required to select the type and then fill in the parameters for that type, as only one credential type can be used for any given adapter instance.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the credential type</p> <code>'default_credential'</code> <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <p>Returns:</p> Type Description <code>CredentialType</code> <p>The created credential type.</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def define_credential_type(\n    self, key: str = \"default_credential\", label: Optional[str] = None\n) -&gt; CredentialType:\n    \"\"\"\n    Create a new credential type and add it to this adapter instance. When more than one credential types are\n    present, The user will be required to select the type and then fill in the parameters for that type, as only\n    one credential type can be used for any given adapter instance.\n\n    Args:\n        key (str): Used to identify the credential type\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n\n    Returns:\n         The created credential type.\n    \"\"\"\n    credential = CredentialType(key, label)\n    self.add_credential_type(credential)\n    return credential\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.define_enum_parameter","title":"<code>define_enum_parameter(key, values, label=None, description=None, default=None, required=True, advanced=False)</code>","text":"<p>Create a new enum parameter and add it to the adapter instance. The user will be asked to provide a value for this parameter each time a new account/adapter instance is created.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter</p> required <code>values</code> <code>List[str]</code> <p>An array containing all enum values. If 'default' is specified and not part of this array, it will be added as an additional enum value (values are case-sensitive). Enum values are not localizable.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the parameter.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>EnumParameter</code> <p>The created enum parameter definition.</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def define_enum_parameter(\n    self,\n    key: str,\n    values: list[str],\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[str] = None,\n    required: bool = True,\n    advanced: bool = False,\n) -&gt; EnumParameter:\n    \"\"\"\n    Create a new enum parameter and add it to the adapter instance. The user will be asked to provide a value for\n    this parameter each time a new account/adapter instance is created.\n\n    Args:\n        key (str): Used to identify the parameter\n        values (List[str]): An array containing all enum values. If 'default' is specified and not part of this array, it\n            will be added as an additional enum value (values are case-sensitive). Enum values are not localizable.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n        default (Optional[str]): The default value of the parameter.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n\n    Returns:\n         The created enum parameter definition.\n    \"\"\"\n    parameter = EnumParameter(\n        key,\n        values,\n        label,\n        description,\n        default,\n        required,\n        advanced,\n        display_order=len(self.parameters),\n    )\n    self.add_parameter(parameter)\n    return parameter\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.define_int_parameter","title":"<code>define_int_parameter(key, label=None, description=None, default=None, required=True, advanced=False)</code>","text":"<p>Create a new integer parameter and add it to the adapter instance. The user will be asked to provide a value for this parameter each time a new account/adapter instance is created.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[int]</code> <p>The default value of the parameter.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>IntParameter</code> <p>The created int parameter definition.</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def define_int_parameter(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[int] = None,\n    required: bool = True,\n    advanced: bool = False,\n) -&gt; IntParameter:\n    \"\"\"\n    Create a new integer parameter and add it to the adapter instance. The user will be asked to provide a value for\n    this parameter each time a new account/adapter instance is created.\n\n    Args:\n        key (str): Used to identify the parameter\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n        default (Optional[int]): The default value of the parameter.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n\n    Returns:\n         The created int parameter definition.\n    \"\"\"\n    parameter = IntParameter(\n        key,\n        label,\n        description,\n        default,\n        required,\n        advanced,\n        display_order=len(self.parameters),\n    )\n    self.add_parameter(parameter)\n    return parameter\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.define_object_type","title":"<code>define_object_type(key, label=None)</code>","text":"<p>Create a new object type definition and add it to this adapter definition.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The object type</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI for this object type. Defaults to the key.</p> <code>None</code> <p>Returns:</p> Type Description <code>ObjectType</code> <p>The created object type definition</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def define_object_type(self, key: str, label: Optional[str] = None) -&gt; ObjectType:\n    \"\"\"\n    Create a new object type definition and add it to this adapter definition.\n\n    Args:\n        key (str): The object type\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI for this object type. Defaults to the key.\n\n    Returns:\n         The created object type definition\n    \"\"\"\n    object_type = ObjectType(key, label)\n    self.add_object_type(object_type)\n    return object_type\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.define_string_parameter","title":"<code>define_string_parameter(key, label=None, description=None, default=None, max_length=512, required=True, advanced=False)</code>","text":"<p>Create a new string parameter and add it to the adapter instance. The user will be asked to provide a value for this parameter each time a new account/adapter instance is created.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the parameter. Defaults to None</p> <code>None</code> <code>max_length</code> <code>int</code> <p>The max length of the parameter value. Defaults to 512.</p> <code>512</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <p>Returns:</p> Type Description <code>StringParameter</code> <p>The created string parameter definition.</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def define_string_parameter(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[str] = None,\n    max_length: int = 512,\n    required: bool = True,\n    advanced: bool = False,\n) -&gt; StringParameter:\n    \"\"\"\n    Create a new string parameter and add it to the adapter instance. The user will be asked to provide a value for\n    this parameter each time a new account/adapter instance is created.\n\n    Args:\n        key (str): Used to identify the parameter\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the\n            VMware Aria Operations UI.\n        default (Optional[str]): The default value of the parameter. Defaults to None\n        max_length (int): The max length of the parameter value. Defaults to 512.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n\n    Returns:\n         The created string parameter definition.\n    \"\"\"\n    parameter = StringParameter(\n        key,\n        label,\n        description,\n        default,\n        max_length,\n        required,\n        advanced,\n        display_order=len(self.parameters),\n    )\n    self.add_parameter(parameter)\n    return parameter\n</code></pre>"},{"location":"references/python-lib/definition/adapter_definition/#aria.ops.definition.adapter_definition.AdapterDefinition.send_results","title":"<code>send_results(output_pipe=sys.argv[-1])</code>","text":"<p>Opens the output pipe and sends results directly back to the server</p> <p>This method can only be called once per server request.</p> Source code in <code>aria/ops/definition/adapter_definition.py</code> <pre><code>def send_results(self, output_pipe: str = sys.argv[-1]) -&gt; None:\n    \"\"\"Opens the output pipe and sends results directly back to the server\n\n    This method can only be called once per server request.\n    \"\"\"\n    # The server always invokes methods with the output file as the last argument\n    write_to_pipe(output_pipe, self.to_json())\n</code></pre>"},{"location":"references/python-lib/definition/assertions/","title":"Assertions","text":""},{"location":"references/python-lib/definition/attribute/","title":"Attribute","text":""},{"location":"references/python-lib/definition/attribute/#aria.ops.definition.attribute.Attribute","title":"<code>Attribute</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>aria/ops/definition/attribute.py</code> <pre><code>class Attribute(ABC):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        unit: Optional[Unit] = None,\n        is_rate: bool = False,\n        is_discrete: bool = False,\n        is_kpi: bool = False,\n        is_impact: bool = False,\n        is_key_attribute: bool = False,\n        dashboard_order: int = 0,\n    ):\n        \"\"\"\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            unit (Optional[str]): Specifies what unit this metric is returned in. This allows the UI to display the units in a\n        consistent manner, and perform conversions when appropriate.\n            is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n            will be set automatically. Otherwise, defaults to False.\n            is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous\n            (floating point). Defaults to False.\n            is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n            'Self - Health Score' metric, which can affect the 'Anomalies' Badge. Defaults to False.\n            is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a\n            proxy to a root cause, but not the root cause itself. Defaults to False.\n            is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n            dashboard_order (int): Determines the order parameters will be displayed in the UI. Defaults to 0\n        \"\"\"\n        self.key = validate_key(key, \"Attribute\")\n        self.label = label\n        if label is None:\n            self.label = key\n        self.unit = unit.value.key if unit else None\n        self.is_rate = unit.value.is_rate if unit else is_rate\n        self.is_discrete = is_discrete\n        self.is_kpi = is_kpi\n        self.is_impact = is_impact\n        self.is_key_attribute = is_key_attribute\n        self.dashboard_order = dashboard_order\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"key\": self.key,\n            \"label\": self.label,\n            \"unit\": self.unit,\n            \"is_rate\": self.is_rate,\n            \"is_discrete\": self.is_discrete,\n            \"is_kpi\": self.is_kpi,\n            \"is_impact\": self.is_impact,\n            \"is_key_attribute\": self.is_key_attribute,\n            \"dashboard_order\": self.dashboard_order,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/attribute/#aria.ops.definition.attribute.Attribute.__init__","title":"<code>__init__(key, label=None, unit=None, is_rate=False, is_discrete=False, is_kpi=False, is_impact=False, is_key_attribute=False, dashboard_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>unit</code> <code>Optional[str]</code> <p>Specifies what unit this metric is returned in. This allows the UI to display the units in a</p> <code>None</code> <p>consistent manner, and perform conversions when appropriate.     is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this     will be set automatically. Otherwise, defaults to False.     is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous     (floating point). Defaults to False.     is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's     'Self - Health Score' metric, which can affect the 'Anomalies' Badge. Defaults to False.     is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a     proxy to a root cause, but not the root cause itself. Defaults to False.     is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.     dashboard_order (int): Determines the order parameters will be displayed in the UI. Defaults to 0</p> Source code in <code>aria/ops/definition/attribute.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    unit: Optional[Unit] = None,\n    is_rate: bool = False,\n    is_discrete: bool = False,\n    is_kpi: bool = False,\n    is_impact: bool = False,\n    is_key_attribute: bool = False,\n    dashboard_order: int = 0,\n):\n    \"\"\"\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        unit (Optional[str]): Specifies what unit this metric is returned in. This allows the UI to display the units in a\n    consistent manner, and perform conversions when appropriate.\n        is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n        will be set automatically. Otherwise, defaults to False.\n        is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous\n        (floating point). Defaults to False.\n        is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n        'Self - Health Score' metric, which can affect the 'Anomalies' Badge. Defaults to False.\n        is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a\n        proxy to a root cause, but not the root cause itself. Defaults to False.\n        is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n        dashboard_order (int): Determines the order parameters will be displayed in the UI. Defaults to 0\n    \"\"\"\n    self.key = validate_key(key, \"Attribute\")\n    self.label = label\n    if label is None:\n        self.label = key\n    self.unit = unit.value.key if unit else None\n    self.is_rate = unit.value.is_rate if unit else is_rate\n    self.is_discrete = is_discrete\n    self.is_kpi = is_kpi\n    self.is_impact = is_impact\n    self.is_key_attribute = is_key_attribute\n    self.dashboard_order = dashboard_order\n</code></pre>"},{"location":"references/python-lib/definition/attribute/#aria.ops.definition.attribute.MetricAttribute","title":"<code>MetricAttribute</code>","text":"<p>               Bases: <code>Attribute</code></p> Source code in <code>aria/ops/definition/attribute.py</code> <pre><code>class MetricAttribute(Attribute):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        unit: Optional[Unit] = None,\n        is_rate: bool = False,\n        is_discrete: bool = False,\n        is_kpi: bool = False,\n        is_impact: bool = False,\n        is_key_attribute: bool = False,\n        dashboard_order: int = 0,\n    ):\n        \"\"\"\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the units in a\n                consistent manner, and perform conversions when appropriate.\n            is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n                will be set automatically. Otherwise, defaults to False.\n            is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous\n                (floating point)\n            is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n                'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n            is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a\n                proxy to a root cause, but not the root cause itself.\n            is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n            dashboard_order (bool): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(\n            key,\n            label,\n            unit,\n            is_rate,\n            is_discrete,\n            is_kpi,\n            is_impact,\n            is_key_attribute,\n            dashboard_order,\n        )\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"data_type\": \"integer\" if self.is_discrete else \"float\",\n            \"is_property\": False,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/attribute/#aria.ops.definition.attribute.MetricAttribute.__init__","title":"<code>__init__(key, label=None, unit=None, is_rate=False, is_discrete=False, is_kpi=False, is_impact=False, is_key_attribute=False, dashboard_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>unit</code> <code>Optional[Unit]</code> <p>Specifies what unit this metric is returned in. This allows the UI to display the units in a consistent manner, and perform conversions when appropriate.</p> <code>None</code> <code>is_rate</code> <code>bool</code> <p>Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this will be set automatically. Otherwise, defaults to False.</p> <code>False</code> <code>is_discrete</code> <code>bool</code> <p>Declares that this attribute's range of values is discrete (integer) rather than continuous (floating point)</p> <code>False</code> <code>is_kpi</code> <code>bool</code> <p>If set, threshold breaches for this metric will be used in the calculation of the object's 'Self - Health Score' metric, which can affect the 'Anomalies' Badge.</p> <code>False</code> <code>is_impact</code> <code>bool</code> <p>If set, this attribute will never be the 'root cause' of an issue. For example, it could be a proxy to a root cause, but not the root cause itself.</p> <code>False</code> <code>is_key_attribute</code> <code>bool</code> <p>True if the attribute should be shown in some object summary widgets in the UI.</p> <code>False</code> <code>dashboard_order</code> <code>bool</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/attribute.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    unit: Optional[Unit] = None,\n    is_rate: bool = False,\n    is_discrete: bool = False,\n    is_kpi: bool = False,\n    is_impact: bool = False,\n    is_key_attribute: bool = False,\n    dashboard_order: int = 0,\n):\n    \"\"\"\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the units in a\n            consistent manner, and perform conversions when appropriate.\n        is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n            will be set automatically. Otherwise, defaults to False.\n        is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous\n            (floating point)\n        is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n            'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n        is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a\n            proxy to a root cause, but not the root cause itself.\n        is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n        dashboard_order (bool): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(\n        key,\n        label,\n        unit,\n        is_rate,\n        is_discrete,\n        is_kpi,\n        is_impact,\n        is_key_attribute,\n        dashboard_order,\n    )\n</code></pre>"},{"location":"references/python-lib/definition/attribute/#aria.ops.definition.attribute.PropertyAttribute","title":"<code>PropertyAttribute</code>","text":"<p>               Bases: <code>Attribute</code></p> Source code in <code>aria/ops/definition/attribute.py</code> <pre><code>class PropertyAttribute(Attribute):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        is_string: bool = True,\n        unit: Optional[Unit] = None,\n        is_rate: bool = False,\n        is_discrete: bool = False,\n        is_kpi: bool = False,\n        is_impact: bool = False,\n        is_key_attribute: bool = False,\n        dashboard_order: int = 0,\n    ):\n        \"\"\"\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            is_string (bool): Determines if the property is numeric or string (text).\n            unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the units in a\n                consistent manner, and perform conversions when appropriate.\n            is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n                will be set automatically. Otherwise, defaults to False.\n            is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous\n                (floating point). Defaults to False, unless 'is_string' is set, in which case it will always be set to True.\n            is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n                'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n            is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a\n                proxy to a root cause, but not the root cause itself.\n            is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n            dashboard_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(\n            key,\n            label,\n            unit,\n            is_rate,\n            is_discrete,\n            is_kpi,\n            is_impact,\n            is_key_attribute,\n            dashboard_order,\n        )\n        self.is_string = is_string\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"data_type\": \"string\"\n            if self.is_string\n            else \"integer\"\n            if self.is_discrete\n            else \"float\",\n            \"is_discrete\": True if self.is_string else self.is_discrete,\n            \"is_property\": True,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/attribute/#aria.ops.definition.attribute.PropertyAttribute.__init__","title":"<code>__init__(key, label=None, is_string=True, unit=None, is_rate=False, is_discrete=False, is_kpi=False, is_impact=False, is_key_attribute=False, dashboard_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>is_string</code> <code>bool</code> <p>Determines if the property is numeric or string (text).</p> <code>True</code> <code>unit</code> <code>Optional[Unit]</code> <p>Specifies what unit this metric is returned in. This allows the UI to display the units in a consistent manner, and perform conversions when appropriate.</p> <code>None</code> <code>is_rate</code> <code>bool</code> <p>Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this will be set automatically. Otherwise, defaults to False.</p> <code>False</code> <code>is_discrete</code> <code>bool</code> <p>Declares that this attribute's range of values is discrete (integer) rather than continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always be set to True.</p> <code>False</code> <code>is_kpi</code> <code>bool</code> <p>If set, threshold breaches for this metric will be used in the calculation of the object's 'Self - Health Score' metric, which can affect the 'Anomalies' Badge.</p> <code>False</code> <code>is_impact</code> <code>bool</code> <p>If set, this attribute will never be the 'root cause' of an issue. For example, it could be a proxy to a root cause, but not the root cause itself.</p> <code>False</code> <code>is_key_attribute</code> <code>bool</code> <p>True if the attribute should be shown in some object summary widgets in the UI.</p> <code>False</code> <code>dashboard_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/attribute.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    is_string: bool = True,\n    unit: Optional[Unit] = None,\n    is_rate: bool = False,\n    is_discrete: bool = False,\n    is_kpi: bool = False,\n    is_impact: bool = False,\n    is_key_attribute: bool = False,\n    dashboard_order: int = 0,\n):\n    \"\"\"\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        is_string (bool): Determines if the property is numeric or string (text).\n        unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the units in a\n            consistent manner, and perform conversions when appropriate.\n        is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n            will be set automatically. Otherwise, defaults to False.\n        is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than continuous\n            (floating point). Defaults to False, unless 'is_string' is set, in which case it will always be set to True.\n        is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n            'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n        is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could be a\n            proxy to a root cause, but not the root cause itself.\n        is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n        dashboard_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(\n        key,\n        label,\n        unit,\n        is_rate,\n        is_discrete,\n        is_kpi,\n        is_impact,\n        is_key_attribute,\n        dashboard_order,\n    )\n    self.is_string = is_string\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/","title":"Credential type","text":""},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialEnumParameter","title":"<code>CredentialEnumParameter</code>","text":"<p>               Bases: <code>CredentialParameter</code></p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>values</code> <code>list[Union[str, tuple[str, str]]]</code> <p>An array containing all enum values. If 'default' is specified and not part of this array, it will be added as an additional enum value. Enum values are not localizable.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the enum.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>class CredentialEnumParameter(CredentialParameter):\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        values (list[Union[str, tuple[str,str]]]): An array containing all enum values. If 'default' is specified and\n            not part of this array, it will be added as an additional enum value. Enum values are not localizable.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        default (Optional[str]): The default value of the enum.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n\n    def __init__(\n        self,\n        key: str,\n        values: list[Union[str, tuple[str, str]]],\n        label: Optional[str] = None,\n        default: Optional[str] = None,\n        required: bool = True,\n        display_order: int = 0,\n    ):\n        super().__init__(key, label, required, display_order)\n        self.values = values\n        self.default = default\n\n        if (\n            default not in [v[0] if isinstance(v, tuple) else v for v in self.values]\n            and default is not None\n        ):\n            self.values.append((default, default))\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"string\",\n            \"default\": self.default,\n            \"enum\": True,\n            \"enum_values\": [\n                {\n                    \"key\": str(value[0]) if isinstance(value, tuple) else value,\n                    \"label\": str(value[1]) if isinstance(value, tuple) else value,\n                    \"display_order\": display_order,\n                }\n                for display_order, value in enumerate(self.values)\n            ],\n        }\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialIntParameter","title":"<code>CredentialIntParameter</code>","text":"<p>               Bases: <code>CredentialParameter</code></p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>class CredentialIntParameter(CredentialParameter):\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        required: bool = True,\n        display_order: int = 0,\n    ):\n        super().__init__(key, label, required, display_order)\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"integer\",\n        }\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialParameter","title":"<code>CredentialParameter</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>class CredentialParameter(ABC):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        required: bool = True,\n        display_order: int = 0,\n    ):\n        \"\"\"\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            display_order (0): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        self.key = validate_key(key, \"Credential parameter\")\n        self.label = label\n        if label is None:\n            self.label = key\n        self.required = required\n        self.display_order = display_order\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"key\": self.key,\n            \"label\": self.label,\n            \"required\": self.required,\n            \"password\": False,\n            \"enum\": False,\n            \"display_order\": self.display_order,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialParameter.__init__","title":"<code>__init__(key, label=None, required=True, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>display_order</code> <code>0</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    required: bool = True,\n    display_order: int = 0,\n):\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        display_order (0): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    self.key = validate_key(key, \"Credential parameter\")\n    self.label = label\n    if label is None:\n        self.label = key\n    self.required = required\n    self.display_order = display_order\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialPasswordParameter","title":"<code>CredentialPasswordParameter</code>","text":"<p>               Bases: <code>CredentialParameter</code></p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>class CredentialPasswordParameter(CredentialParameter):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        required: bool = True,\n        display_order: int = 0,\n    ):\n        \"\"\"\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            display_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(key, label, required, display_order)\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"string\",\n            \"password\": True,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialPasswordParameter.__init__","title":"<code>__init__(key, label=None, required=True, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    required: bool = True,\n    display_order: int = 0,\n):\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(key, label, required, display_order)\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialStringParameter","title":"<code>CredentialStringParameter</code>","text":"<p>               Bases: <code>CredentialParameter</code></p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>class CredentialStringParameter(CredentialParameter):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        required: bool = True,\n        display_order: int = 0,\n    ):\n        \"\"\"\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            display_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(key, label, required, display_order)\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"string\",\n        }\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialStringParameter.__init__","title":"<code>__init__(key, label=None, required=True, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    required: bool = True,\n    display_order: int = 0,\n):\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(key, label, required, display_order)\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType","title":"<code>CredentialType</code>","text":"Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>class CredentialType:\n    def __init__(self, key: str, label: Optional[str] = None):\n        self.key = validate_key(key, \"Credential type\")\n        self.label = label\n        if label is None:\n            self.label = key\n        self.credential_parameters: dict = OrderedDict()\n\n    def define_string_parameter(\n        self, key: str, label: Optional[str] = None, required: bool = True\n    ) -&gt; CredentialStringParameter:\n        \"\"\"\n        Create a new string credential parameter and apply it to this credential definition.\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n\n        Returns:\n             The created string parameter definition.\n        \"\"\"\n        field = CredentialStringParameter(key, label, required)\n        self.add_parameter(field)\n        return field\n\n    def define_int_parameter(\n        self, key: str, label: Optional[str] = None, required: bool = True\n    ) -&gt; CredentialIntParameter:\n        \"\"\"\n        Create a new int credential parameter and apply it to this credential definition.\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n\n        Returns:\n             The created int parameter definition.\n        \"\"\"\n        field = CredentialIntParameter(key, label, required)\n        self.add_parameter(field)\n        return field\n\n    def define_password_parameter(\n        self, key: str, label: Optional[str] = None, required: bool = True\n    ) -&gt; CredentialPasswordParameter:\n        \"\"\"\n        Create a new password credential parameter and apply it to this credential definition.\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n\n        Returns:\n            The created password parameter definition.\n        \"\"\"\n        field = CredentialPasswordParameter(key, label, required)\n        self.add_parameter(field)\n        return field\n\n    def define_enum_parameter(\n        self,\n        key: str,\n        values: list[Union[str, tuple[str, str]]],\n        label: Optional[str] = None,\n        default: Optional[str] = None,\n        required: bool = True,\n    ) -&gt; CredentialEnumParameter:\n        \"\"\"\n        Create a new enum credential parameter and apply it to this credential definition.\n\n        Args:\n            key (str): Used to identify the parameter.\n            values (list[Union[str, tuple[str, str]]]): An array containing all enum values. If 'default' is specified\n                and not part of this array, it will be added as an additional enum value. Enum values are not localizable.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            default (Optional[str]): The default value of the enum.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n\n        Returns:\n             The created enum parameter definition.\n        \"\"\"\n        field = CredentialEnumParameter(key, values, label, default, required)\n        self.add_parameter(field)\n        return field\n\n    def add_parameters(self, credential_parameters: list[CredentialParameter]) -&gt; None:\n        \"\"\"\n        Args:\n            credential_parameters (list[CredentialParameter]): A list of parameters to add to the credential\n        \"\"\"\n        for credential_parameter in credential_parameters:\n            self.add_parameter(credential_parameter)\n\n    def add_parameter(self, credential_parameter: CredentialParameter) -&gt; None:\n        \"\"\"\n        Args:\n            credential_parameter (CredentialParameter): The parameter to add to the credential\n        \"\"\"\n        key = credential_parameter.key\n        if key in self.credential_parameters:\n            raise DuplicateKeyException(\n                f\"Credential field with key {key} already exists in adapter definition.\"\n            )\n        credential_parameter.display_order = len(self.credential_parameters)\n        self.credential_parameters[key] = credential_parameter\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"key\": self.key,\n            \"label\": self.label,\n            \"fields\": [\n                field.to_json() for field in self.credential_parameters.values()\n            ],\n        }\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType.add_parameter","title":"<code>add_parameter(credential_parameter)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>credential_parameter</code> <code>CredentialParameter</code> <p>The parameter to add to the credential</p> required Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def add_parameter(self, credential_parameter: CredentialParameter) -&gt; None:\n    \"\"\"\n    Args:\n        credential_parameter (CredentialParameter): The parameter to add to the credential\n    \"\"\"\n    key = credential_parameter.key\n    if key in self.credential_parameters:\n        raise DuplicateKeyException(\n            f\"Credential field with key {key} already exists in adapter definition.\"\n        )\n    credential_parameter.display_order = len(self.credential_parameters)\n    self.credential_parameters[key] = credential_parameter\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType.add_parameters","title":"<code>add_parameters(credential_parameters)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>credential_parameters</code> <code>list[CredentialParameter]</code> <p>A list of parameters to add to the credential</p> required Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def add_parameters(self, credential_parameters: list[CredentialParameter]) -&gt; None:\n    \"\"\"\n    Args:\n        credential_parameters (list[CredentialParameter]): A list of parameters to add to the credential\n    \"\"\"\n    for credential_parameter in credential_parameters:\n        self.add_parameter(credential_parameter)\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType.define_enum_parameter","title":"<code>define_enum_parameter(key, values, label=None, default=None, required=True)</code>","text":"<p>Create a new enum credential parameter and apply it to this credential definition.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>values</code> <code>list[Union[str, tuple[str, str]]]</code> <p>An array containing all enum values. If 'default' is specified and not part of this array, it will be added as an additional enum value. Enum values are not localizable.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the enum.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>CredentialEnumParameter</code> <p>The created enum parameter definition.</p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def define_enum_parameter(\n    self,\n    key: str,\n    values: list[Union[str, tuple[str, str]]],\n    label: Optional[str] = None,\n    default: Optional[str] = None,\n    required: bool = True,\n) -&gt; CredentialEnumParameter:\n    \"\"\"\n    Create a new enum credential parameter and apply it to this credential definition.\n\n    Args:\n        key (str): Used to identify the parameter.\n        values (list[Union[str, tuple[str, str]]]): An array containing all enum values. If 'default' is specified\n            and not part of this array, it will be added as an additional enum value. Enum values are not localizable.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        default (Optional[str]): The default value of the enum.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n\n    Returns:\n         The created enum parameter definition.\n    \"\"\"\n    field = CredentialEnumParameter(key, values, label, default, required)\n    self.add_parameter(field)\n    return field\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType.define_int_parameter","title":"<code>define_int_parameter(key, label=None, required=True)</code>","text":"<p>Create a new int credential parameter and apply it to this credential definition.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>CredentialIntParameter</code> <p>The created int parameter definition.</p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def define_int_parameter(\n    self, key: str, label: Optional[str] = None, required: bool = True\n) -&gt; CredentialIntParameter:\n    \"\"\"\n    Create a new int credential parameter and apply it to this credential definition.\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n\n    Returns:\n         The created int parameter definition.\n    \"\"\"\n    field = CredentialIntParameter(key, label, required)\n    self.add_parameter(field)\n    return field\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType.define_password_parameter","title":"<code>define_password_parameter(key, label=None, required=True)</code>","text":"<p>Create a new password credential parameter and apply it to this credential definition.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>CredentialPasswordParameter</code> <p>The created password parameter definition.</p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def define_password_parameter(\n    self, key: str, label: Optional[str] = None, required: bool = True\n) -&gt; CredentialPasswordParameter:\n    \"\"\"\n    Create a new password credential parameter and apply it to this credential definition.\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n\n    Returns:\n        The created password parameter definition.\n    \"\"\"\n    field = CredentialPasswordParameter(key, label, required)\n    self.add_parameter(field)\n    return field\n</code></pre>"},{"location":"references/python-lib/definition/credential_type/#aria.ops.definition.credential_type.CredentialType.define_string_parameter","title":"<code>define_string_parameter(key, label=None, required=True)</code>","text":"<p>Create a new string credential parameter and apply it to this credential definition.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <p>Returns:</p> Type Description <code>CredentialStringParameter</code> <p>The created string parameter definition.</p> Source code in <code>aria/ops/definition/credential_type.py</code> <pre><code>def define_string_parameter(\n    self, key: str, label: Optional[str] = None, required: bool = True\n) -&gt; CredentialStringParameter:\n    \"\"\"\n    Create a new string credential parameter and apply it to this credential definition.\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n\n    Returns:\n         The created string parameter definition.\n    \"\"\"\n    field = CredentialStringParameter(key, label, required)\n    self.add_parameter(field)\n    return field\n</code></pre>"},{"location":"references/python-lib/definition/exceptions/","title":"Exceptions","text":""},{"location":"references/python-lib/definition/group/","title":"Group","text":""},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.Group","title":"<code>Group</code>","text":"<p>               Bases: <code>GroupType</code></p> Source code in <code>aria/ops/definition/group.py</code> <pre><code>class Group(GroupType):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        instanced: bool = False,\n        instance_required: bool = True,\n    ) -&gt; None:\n        \"\"\"\n        Create a new group that can hold attributes and subgroups.\n\n        Args:\n            key (str): The key for the group.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            instanced (bool): If True, this group can be 'instanced' with a value, so that its subgroups and attributes\n                can appear multiple times, once for each instance value. For example, a group containing\n                metrics for a network interface might be instanced for each discovered interface on the parent object.\n            instance_required (bool): If true, then this group must be created with an instance. Otherwise, it can be\n                created both with and without an instance. Creating an instanced group without an instance can be done\n                to provide a location for aggregate metrics across all instances, for example. This does nothing if\n                'instanced' is False.\n        \"\"\"\n        self.key = validate_key(key, \"Group\")\n        self.label = label\n        if label is None:\n            self.label = key\n        self.instanced = instanced\n        self.instance_required = instance_required\n        super().__init__()\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"key\": self.key,\n            \"label\": self.label,\n            \"instanced\": self.instanced,\n            \"instance_required\": self.instance_required,\n        } | super().to_json()\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.Group.__init__","title":"<code>__init__(key, label=None, instanced=False, instance_required=True)</code>","text":"<p>Create a new group that can hold attributes and subgroups.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the group.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>instanced</code> <code>bool</code> <p>If True, this group can be 'instanced' with a value, so that its subgroups and attributes can appear multiple times, once for each instance value. For example, a group containing metrics for a network interface might be instanced for each discovered interface on the parent object.</p> <code>False</code> <code>instance_required</code> <code>bool</code> <p>If true, then this group must be created with an instance. Otherwise, it can be created both with and without an instance. Creating an instanced group without an instance can be done to provide a location for aggregate metrics across all instances, for example. This does nothing if 'instanced' is False.</p> <code>True</code> Source code in <code>aria/ops/definition/group.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    instanced: bool = False,\n    instance_required: bool = True,\n) -&gt; None:\n    \"\"\"\n    Create a new group that can hold attributes and subgroups.\n\n    Args:\n        key (str): The key for the group.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        instanced (bool): If True, this group can be 'instanced' with a value, so that its subgroups and attributes\n            can appear multiple times, once for each instance value. For example, a group containing\n            metrics for a network interface might be instanced for each discovered interface on the parent object.\n        instance_required (bool): If true, then this group must be created with an instance. Otherwise, it can be\n            created both with and without an instance. Creating an instanced group without an instance can be done\n            to provide a location for aggregate metrics across all instances, for example. This does nothing if\n            'instanced' is False.\n    \"\"\"\n    self.key = validate_key(key, \"Group\")\n    self.label = label\n    if label is None:\n        self.label = key\n    self.instanced = instanced\n    self.instance_required = instance_required\n    super().__init__()\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType","title":"<code>GroupType</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>aria/ops/definition/group.py</code> <pre><code>class GroupType(ABC):\n    # This is only an Abstract Base Class so that it isn't initialized as a standalone object\n    def __init__(self) -&gt; None:\n        self.key: str\n        self.attributes: dict[str, Attribute] = OrderedDict()\n        self.groups: dict[str, Group] = OrderedDict()\n\n    def define_group(self, key: str, label: Optional[str] = None) -&gt; Group:\n        \"\"\"\n        Create a new group that can hold attributes and subgroups.\n\n        Args:\n            key (str): The key for the group.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n\n        Returns:\n             The created group.\n        \"\"\"\n        group = Group(key, label)\n        self.add_group(group)\n        return group\n\n    def define_instanced_group(\n        self, key: str, label: Optional[str] = None, instance_required: bool = True\n    ) -&gt; Group:\n        \"\"\"\n        Create a new group that can hold attributes and subgroups. This group can be 'instanced', with a value, so that\n        its subgroups and attributes can appear multiple times, once for each instance value. For example, a group\n        containing metrics for a network interface might be instanced for each discovered interface on the parent\n        object.\n\n        Args:\n            key (str): The key for the group.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            instance_required (bool): If true, then this group must be created with an instance. Otherwise, it can be\n                created both with and without an instance. Creating an instanced group without an instance can be done\n                to provide a location for aggregate metrics across all instances, for example.\n\n        Returns:\n             The created group.\n        \"\"\"\n        group = Group(key, label, instanced=True, instance_required=instance_required)\n        self.add_group(group)\n        return group\n\n    def add_groups(self, groups: list[Group]) -&gt; None:\n        \"\"\"\n        Adds a list of groups as subgroups of this group.\n\n        Args:\n            groups (list[Group]): A list of groups.\n        \"\"\"\n        for group in groups:\n            self.add_group(group)\n\n    def add_group(self, group: Group) -&gt; None:\n        \"\"\"\n        Adds a group as a subgroup of this group.\n\n        Args:\n            group (Group): A group.\n        \"\"\"\n        key = group.key\n        if key in self.groups:\n            raise DuplicateKeyException(\n                f\"Group with key {key} already exists in {type(self)} {self.key}.\"\n            )\n        self.groups[key] = group\n\n    def define_metric(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        unit: Optional[Unit] = None,\n        is_rate: bool = False,\n        is_discrete: bool = False,\n        is_kpi: bool = False,\n        is_impact: bool = False,\n        is_key_attribute: bool = False,\n    ) -&gt; MetricAttribute:\n        \"\"\"\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the\n                units in a consistent manner, and perform conversions when appropriate.\n            is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n                will be set automatically. Otherwise, defaults to False.\n            is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than\n                continuous (floating point)\n            is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n                'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n            is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could\n                be a proxy to a root cause, but not the root cause itself.\n            is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n        \"\"\"\n        metric = MetricAttribute(\n            key,\n            label,\n            unit,\n            is_rate,\n            is_discrete,\n            is_kpi,\n            is_impact,\n            is_key_attribute,\n            dashboard_order=len(self.attributes),\n        )\n        self.add_attribute(metric)\n        return metric\n\n    def define_string_property(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        unit: Optional[Unit] = None,\n        is_rate: bool = False,\n        is_discrete: bool = False,\n        is_kpi: bool = False,\n        is_impact: bool = False,\n        is_key_attribute: bool = False,\n    ) -&gt; PropertyAttribute:\n        \"\"\"\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the\n                units in a consistent manner, and perform conversions when appropriate.\n            is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n                will be set automatically. Otherwise, defaults to False.\n            is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than\n                continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always\n                be set to True.\n            is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n                'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n            is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could\n                be a proxy to a root cause, but not the root cause itself.\n            is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n        \"\"\"\n        _property = PropertyAttribute(\n            key,\n            label,\n            True,\n            unit,\n            is_rate,\n            is_discrete,\n            is_kpi,\n            is_impact,\n            is_key_attribute,\n            dashboard_order=len(self.attributes),\n        )\n        self.add_attribute(_property)\n        return _property\n\n    def define_numeric_property(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        unit: Optional[Unit] = None,\n        is_rate: bool = False,\n        is_discrete: bool = False,\n        is_kpi: bool = False,\n        is_impact: bool = False,\n        is_key_attribute: bool = False,\n    ) -&gt; PropertyAttribute:\n        \"\"\"\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the\n                units in a consistent manner, and perform conversions when appropriate.\n            is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n                will be set automatically. Otherwise, defaults to False.\n            is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than\n                continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always\n                be set to True.\n            is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n                'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n            is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could\n                be a proxy to a root cause, but not the root cause itself.\n            is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n        \"\"\"\n        _property = PropertyAttribute(\n            key,\n            label,\n            False,\n            unit,\n            is_rate,\n            is_discrete,\n            is_kpi,\n            is_impact,\n            is_key_attribute,\n            dashboard_order=len(self.attributes),\n        )\n        self.add_attribute(_property)\n        return _property\n\n    def add_attributes(self, attributes: list[Attribute]) -&gt; None:\n        \"\"\"\n        Adds a list of attributes to this group.\n\n        Args:\n            attributes (list[Attribute]): A list of attributes (metric or property definitions).\n        \"\"\"\n        for attribute in attributes:\n            self.add_attribute(attribute)\n\n    def add_attribute(self, attribute: Attribute) -&gt; None:\n        \"\"\"\n        Adds an attribute to this group.\n\n        Args:\n            attribute (Attribute): An attribute (metric or property definition).\n        \"\"\"\n        key = attribute.key\n        if key in self.attributes:\n            raise DuplicateKeyException(\n                f\"Attribute with key {key} already exists in {type(self)} {self.key}.\"\n            )\n\n        self.attributes[key] = attribute\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"attributes\": [\n                attribute.to_json() for attribute in self.attributes.values()\n            ],\n            \"groups\": [group.to_json() for group in self.groups.values()],\n        }\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.add_attribute","title":"<code>add_attribute(attribute)</code>","text":"<p>Adds an attribute to this group.</p> <p>Parameters:</p> Name Type Description Default <code>attribute</code> <code>Attribute</code> <p>An attribute (metric or property definition).</p> required Source code in <code>aria/ops/definition/group.py</code> <pre><code>def add_attribute(self, attribute: Attribute) -&gt; None:\n    \"\"\"\n    Adds an attribute to this group.\n\n    Args:\n        attribute (Attribute): An attribute (metric or property definition).\n    \"\"\"\n    key = attribute.key\n    if key in self.attributes:\n        raise DuplicateKeyException(\n            f\"Attribute with key {key} already exists in {type(self)} {self.key}.\"\n        )\n\n    self.attributes[key] = attribute\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.add_attributes","title":"<code>add_attributes(attributes)</code>","text":"<p>Adds a list of attributes to this group.</p> <p>Parameters:</p> Name Type Description Default <code>attributes</code> <code>list[Attribute]</code> <p>A list of attributes (metric or property definitions).</p> required Source code in <code>aria/ops/definition/group.py</code> <pre><code>def add_attributes(self, attributes: list[Attribute]) -&gt; None:\n    \"\"\"\n    Adds a list of attributes to this group.\n\n    Args:\n        attributes (list[Attribute]): A list of attributes (metric or property definitions).\n    \"\"\"\n    for attribute in attributes:\n        self.add_attribute(attribute)\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.add_group","title":"<code>add_group(group)</code>","text":"<p>Adds a group as a subgroup of this group.</p> <p>Parameters:</p> Name Type Description Default <code>group</code> <code>Group</code> <p>A group.</p> required Source code in <code>aria/ops/definition/group.py</code> <pre><code>def add_group(self, group: Group) -&gt; None:\n    \"\"\"\n    Adds a group as a subgroup of this group.\n\n    Args:\n        group (Group): A group.\n    \"\"\"\n    key = group.key\n    if key in self.groups:\n        raise DuplicateKeyException(\n            f\"Group with key {key} already exists in {type(self)} {self.key}.\"\n        )\n    self.groups[key] = group\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.add_groups","title":"<code>add_groups(groups)</code>","text":"<p>Adds a list of groups as subgroups of this group.</p> <p>Parameters:</p> Name Type Description Default <code>groups</code> <code>list[Group]</code> <p>A list of groups.</p> required Source code in <code>aria/ops/definition/group.py</code> <pre><code>def add_groups(self, groups: list[Group]) -&gt; None:\n    \"\"\"\n    Adds a list of groups as subgroups of this group.\n\n    Args:\n        groups (list[Group]): A list of groups.\n    \"\"\"\n    for group in groups:\n        self.add_group(group)\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.define_group","title":"<code>define_group(key, label=None)</code>","text":"<p>Create a new group that can hold attributes and subgroups.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the group.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <p>Returns:</p> Type Description <code>Group</code> <p>The created group.</p> Source code in <code>aria/ops/definition/group.py</code> <pre><code>def define_group(self, key: str, label: Optional[str] = None) -&gt; Group:\n    \"\"\"\n    Create a new group that can hold attributes and subgroups.\n\n    Args:\n        key (str): The key for the group.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n\n    Returns:\n         The created group.\n    \"\"\"\n    group = Group(key, label)\n    self.add_group(group)\n    return group\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.define_instanced_group","title":"<code>define_instanced_group(key, label=None, instance_required=True)</code>","text":"<p>Create a new group that can hold attributes and subgroups. This group can be 'instanced', with a value, so that its subgroups and attributes can appear multiple times, once for each instance value. For example, a group containing metrics for a network interface might be instanced for each discovered interface on the parent object.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key for the group.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>instance_required</code> <code>bool</code> <p>If true, then this group must be created with an instance. Otherwise, it can be created both with and without an instance. Creating an instanced group without an instance can be done to provide a location for aggregate metrics across all instances, for example.</p> <code>True</code> <p>Returns:</p> Type Description <code>Group</code> <p>The created group.</p> Source code in <code>aria/ops/definition/group.py</code> <pre><code>def define_instanced_group(\n    self, key: str, label: Optional[str] = None, instance_required: bool = True\n) -&gt; Group:\n    \"\"\"\n    Create a new group that can hold attributes and subgroups. This group can be 'instanced', with a value, so that\n    its subgroups and attributes can appear multiple times, once for each instance value. For example, a group\n    containing metrics for a network interface might be instanced for each discovered interface on the parent\n    object.\n\n    Args:\n        key (str): The key for the group.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        instance_required (bool): If true, then this group must be created with an instance. Otherwise, it can be\n            created both with and without an instance. Creating an instanced group without an instance can be done\n            to provide a location for aggregate metrics across all instances, for example.\n\n    Returns:\n         The created group.\n    \"\"\"\n    group = Group(key, label, instanced=True, instance_required=instance_required)\n    self.add_group(group)\n    return group\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.define_metric","title":"<code>define_metric(key, label=None, unit=None, is_rate=False, is_discrete=False, is_kpi=False, is_impact=False, is_key_attribute=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>unit</code> <code>Optional[Unit]</code> <p>Specifies what unit this metric is returned in. This allows the UI to display the units in a consistent manner, and perform conversions when appropriate.</p> <code>None</code> <code>is_rate</code> <code>bool</code> <p>Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this will be set automatically. Otherwise, defaults to False.</p> <code>False</code> <code>is_discrete</code> <code>bool</code> <p>Declares that this attribute's range of values is discrete (integer) rather than continuous (floating point)</p> <code>False</code> <code>is_kpi</code> <code>bool</code> <p>If set, threshold breaches for this metric will be used in the calculation of the object's 'Self - Health Score' metric, which can affect the 'Anomalies' Badge.</p> <code>False</code> <code>is_impact</code> <code>bool</code> <p>If set, this attribute will never be the 'root cause' of an issue. For example, it could be a proxy to a root cause, but not the root cause itself.</p> <code>False</code> <code>is_key_attribute</code> <code>bool</code> <p>True if the attribute should be shown in some object summary widgets in the UI.</p> <code>False</code> Source code in <code>aria/ops/definition/group.py</code> <pre><code>def define_metric(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    unit: Optional[Unit] = None,\n    is_rate: bool = False,\n    is_discrete: bool = False,\n    is_kpi: bool = False,\n    is_impact: bool = False,\n    is_key_attribute: bool = False,\n) -&gt; MetricAttribute:\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the\n            units in a consistent manner, and perform conversions when appropriate.\n        is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n            will be set automatically. Otherwise, defaults to False.\n        is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than\n            continuous (floating point)\n        is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n            'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n        is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could\n            be a proxy to a root cause, but not the root cause itself.\n        is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n    \"\"\"\n    metric = MetricAttribute(\n        key,\n        label,\n        unit,\n        is_rate,\n        is_discrete,\n        is_kpi,\n        is_impact,\n        is_key_attribute,\n        dashboard_order=len(self.attributes),\n    )\n    self.add_attribute(metric)\n    return metric\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.define_numeric_property","title":"<code>define_numeric_property(key, label=None, unit=None, is_rate=False, is_discrete=False, is_kpi=False, is_impact=False, is_key_attribute=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>unit</code> <code>Optional[Unit]</code> <p>Specifies what unit this metric is returned in. This allows the UI to display the units in a consistent manner, and perform conversions when appropriate.</p> <code>None</code> <code>is_rate</code> <code>bool</code> <p>Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this will be set automatically. Otherwise, defaults to False.</p> <code>False</code> <code>is_discrete</code> <code>bool</code> <p>Declares that this attribute's range of values is discrete (integer) rather than continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always be set to True.</p> <code>False</code> <code>is_kpi</code> <code>bool</code> <p>If set, threshold breaches for this metric will be used in the calculation of the object's 'Self - Health Score' metric, which can affect the 'Anomalies' Badge.</p> <code>False</code> <code>is_impact</code> <code>bool</code> <p>If set, this attribute will never be the 'root cause' of an issue. For example, it could be a proxy to a root cause, but not the root cause itself.</p> <code>False</code> <code>is_key_attribute</code> <code>bool</code> <p>True if the attribute should be shown in some object summary widgets in the UI.</p> <code>False</code> Source code in <code>aria/ops/definition/group.py</code> <pre><code>def define_numeric_property(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    unit: Optional[Unit] = None,\n    is_rate: bool = False,\n    is_discrete: bool = False,\n    is_kpi: bool = False,\n    is_impact: bool = False,\n    is_key_attribute: bool = False,\n) -&gt; PropertyAttribute:\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the\n            units in a consistent manner, and perform conversions when appropriate.\n        is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n            will be set automatically. Otherwise, defaults to False.\n        is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than\n            continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always\n            be set to True.\n        is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n            'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n        is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could\n            be a proxy to a root cause, but not the root cause itself.\n        is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n    \"\"\"\n    _property = PropertyAttribute(\n        key,\n        label,\n        False,\n        unit,\n        is_rate,\n        is_discrete,\n        is_kpi,\n        is_impact,\n        is_key_attribute,\n        dashboard_order=len(self.attributes),\n    )\n    self.add_attribute(_property)\n    return _property\n</code></pre>"},{"location":"references/python-lib/definition/group/#aria.ops.definition.group.GroupType.define_string_property","title":"<code>define_string_property(key, label=None, unit=None, is_rate=False, is_discrete=False, is_kpi=False, is_impact=False, is_key_attribute=False)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>unit</code> <code>Optional[Unit]</code> <p>Specifies what unit this metric is returned in. This allows the UI to display the units in a consistent manner, and perform conversions when appropriate.</p> <code>None</code> <code>is_rate</code> <code>bool</code> <p>Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this will be set automatically. Otherwise, defaults to False.</p> <code>False</code> <code>is_discrete</code> <code>bool</code> <p>Declares that this attribute's range of values is discrete (integer) rather than continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always be set to True.</p> <code>False</code> <code>is_kpi</code> <code>bool</code> <p>If set, threshold breaches for this metric will be used in the calculation of the object's 'Self - Health Score' metric, which can affect the 'Anomalies' Badge.</p> <code>False</code> <code>is_impact</code> <code>bool</code> <p>If set, this attribute will never be the 'root cause' of an issue. For example, it could be a proxy to a root cause, but not the root cause itself.</p> <code>False</code> <code>is_key_attribute</code> <code>bool</code> <p>True if the attribute should be shown in some object summary widgets in the UI.</p> <code>False</code> Source code in <code>aria/ops/definition/group.py</code> <pre><code>def define_string_property(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    unit: Optional[Unit] = None,\n    is_rate: bool = False,\n    is_discrete: bool = False,\n    is_kpi: bool = False,\n    is_impact: bool = False,\n    is_key_attribute: bool = False,\n) -&gt; PropertyAttribute:\n    \"\"\"\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        unit (Optional[Unit]): Specifies what unit this metric is returned in. This allows the UI to display the\n            units in a consistent manner, and perform conversions when appropriate.\n        is_rate (bool): Declares this attribute as a rate (e.g., kilobytes per second). If a unit is specified, this\n            will be set automatically. Otherwise, defaults to False.\n        is_discrete (bool): Declares that this attribute's range of values is discrete (integer) rather than\n            continuous (floating point). Defaults to False, unless 'is_string' is set, in which case it will always\n            be set to True.\n        is_kpi (bool): If set, threshold breaches for this metric will be used in the calculation of the object's\n            'Self - Health Score' metric, which can affect the 'Anomalies' Badge.\n        is_impact (bool): If set, this attribute will never be the 'root cause' of an issue. For example, it could\n            be a proxy to a root cause, but not the root cause itself.\n        is_key_attribute (bool): True if the attribute should be shown in some object summary widgets in the UI.\n    \"\"\"\n    _property = PropertyAttribute(\n        key,\n        label,\n        True,\n        unit,\n        is_rate,\n        is_discrete,\n        is_kpi,\n        is_impact,\n        is_key_attribute,\n        dashboard_order=len(self.attributes),\n    )\n    self.add_attribute(_property)\n    return _property\n</code></pre>"},{"location":"references/python-lib/definition/object_type/","title":"Object type","text":""},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType","title":"<code>ObjectType</code>","text":"<p>               Bases: <code>GroupType</code></p> Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>class ObjectType(GroupType):  # type: ignore\n    def __init__(self, key: str, label: Optional[str] = None):\n        \"\"\"\n        Create a new object type definition\n\n        Args:\n            key (str): The key of the object type\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        \"\"\"\n        self.key = validate_key(key, \"Object type\")\n        self.label = label\n        if label is None:\n            self.label = key\n        self.identifiers: dict = OrderedDict()\n        super().__init__()\n\n    def define_string_identifier(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        required: bool = True,\n        is_part_of_uniqueness: bool = True,\n        default: Optional[str] = None,\n    ) -&gt; ObjectType:\n        \"\"\"\n        Create a new string identifier and apply it to this object type definition.\n        All identifiers marked as 'part of uniqueness' are used to determine object identification. If none exist, the\n        object name will be used for identification.\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optinal[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if this parameter is required. Defaults to True.\n            is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.\n            default (Optional[str]): The default value of the parameter.\n\n        Returns:\n             The created String Identifier.\n        \"\"\"\n        parameter = StringParameter(\n            key,\n            label,\n            required=required,\n            advanced=not is_part_of_uniqueness,\n            default=default,\n            display_order=len(self.identifiers),\n        )\n        self.add_identifier(parameter)\n        return self\n\n    def define_int_identifier(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        required: bool = True,\n        is_part_of_uniqueness: bool = True,\n        default: Optional[int] = None,\n    ) -&gt; ObjectType:\n        \"\"\"\n        Create a new int identifier and apply it to this object type definition.\n        All identifiers marked 'part of uniqueness' are used to determine object identification. If none exist, the\n        object name will be used for identification.\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if this parameter is required. Defaults to True.\n            is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.\n            default ([Optional[int]): The default value of the parameter.\n\n        Returns:\n             The created Int Identifier.\n        \"\"\"\n        parameter = IntParameter(\n            key,\n            label,\n            required=required,\n            advanced=not is_part_of_uniqueness,\n            default=default,\n            display_order=len(self.identifiers),\n        )\n        self.add_identifier(parameter)\n        return self\n\n    def define_enum_identifier(\n        self,\n        key: str,\n        values: list[Union[str, tuple[str, str]]],\n        label: Optional[str] = None,\n        required: bool = True,\n        is_part_of_uniqueness: bool = True,\n        default: Optional[str] = None,\n    ) -&gt; ObjectType:\n        \"\"\"\n        Create a new enum identifier and apply it to this object type definition.\n        All identifiers marked as 'part of uniqueness' are used to determine object identification. If none exist, the\n        object name will be used for identification.\n\n        Args:\n            key (str): Used to identify the parameter.\n            values (list[Union[str, tuple[str, str]]]): An array containing all enum values. If 'default' is specified and not part of this array, it\n            will be added as an additional enum value (values are case-sensitive). Enum values are not localizable.\n            label [Optinal[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            required (bool): True if this parameter is required. Defaults to True.\n            is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.\n            default (Optional[str]): The default value of the parameter.\n\n        Returns:\n            The created Enum Identifier.\n        \"\"\"\n        parameter = EnumParameter(\n            key,\n            values,\n            label,\n            required=required,\n            advanced=not is_part_of_uniqueness,\n            default=default,\n            display_order=len(self.identifiers),\n        )\n        self.add_identifier(parameter)\n        return self\n\n    def add_identifiers(self, identifiers: list[Parameter]) -&gt; None:\n        \"\"\"\n\n        Args:\n            identifiers: A list of identifiers to add to this object type\n        \"\"\"\n        for identifier in identifiers:\n            self.add_identifier(identifier)\n\n    def add_identifier(self, identifier: Parameter) -&gt; None:\n        \"\"\"\n        Add an identifier to this object type. All 'identifying' identifiers are used to determine object uniqueness.\n        If no 'identifying' identifiers exist, they object name will be used for uniqueness.\n\n        Args:\n            identifier (Parameter): The identifier to add to the object type definition.\n        \"\"\"\n        key = identifier.key\n        if key in self.identifiers:\n            raise DuplicateKeyException(\n                f\"Identifier with key {key} already exists in object type {self.key}.\"\n            )\n        self.identifiers[key] = identifier\n\n    def to_json(self) -&gt; dict:\n        return {  # type: ignore\n            \"key\": self.key,\n            \"label\": self.label,\n            \"identifiers\": [\n                identifier.to_json() for identifier in self.identifiers.values()\n            ],\n        } | super().to_json()\n</code></pre>"},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType.__init__","title":"<code>__init__(key, label=None)</code>","text":"<p>Create a new object type definition</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>The key of the object type</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>def __init__(self, key: str, label: Optional[str] = None):\n    \"\"\"\n    Create a new object type definition\n\n    Args:\n        key (str): The key of the object type\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n    \"\"\"\n    self.key = validate_key(key, \"Object type\")\n    self.label = label\n    if label is None:\n        self.label = key\n    self.identifiers: dict = OrderedDict()\n    super().__init__()\n</code></pre>"},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType.add_identifier","title":"<code>add_identifier(identifier)</code>","text":"<p>Add an identifier to this object type. All 'identifying' identifiers are used to determine object uniqueness. If no 'identifying' identifiers exist, they object name will be used for uniqueness.</p> <p>Parameters:</p> Name Type Description Default <code>identifier</code> <code>Parameter</code> <p>The identifier to add to the object type definition.</p> required Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>def add_identifier(self, identifier: Parameter) -&gt; None:\n    \"\"\"\n    Add an identifier to this object type. All 'identifying' identifiers are used to determine object uniqueness.\n    If no 'identifying' identifiers exist, they object name will be used for uniqueness.\n\n    Args:\n        identifier (Parameter): The identifier to add to the object type definition.\n    \"\"\"\n    key = identifier.key\n    if key in self.identifiers:\n        raise DuplicateKeyException(\n            f\"Identifier with key {key} already exists in object type {self.key}.\"\n        )\n    self.identifiers[key] = identifier\n</code></pre>"},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType.add_identifiers","title":"<code>add_identifiers(identifiers)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>identifiers</code> <code>list[Parameter]</code> <p>A list of identifiers to add to this object type</p> required Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>def add_identifiers(self, identifiers: list[Parameter]) -&gt; None:\n    \"\"\"\n\n    Args:\n        identifiers: A list of identifiers to add to this object type\n    \"\"\"\n    for identifier in identifiers:\n        self.add_identifier(identifier)\n</code></pre>"},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType.define_enum_identifier","title":"<code>define_enum_identifier(key, values, label=None, required=True, is_part_of_uniqueness=True, default=None)</code>","text":"<p>Create a new enum identifier and apply it to this object type definition. All identifiers marked as 'part of uniqueness' are used to determine object identification. If none exist, the object name will be used for identification.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>values</code> <code>list[Union[str, tuple[str, str]]]</code> <p>An array containing all enum values. If 'default' is specified and not part of this array, it</p> required <code>label</code> <code>[Optinal[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if this parameter is required. Defaults to True.</p> <code>True</code> <code>is_part_of_uniqueness</code> <code>bool</code> <p>True if the parameter should be used for object identification. Defaults to True.</p> <code>True</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the parameter.</p> <code>None</code> <p>Returns:</p> Type Description <code>ObjectType</code> <p>The created Enum Identifier.</p> Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>def define_enum_identifier(\n    self,\n    key: str,\n    values: list[Union[str, tuple[str, str]]],\n    label: Optional[str] = None,\n    required: bool = True,\n    is_part_of_uniqueness: bool = True,\n    default: Optional[str] = None,\n) -&gt; ObjectType:\n    \"\"\"\n    Create a new enum identifier and apply it to this object type definition.\n    All identifiers marked as 'part of uniqueness' are used to determine object identification. If none exist, the\n    object name will be used for identification.\n\n    Args:\n        key (str): Used to identify the parameter.\n        values (list[Union[str, tuple[str, str]]]): An array containing all enum values. If 'default' is specified and not part of this array, it\n        will be added as an additional enum value (values are case-sensitive). Enum values are not localizable.\n        label [Optinal[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if this parameter is required. Defaults to True.\n        is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.\n        default (Optional[str]): The default value of the parameter.\n\n    Returns:\n        The created Enum Identifier.\n    \"\"\"\n    parameter = EnumParameter(\n        key,\n        values,\n        label,\n        required=required,\n        advanced=not is_part_of_uniqueness,\n        default=default,\n        display_order=len(self.identifiers),\n    )\n    self.add_identifier(parameter)\n    return self\n</code></pre>"},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType.define_int_identifier","title":"<code>define_int_identifier(key, label=None, required=True, is_part_of_uniqueness=True, default=None)</code>","text":"<p>Create a new int identifier and apply it to this object type definition. All identifiers marked 'part of uniqueness' are used to determine object identification. If none exist, the object name will be used for identification. Args:     key (str): Used to identify the parameter.     label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.     required (bool): True if this parameter is required. Defaults to True.     is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.     default ([Optional[int]): The default value of the parameter.</p> <p>Returns:</p> Type Description <code>ObjectType</code> <p>The created Int Identifier.</p> Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>def define_int_identifier(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    required: bool = True,\n    is_part_of_uniqueness: bool = True,\n    default: Optional[int] = None,\n) -&gt; ObjectType:\n    \"\"\"\n    Create a new int identifier and apply it to this object type definition.\n    All identifiers marked 'part of uniqueness' are used to determine object identification. If none exist, the\n    object name will be used for identification.\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if this parameter is required. Defaults to True.\n        is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.\n        default ([Optional[int]): The default value of the parameter.\n\n    Returns:\n         The created Int Identifier.\n    \"\"\"\n    parameter = IntParameter(\n        key,\n        label,\n        required=required,\n        advanced=not is_part_of_uniqueness,\n        default=default,\n        display_order=len(self.identifiers),\n    )\n    self.add_identifier(parameter)\n    return self\n</code></pre>"},{"location":"references/python-lib/definition/object_type/#aria.ops.definition.object_type.ObjectType.define_string_identifier","title":"<code>define_string_identifier(key, label=None, required=True, is_part_of_uniqueness=True, default=None)</code>","text":"<p>Create a new string identifier and apply it to this object type definition. All identifiers marked as 'part of uniqueness' are used to determine object identification. If none exist, the object name will be used for identification.</p> <p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optinal[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if this parameter is required. Defaults to True.</p> <code>True</code> <code>is_part_of_uniqueness</code> <code>bool</code> <p>True if the parameter should be used for object identification. Defaults to True.</p> <code>True</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the parameter.</p> <code>None</code> <p>Returns:</p> Type Description <code>ObjectType</code> <p>The created String Identifier.</p> Source code in <code>aria/ops/definition/object_type.py</code> <pre><code>def define_string_identifier(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    required: bool = True,\n    is_part_of_uniqueness: bool = True,\n    default: Optional[str] = None,\n) -&gt; ObjectType:\n    \"\"\"\n    Create a new string identifier and apply it to this object type definition.\n    All identifiers marked as 'part of uniqueness' are used to determine object identification. If none exist, the\n    object name will be used for identification.\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optinal[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        required (bool): True if this parameter is required. Defaults to True.\n        is_part_of_uniqueness (bool): True if the parameter should be used for object identification. Defaults to True.\n        default (Optional[str]): The default value of the parameter.\n\n    Returns:\n         The created String Identifier.\n    \"\"\"\n    parameter = StringParameter(\n        key,\n        label,\n        required=required,\n        advanced=not is_part_of_uniqueness,\n        default=default,\n        display_order=len(self.identifiers),\n    )\n    self.add_identifier(parameter)\n    return self\n</code></pre>"},{"location":"references/python-lib/definition/parameter/","title":"Parameter","text":""},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.EnumParameter","title":"<code>EnumParameter</code>","text":"<p>               Bases: <code>Parameter</code></p> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>class EnumParameter(Parameter):\n    def __init__(\n        self,\n        key: str,\n        values: list[Union[str, tuple[str, str]]],\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[str] = None,\n        required: bool = True,\n        advanced: bool = False,\n        display_order: int = 0,\n    ) -&gt; None:\n        \"\"\"\n\n        Args:\n            key (str): Used to identify the parameter.\n            values (list[Union[str, tuple[str, str]]]): An array containing all enum values. If 'default' is specified\n                and not part of this array, it will be added as an additional enum value. Enum values are not\n                localizable.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the\n                VMware Aria Operations UI.\n            default (Optional[str]): The default value of the parameter.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n            display_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(\n            key, label, description, default, required, advanced, display_order\n        )\n        if len(values) &gt; len(set(values)):\n            raise DuplicateKeyException(\n                f\"Duplicate enum value in parameter {key}: {values}.\"\n            )\n\n        self.values = values\n        self.default = default\n\n        if (\n            default not in [v[0] if isinstance(v, tuple) else v for v in self.values]\n            and default is not None\n        ):\n            self.values.append((default, default))\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"string\",\n            \"enum\": True,\n            \"enum_values\": [\n                {\n                    \"key\": str(value[0]) if isinstance(value, tuple) else value,\n                    \"label\": str(value[1]) if isinstance(value, tuple) else value,\n                    \"display_order\": display_order,\n                }\n                for display_order, value in enumerate(self.values)\n            ],\n            \"default\": self.default,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.EnumParameter.__init__","title":"<code>__init__(key, values, label=None, description=None, default=None, required=True, advanced=False, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>values</code> <code>list[Union[str, tuple[str, str]]]</code> <p>An array containing all enum values. If 'default' is specified and not part of this array, it will be added as an additional enum value. Enum values are not localizable.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the parameter.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    values: list[Union[str, tuple[str, str]]],\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[str] = None,\n    required: bool = True,\n    advanced: bool = False,\n    display_order: int = 0,\n) -&gt; None:\n    \"\"\"\n\n    Args:\n        key (str): Used to identify the parameter.\n        values (list[Union[str, tuple[str, str]]]): An array containing all enum values. If 'default' is specified\n            and not part of this array, it will be added as an additional enum value. Enum values are not\n            localizable.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the\n            VMware Aria Operations UI.\n        default (Optional[str]): The default value of the parameter.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(\n        key, label, description, default, required, advanced, display_order\n    )\n    if len(values) &gt; len(set(values)):\n        raise DuplicateKeyException(\n            f\"Duplicate enum value in parameter {key}: {values}.\"\n        )\n\n    self.values = values\n    self.default = default\n\n    if (\n        default not in [v[0] if isinstance(v, tuple) else v for v in self.values]\n        and default is not None\n    ):\n        self.values.append((default, default))\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.IntParameter","title":"<code>IntParameter</code>","text":"<p>               Bases: <code>Parameter</code></p> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>class IntParameter(Parameter):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[int] = None,\n        required: bool = True,\n        advanced: bool = False,\n        display_order: int = 0,\n    ) -&gt; None:\n        \"\"\"\n\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n            default (Optional[int]): The default value of the parameter.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n            display_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(\n            key, label, description, default, required, advanced, display_order\n        )\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"integer\",\n            \"default\": str(self.default) if self.default is not None else None,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.IntParameter.__init__","title":"<code>__init__(key, label=None, description=None, default=None, required=True, advanced=False, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[int]</code> <p>The default value of the parameter.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[int] = None,\n    required: bool = True,\n    advanced: bool = False,\n    display_order: int = 0,\n) -&gt; None:\n    \"\"\"\n\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n        default (Optional[int]): The default value of the parameter.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(\n        key, label, description, default, required, advanced, display_order\n    )\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.Parameter","title":"<code>Parameter</code>","text":"<p>               Bases: <code>ABC</code></p> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>class Parameter(ABC):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[Union[str, int]] = None,\n        required: bool = True,\n        advanced: bool = False,\n        display_order: int = 0,\n    ) -&gt; None:\n        \"\"\"\n        Args:\n            key (str): Used to identify the parameter.\n            label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n            description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n            default (Optional[Union[str, int]]): The default value of the parameter.\n            required (bool): True if user is required to provide this parameter. Defaults to True.\n            advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n            display_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        self.key = validate_key(key, \"Parameter/Identifier\")\n        self.label = label\n        if label is None:\n            self.label = key\n        self.description = description\n        self.default = default\n        self.required = required\n        self.advanced = advanced\n        self.display_order = display_order\n\n    def to_json(self) -&gt; dict:\n        return {\n            \"key\": self.key,\n            \"label\": self.label,\n            \"description\": self.description,\n            \"required\": self.required,\n            \"ident_type\": 1 if not self.advanced else 2,\n            \"enum\": False,\n            \"display_order\": self.display_order,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.Parameter.__init__","title":"<code>__init__(key, label=None, description=None, default=None, required=True, advanced=False, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[Union[str, int]]</code> <p>The default value of the parameter.</p> <code>None</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[Union[str, int]] = None,\n    required: bool = True,\n    advanced: bool = False,\n    display_order: int = 0,\n) -&gt; None:\n    \"\"\"\n    Args:\n        key (str): Used to identify the parameter.\n        label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n        description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n        default (Optional[Union[str, int]]): The default value of the parameter.\n        required (bool): True if user is required to provide this parameter. Defaults to True.\n        advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n        display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    self.key = validate_key(key, \"Parameter/Identifier\")\n    self.label = label\n    if label is None:\n        self.label = key\n    self.description = description\n    self.default = default\n    self.required = required\n    self.advanced = advanced\n    self.display_order = display_order\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.StringParameter","title":"<code>StringParameter</code>","text":"<p>               Bases: <code>Parameter</code></p> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>class StringParameter(Parameter):\n    def __init__(\n        self,\n        key: str,\n        label: Optional[str] = None,\n        description: Optional[str] = None,\n        default: Optional[str] = None,\n        max_length: int = 512,\n        required: bool = True,\n        advanced: bool = False,\n        display_order: int = 0,\n    ) -&gt; None:\n        \"\"\"\n        Args:\n           key (str): Used to identify the parameter.\n           label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n           description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n           default (Optional[str]): The default value of the parameter.\n           max_length (int): The max length of the parameter value. Defaults to 512.\n           required (bool): True if user is required to provide this parameter. Defaults to True.\n           advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n           display_order (int): Determines the order parameters will be displayed in the UI.\n        \"\"\"\n        super().__init__(\n            key, label, description, default, required, advanced, display_order\n        )\n        self.max_length = max_length\n\n    def to_json(self) -&gt; dict:\n        return super().to_json() | {\n            \"type\": \"string\",\n            \"length\": int(self.max_length),\n            \"default\": self.default,\n        }\n</code></pre>"},{"location":"references/python-lib/definition/parameter/#aria.ops.definition.parameter.StringParameter.__init__","title":"<code>__init__(key, label=None, description=None, default=None, max_length=512, required=True, advanced=False, display_order=0)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>key</code> <code>str</code> <p>Used to identify the parameter.</p> required <code>label</code> <code>Optional[str]</code> <p>Label that is displayed in the VMware Aria Operations UI. Defaults to the key.</p> <code>None</code> <code>description</code> <code>Optional[str]</code> <p>More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.</p> <code>None</code> <code>default</code> <code>Optional[str]</code> <p>The default value of the parameter.</p> <code>None</code> <code>max_length</code> <code>int</code> <p>The max length of the parameter value. Defaults to 512.</p> <code>512</code> <code>required</code> <code>bool</code> <p>True if user is required to provide this parameter. Defaults to True.</p> <code>True</code> <code>advanced</code> <code>bool</code> <p>True if the parameter should be collapsed by default. Defaults to False.</p> <code>False</code> <code>display_order</code> <code>int</code> <p>Determines the order parameters will be displayed in the UI.</p> <code>0</code> Source code in <code>aria/ops/definition/parameter.py</code> <pre><code>def __init__(\n    self,\n    key: str,\n    label: Optional[str] = None,\n    description: Optional[str] = None,\n    default: Optional[str] = None,\n    max_length: int = 512,\n    required: bool = True,\n    advanced: bool = False,\n    display_order: int = 0,\n) -&gt; None:\n    \"\"\"\n    Args:\n       key (str): Used to identify the parameter.\n       label (Optional[str]): Label that is displayed in the VMware Aria Operations UI. Defaults to the key.\n       description (Optional[str]): More in-depth explanation of the parameter. Displayed as a tooltip in the VMware Aria Operations UI.\n       default (Optional[str]): The default value of the parameter.\n       max_length (int): The max length of the parameter value. Defaults to 512.\n       required (bool): True if user is required to provide this parameter. Defaults to True.\n       advanced (bool): True if the parameter should be collapsed by default. Defaults to False.\n       display_order (int): Determines the order parameters will be displayed in the UI.\n    \"\"\"\n    super().__init__(\n        key, label, description, default, required, advanced, display_order\n    )\n    self.max_length = max_length\n</code></pre>"},{"location":"references/python-lib/definition/units/","title":"Units","text":""},{"location":"troubleshooting_and_faq/","title":"Contents","text":"<p>Tip</p> <p>Use the search bar above to help you find what you want faster.</p> <ul> <li>mp-build: Pack file building errors relating to the \"<code>Unable to build pak file</code>\" error from <code>mp-build</code>.</li> <li>mp-test: Common collection errors troubleshooting steps, and other collection-related questions.</li> <li>Container Registries: Container registry-related questions, such as credentials and setting up registries.</li> <li>Docker: Common Docker related troubleshooting steps.</li> <li>Logs: Adapter and Server logs, logs storage, log levels, and more logs-related questions.</li> <li>Other: Capacity models and Java SDK-related questions</li> </ul> <p>Info</p> <p>If none of the sections resolve your issue, please open a <code>Q &amp; A</code> discussion on the GitHub Discussions page describing your issue. You can also submit a new bug report issue here, but we recommend opening a discussion first.</p>"},{"location":"troubleshooting_and_faq/build/","title":"mp-build","text":""},{"location":"troubleshooting_and_faq/build/#mp-build-returns-unable-to-build-pak-file","title":"mp-build returns 'Unable to build pak file'","text":"<p>In most cases, this error indicates issues with building the container image. The most probable causes are:</p> <ol> <li>Unknown Instruction :</li> </ol> <p><pre><code>mp-build\nBuilding adapter [Finished]\nUnable to build pak file\nERROR: Unable to build Docker file at /Users/user/code/aria_ops/management-packs/test:\n {'message': 'dockerfile parse error line 7: unknown instruction: COP'}\n</code></pre> 2. A command  inside the Dockerfile failed:</p> <p><pre><code>mp-build\nBuilding adapter [Finished]\nUnable to build pak file\nERROR: Unable to build Docker file at /Users/user/code/management-packs/test:\n The command '/bin/sh -c pip3 install -r adapter_requirements.txt --upgrade' returned a non-zero code: 1\n</code></pre> The solution for case 1 to fix the typo/command by editing the Dockerfile. For case 2, however, the solution might not be evident at first sight. Since the error comes from building the image itself, we can run <code>docker build .</code> in the project's root directory and look at the stack trace for clues.</p> Info <p>For issues regarding mp-build and docker, see Docker's page.</p>"},{"location":"troubleshooting_and_faq/collections/","title":"mp-test","text":""},{"location":"troubleshooting_and_faq/collections/#mp-test-returns-500-internal-server-error","title":"<code>mp-test</code> returns '500 INTERNAL SERVER ERROR'","text":"<p>Internal server errors can happen for various reasons; however, the most common cause is an unhandled exception or syntax error in the adapter's code. Check the server logs for clues about the issue. Sometimes, the problem may be detected using <code>mp-test</code> and going over the terminal output.</p>"},{"location":"troubleshooting_and_faq/collections/#collection-returns-no-collection-result-was-found","title":"Collection returns 'No collection result was found'","text":"<p><code>mp-test</code> runs a series of validations test after collection; if the collection has no results, then each validation step will report the result as missing. When a collection result is missing, it usually means an error occurred during collection, but the Adapter handled the error. When the Adapter handles an error, the response contains an error message; The console displays the error message. For example:</p> <pre><code>def collect(adapter_instance: AdapterInstance) -&gt; CollectResult:\n  result = CollectResult()\n  try:\n    raise Exception(\"oops\")\n\n    #...\n  except Exception as e:\n    logger.error(\"Unexpected collection error\")\n    logger.exception(e)\n    result.with_error(\"Unexpected collection error: \" + repr(e))\n    return result\n</code></pre> <p>This code will output</p> <p><pre><code>Building adapter [Finished]\nWaiting for adapter to start [Finished]\nRunning Collect [Finished]\nCollection Failed: Unexpected collection error: Exception('oops')\n\nAvg CPU %                     | Avg Memory Usage %         | Memory Limit | Network I/O         | Block I/O\n------------------------------+----------------------------+--------------+---------------------+--------------\n21.1 % (0.0% / 21.1% / 42.2%) | 4.0 % (4.0% / 4.0% / 4.0%) | 1.0 GiB      | 3.24 KiB / 6.67 KiB | 0.0 B / 0.0 B\n\nCollection completed in 0.45 seconds.\n\nNo collection result was found.\nNo collection result was found.\nAll validation logs written to '/Users/user/management-pack/test-management-pack/logs/validation.log'\n</code></pre> As seen above, the Exception is mentioned as the reason for the collection error, and the <code>No collection result was found</code> message is also shown. Using the collection error message along with the <code>adapter.log</code> can help trace the cause of the issue.</p>"},{"location":"troubleshooting_and_faq/collections/#is-there-a-way-to-cache-data-for-subsequent-collections","title":"Is there a way to cache data for subsequent collections?","text":"<p>The containerized adapter does not support caching data between collections.</p>"},{"location":"troubleshooting_and_faq/collections/#can-i-implement-on-demand-collections","title":"Can I implement on-demand collections?","text":"<p>The containerized adapter does not support on-demand collections.</p> Info <p>For issues regarding mp-test and docker, see Docker's page.</p>"},{"location":"troubleshooting_and_faq/container_registries/","title":"Container Registries","text":""},{"location":"troubleshooting_and_faq/container_registries/#why-do-i-need-a-container-registry","title":"Why do I need a container registry?","text":"<p>Containerized adapters use container registries to store, distribute, and install adapters. During the development of an adapter, mp-build requires a container registry to upload the resulting container. After uploading the container to the given registry, <code>mp-build</code> saves the host, and the container digest in the <code>&lt;ADAPTERNAME&gt;.conf</code> file bundled inside the pak file. During installation, VMware Aria Operations uses the information inside the <code>&lt;ADAPTERNAME&gt;.conf</code> file to pull the container from the registry and run the container.</p> <p>Info</p> <p>For help setting up a container registry see:</p> <ul> <li>How can I set up a private container registry for my project</li> <li>How can I set up an AWS container registry for my project</li> <li>How can I set up a Docker Hub container registry for my project</li> </ul>"},{"location":"troubleshooting_and_faq/container_registries/#how-are-registry-credentials-managed","title":"How are registry credentials managed?","text":"<p>The Docker daemon manages docker credentials. To learn more about how the docker daemon manages credentials, visit the docker credential store page</p>"},{"location":"troubleshooting_and_faq/container_registries/#how-can-i-set-up-an-aws-container-registry-for-my-project","title":"How can I set up an AWS container registry for my project?","text":"<p>Todo</p> <p>Add a note about registries being public</p> <p>AWS container registries use <code>aws</code> CLI to authenticate, so users should authenticate to their AWS container registry and create a repository before running <code>mp-build</code>.</p> <ol> <li>Log in to your registry using aws CLI</li> <li>Create a repository</li> <li>Run <code>mp-build</code> and use the registry tag when prompted about it (usually looks like <code>aws_account_id.dkr.ecr.region.amazonaws.com/hello-repository</code>)</li> </ol>"},{"location":"troubleshooting_and_faq/container_registries/#how-can-i-set-up-a-docker-hub-container-registry-for-my-project","title":"How can I set up a Docker Hub container registry for my project?","text":"<p>Warning</p> <p>VMware Aria Operations only supports anonymous pulling of images, which may cause issues when using Docker Hub since there is a Download rate limit. To use a private registry see How can I set up a private container registry for my project?</p> <p>Docker CLI recommends using a token when using docker hub instead of your login password, so users should authenticate their Docker Hub account before running <code>mp-build</code>.</p> <ol> <li>Go to Docker Hub and create a new repository</li> <li> <p>Login to docker hub using the CLI docker login</p> <pre><code>docker login\n</code></pre> </li> <li> <p>Run <code>mp-build</code>.When prompted about the tag for the container registry, use the following format:</p> <p><pre><code>docker.io/USER_NAME/CONTAINER_REPOSITORY\n</code></pre> The <code>USER_NAME</code> should be the same username used to login into docker hub in step 3, and the <code>CONTAINER_REPOSITORY</code> should be the registry created in step one. After entering the tag, you will be prompted to enter your credentials to log into Docker Hub. Enter the same credentials used in step 2.</p> </li> </ol> Note <p>If <code>mp-build</code> doesn't prompt for a tag for the container repository, open the <code>config.json</code> file in the project's root directory, then replace the key-value of <code>container_repository</code> with the tag.</p>"},{"location":"troubleshooting_and_faq/container_registries/#how-can-i-set-up-a-private-container-registry-for-my-project","title":"How can I set up a private container registry for my project?","text":"<p>VMware Aria Operations only supports anonymous pulling of images, however, cloud proxies lookup images locally before attempting to pull.</p> <ol> <li>ssh into the cloud proxy where the adapter is going to be set up</li> <li>pull the same image used by the management pack (usually using the docker CLI inside the adapter)</li> <li>Install Management Pack in VMware Aria operations</li> </ol>"},{"location":"troubleshooting_and_faq/container_registries/#how-can-i-change-the-container-registry-for-my-project","title":"How can I change the container registry for my project?","text":"<p>Open the <code>config.json</code> file located in the project's root directory, then replace the key-value for <code>container_repository</code> with the tag of the repository you want to use. The next time <code>mp-build</code> is run, the new tag will be used and validated.</p>"},{"location":"troubleshooting_and_faq/docker/","title":"Docker","text":""},{"location":"troubleshooting_and_faq/docker/#when-starting-docker-i-get-permission-denied-while-trying-to-connect-to-the-docker-daemon","title":"When starting Docker, I get 'Permission denied while trying to connect to the Docker daemon'","text":"<p>If you're having trouble getting Docker to run on your system, you can refer to the Docker documentation for instructions on how to start Docker on macOS, Linux, and Windows 10 and 11.</p>"},{"location":"troubleshooting_and_faq/docker/#when-starting-docker-on-windows-i-get-cannot-connect-to-docker-daemon","title":"When starting Docker on Windows, I get 'Cannot connect to Docker daemon'","text":"<p>If you're having trouble with permissions on a Windows system, you can refer to the Docker documentation for instructions on how to Understand permission requirements for Windows.</p>"},{"location":"troubleshooting_and_faq/docker/#when-using-mp-test-and-mp-build-i-get-a-cannot-connect-to-the-docker-daemon-error","title":"When using mp-test and mp-build, I get a \"Cannot connect to the Docker daemon\" error","text":"<p>There are multiple causes for this error; the most common causes and solutions are:</p> <ol> <li> <p>The Docker daemon is not running. Possible solutions are:</p> <ul> <li>Open the Desktop application</li> <li>See Docker's documentation for starting the daemon using OS utilities</li> <li>See Docker's documentation for troubleshooting the Docker daemon</li> </ul> </li> <li> <p>The Docker daemon is running, but the socket is not open or accessible. Possible solutions are:</p> <ul> <li>Open Docker Desktop application \u2192 navigate to Settings on the top right corner (Cog icon) \u2192 Advanced (Cogs icon) \u2192 make sure \"Allow the default Docker socket to be used\" is enabled.</li> <li>Ensure permissions to access the Docker daemon socket are enabled:<ul> <li>For MacOs</li> <li>For Windows</li> <li>FOR Linux</li> </ul> </li> </ul> </li> </ol>"},{"location":"troubleshooting_and_faq/logs/","title":"Logs","text":""},{"location":"troubleshooting_and_faq/logs/#where-are-the-adapter-logs-stored-locally","title":"Where are the adapter logs stored locally?","text":"<p>Logs generated by <code>mp-test</code> or <code>mp-build</code> are stored in the <code>logs</code> sub-directory of the project.</p>"},{"location":"troubleshooting_and_faq/logs/#where-are-the-adapter-logs-stored-in-vmware-aria-operations","title":"Where are the adapter logs stored in VMware Aria Operations?","text":"<p>Logs are generated and stored on the cloud proxy where the adapter is running at <code>$ALIVE_BASE/user/log/adapter/&lt;ADAPTERKEY&gt;/&lt;ADAPTER_INTERNAL_INSTANCE_ID&gt;</code>.</p> <p><code>ADAPTERKEY</code> should match the adapter key used in the <code>manifest.txt</code>, and the <code>ADAPTER_INTERNAL_INSTANCE_ID</code> should match the Internal ID found in VMware Aria Operations at Environment \u2192 Inventory \u2192 Adapter Instances \u2192 &lt;ADAPTER_DISPLAY_NAME&gt; \u2192 &lt;ADAPTER_INSTANCE&gt; in the rightmost column. The <code>Internal ID</code> column is not displayed by default. To display the Internal ID, enable the <code>Internal ID</code> column by clicking the lower left 'column' icon and then checking the <code>Internal ID</code> box.</p> <p></p> <p></p>"},{"location":"troubleshooting_and_faq/logs/#what-are-the-different-log-files-used-for","title":"What are the different log files used for?","text":"<p>There are five types of log files: adapter, server, build, test, and validation logs. Each log file is prepended with the type of log file followed by a number that represents rollover.</p> <ul> <li> <p><code>server.log</code>:   Contains all logs related to the HTTP server inside the container. Server logs can't be modified since the server code comes packaged   inside the base-adapter Python image.</p> </li> <li> <p><code>adapter.log</code>   Contains all logs related to the adapter. Adapter logs are all the logs generated by adapter code (e.g., the test() method or the collect() methods inside   <code>app/adapter.py</code>).</p> </li> <li> <p><code>test.log</code>   Contains all logs related to <code>mp-test</code>.</p> </li> <li> <p><code>build.log</code>   Contains all logs related to <code>mp-build</code>.</p> </li> <li> <p><code>validation.log</code>   Contains a log of the validations performed by <code>mp-test</code> on the collection results. Validation logs are only generated locally.</p> </li> </ul>"},{"location":"troubleshooting_and_faq/logs/#how-do-i-add-logs-to-my-adapter","title":"How do I add logs to my adapter?","text":"<p>The template adapter defines a logger variable in the <code>adapter.py</code> file that configures all adapter logging using adapter_logging from the Python SDK. The logger only needs to be configured once; to generate logs in other files, simply import the Python logging module. Eg.</p> <pre><code>import logging\n\nlogger = logging.getLogger(__name__)\n\ndef my_method():\n  logger.info(\"info log\")\n  logger.warning(\"warning log\")\n  logger.error(\"error log\")\n  logger.debug(\"debug log\")\n   ...\n</code></pre>"},{"location":"troubleshooting_and_faq/logs/#how-do-i-change-the-server-andor-adapter-log-level","title":"How do I change the server and/or adapter log level?","text":"<p>You can set the log levels for the server and adapter inside the <code>loglevels.cfg</code> file, which is located in <code>logs/loglevels.cfg</code> locally and on the cloud proxy at <code>$ALIVE_BASE/user/log/adapters/&lt;ADAPTERKEY&gt;/&lt;ADAPTER_INTERNAL_INSTANCE_ID&gt;/loglevels.cfg</code>. If the file does not exist, the system generates it after a collection/test.</p> <p><code>ADAPTERKEY</code> should match the name of the adapter used in the <code>manifest.txt</code>, and the <code>ADAPTER_INTERNAL_INSTANCE_ID</code> should match the Internal ID found in VMware Aria Operations at Environment \u2192 Inventory \u2192 Adapter Instances \u2192 &lt;ADAPTER_DISPLAY_NAME&gt; \u2192 &lt;ADAPTER_INSTANCE&gt; in the rightmost column. The <code>Internal ID</code> column is not displayed by default. To display the Internal ID, enable the <code>Internal ID</code> column by clicking the lower left 'column' icon and then checking the <code>Internal ID</code> box.</p> <p></p> <p></p>"},{"location":"troubleshooting_and_faq/logs/#how-do-i-change-the-log-level-of-mp-init-mp-test-or-mp-build","title":"How do I change the log level of mp-init, mp-test, or mp-build?","text":"<p>All SDK tools read the LOG_LEVEL environment variable to set the log level of their console output. For example, to set log level to debug to see a verbose output of the any of the CLI tools we can set the LOG_LEVEL variable:</p> <p>For Linux and macOS   <pre><code>LOG_LEVEL=debug mp-build\n</code></pre> For Windows   <pre><code>set LOG_LEVEL=debug\nmp-build\n</code></pre> For Windows, set the log level back to <code>info</code> after debugging.</p> <p>The SDK CLI tools support <code>debug</code>, <code>warn</code>, <code>info</code>, and <code>error</code> levels.</p>"},{"location":"troubleshooting_and_faq/other/","title":"Other","text":""},{"location":"troubleshooting_and_faq/other/#how-can-i-implement-policy-and-capacity-models","title":"How can I implement Policy and Capacity models?","text":"<p>Policy and capacity models can only be specified by writing a <code>describe.xml</code> file in the <code>conf</code> directory.</p>"},{"location":"troubleshooting_and_faq/other/#are-there-replacements-for-onconfigure-onstopcollection-and-ondiscard-methods","title":"Are there replacements for  <code>onConfigure</code>, <code>onStopCollection</code>, and <code>onDiscard</code> methods?","text":"<p>The <code>onConfigure</code>, <code>onStopCollection</code>, and <code>onDiscard</code> methods have no replacement in the new integration SDK.</p>"},{"location":"troubleshooting_and_faq/other/#vmware-aria-operations-returns-unknown-adapter-type-when-setting-up-new-adapter-instance","title":"VMware Aria Operations returns 'Unknown adapter type' when setting up new adapter instance","text":"<p>Example of an 'Unknown Adapter Type' error message for an adapter with type/key 'Testserver'.</p> <p>If the pak file installs successfully but errors when creating an account (adapter instance), check that:</p> <ul> <li>The Collector/Group the MP is running on is a Cloud Proxy, and</li> <li>Check that the Cloud Proxy supports containerized adapters. Containerized adapter   support is supported in VMware Aria Operations version 8.10.0 and later.</li> </ul>"},{"location":"troubleshooting_and_faq/other/#how-do-i-migrate-connection-related-elements-from-configjson-to-connectionsjson","title":"How do I migrate connection-related elements from config.json to connections.json?","text":"<p>As of version 1.0.0, all connection-related elements from the project config file have been migrated to a new project connections JSON file(<code>connections.json</code>). As part of this change, both <code>mp-test</code> and <code>mp-build</code> will offer to migrate connection-related elements to the <code>connections.json</code> file when present in the <code>config.json</code> file (The new <code>connections.json</code> file is automatically added to the project's <code>.gitignore</code> to prevent sensitive information from being committed). Moving all the connection-related information away from the <code>config.json</code> file allows users to include their project configuration file in version control, making using the same <code>container_repository</code> for the project easier.</p> Note <ul> <li><code>mp-build</code> and <code>mp-init</code> do not remove <code>config.json</code> from <code>.gitignore</code>, so users who want to share the project's <code>config.json</code> file must remove it manually.</li> <li>If <code>connections.json</code> exists, the user will not be prompted.</li> </ul>"}]}