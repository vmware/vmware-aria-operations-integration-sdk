# coding: utf-8
#  Copyright 2022-2023 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0
from __future__ import absolute_import

from datetime import date
from datetime import datetime
from typing import Dict
from typing import List

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.credential_definition import (
    CredentialDefinition,
)  # noqa: F401,E501
from swagger_server.models.object_definition import ObjectDefinition  # noqa: F401,E501


class AdapterDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        schema_version: int = None,
        adapter_key: str = None,
        adapter_label: str = None,
        describe_version: int = None,
        adapter_instance: ObjectDefinition = None,
        credential_types: List[CredentialDefinition] = None,
        object_types: List[ObjectDefinition] = None,
    ):  # noqa: E501
        """AdapterDefinition - a model defined in Swagger

        :param schema_version: The schema_version of this AdapterDefinition.  # noqa: E501
        :type schema_version: int
        :param adapter_key: The adapter_key of this AdapterDefinition.  # noqa: E501
        :type adapter_key: str
        :param adapter_label: The adapter_label of this AdapterDefinition.  # noqa: E501
        :type adapter_label: str
        :param describe_version: The describe_version of this AdapterDefinition.  # noqa: E501
        :type describe_version: int
        :param adapter_instance: The adapter_instance of this AdapterDefinition.  # noqa: E501
        :type adapter_instance: ObjectDefinition
        :param credential_types: The credential_types of this AdapterDefinition.  # noqa: E501
        :type credential_types: List[CredentialDefinition]
        :param object_types: The object_types of this AdapterDefinition.  # noqa: E501
        :type object_types: List[ObjectDefinition]
        """
        self.swagger_types = {
            "schema_version": int,
            "adapter_key": str,
            "adapter_label": str,
            "describe_version": int,
            "adapter_instance": ObjectDefinition,
            "credential_types": List[CredentialDefinition],
            "object_types": List[ObjectDefinition],
        }

        self.attribute_map = {
            "schema_version": "schema_version",
            "adapter_key": "adapter_key",
            "adapter_label": "adapter_label",
            "describe_version": "describe_version",
            "adapter_instance": "adapter_instance",
            "credential_types": "credential_types",
            "object_types": "object_types",
        }
        self._schema_version = schema_version
        self._adapter_key = adapter_key
        self._adapter_label = adapter_label
        self._describe_version = describe_version
        self._adapter_instance = adapter_instance
        self._credential_types = credential_types
        self._object_types = object_types

    @classmethod
    def from_dict(cls, dikt) -> "AdapterDefinition":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdapterDefinition of this AdapterDefinition.  # noqa: E501
        :rtype: AdapterDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def schema_version(self) -> int:
        """Gets the schema_version of this AdapterDefinition.


        :return: The schema_version of this AdapterDefinition.
        :rtype: int
        """
        return self._schema_version

    @schema_version.setter
    def schema_version(self, schema_version: int):
        """Sets the schema_version of this AdapterDefinition.


        :param schema_version: The schema_version of this AdapterDefinition.
        :type schema_version: int
        """

        self._schema_version = schema_version

    @property
    def adapter_key(self) -> str:
        """Gets the adapter_key of this AdapterDefinition.


        :return: The adapter_key of this AdapterDefinition.
        :rtype: str
        """
        return self._adapter_key

    @adapter_key.setter
    def adapter_key(self, adapter_key: str):
        """Sets the adapter_key of this AdapterDefinition.


        :param adapter_key: The adapter_key of this AdapterDefinition.
        :type adapter_key: str
        """
        if adapter_key is None:
            raise ValueError(
                "Invalid value for `adapter_key`, must not be `None`"
            )  # noqa: E501

        self._adapter_key = adapter_key

    @property
    def adapter_label(self) -> str:
        """Gets the adapter_label of this AdapterDefinition.


        :return: The adapter_label of this AdapterDefinition.
        :rtype: str
        """
        return self._adapter_label

    @adapter_label.setter
    def adapter_label(self, adapter_label: str):
        """Sets the adapter_label of this AdapterDefinition.


        :param adapter_label: The adapter_label of this AdapterDefinition.
        :type adapter_label: str
        """
        if adapter_label is None:
            raise ValueError(
                "Invalid value for `adapter_label`, must not be `None`"
            )  # noqa: E501

        self._adapter_label = adapter_label

    @property
    def describe_version(self) -> int:
        """Gets the describe_version of this AdapterDefinition.


        :return: The describe_version of this AdapterDefinition.
        :rtype: int
        """
        return self._describe_version

    @describe_version.setter
    def describe_version(self, describe_version: int):
        """Sets the describe_version of this AdapterDefinition.


        :param describe_version: The describe_version of this AdapterDefinition.
        :type describe_version: int
        """
        if describe_version is None:
            raise ValueError(
                "Invalid value for `describe_version`, must not be `None`"
            )  # noqa: E501

        self._describe_version = describe_version

    @property
    def adapter_instance(self) -> ObjectDefinition:
        """Gets the adapter_instance of this AdapterDefinition.


        :return: The adapter_instance of this AdapterDefinition.
        :rtype: ObjectDefinition
        """
        return self._adapter_instance

    @adapter_instance.setter
    def adapter_instance(self, adapter_instance: ObjectDefinition):
        """Sets the adapter_instance of this AdapterDefinition.


        :param adapter_instance: The adapter_instance of this AdapterDefinition.
        :type adapter_instance: ObjectDefinition
        """
        if adapter_instance is None:
            raise ValueError(
                "Invalid value for `adapter_instance`, must not be `None`"
            )  # noqa: E501

        self._adapter_instance = adapter_instance

    @property
    def credential_types(self) -> List[CredentialDefinition]:
        """Gets the credential_types of this AdapterDefinition.


        :return: The credential_types of this AdapterDefinition.
        :rtype: List[CredentialDefinition]
        """
        return self._credential_types

    @credential_types.setter
    def credential_types(self, credential_types: List[CredentialDefinition]):
        """Sets the credential_types of this AdapterDefinition.


        :param credential_types: The credential_types of this AdapterDefinition.
        :type credential_types: List[CredentialDefinition]
        """
        if credential_types is None:
            raise ValueError(
                "Invalid value for `credential_types`, must not be `None`"
            )  # noqa: E501

        self._credential_types = credential_types

    @property
    def object_types(self) -> List[ObjectDefinition]:
        """Gets the object_types of this AdapterDefinition.


        :return: The object_types of this AdapterDefinition.
        :rtype: List[ObjectDefinition]
        """
        return self._object_types

    @object_types.setter
    def object_types(self, object_types: List[ObjectDefinition]):
        """Sets the object_types of this AdapterDefinition.


        :param object_types: The object_types of this AdapterDefinition.
        :type object_types: List[ObjectDefinition]
        """
        if object_types is None:
            raise ValueError(
                "Invalid value for `object_types`, must not be `None`"
            )  # noqa: E501

        self._object_types = object_types
