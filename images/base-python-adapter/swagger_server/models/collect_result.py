# coding: utf-8

#  Copyright 2022 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.object_data import ObjectData  # noqa: F401,E501
from swagger_server.models.object_key import ObjectKey  # noqa: F401,E501
from swagger_server.models.object_relationship import ObjectRelationship  # noqa: F401,E501
from swagger_server import util


class CollectResult(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, result: List[ObjectData]=None, relationships: List[ObjectRelationship]=None, not_existing_objects: List[ObjectKey]=None, error_message: str=None):  # noqa: E501
        """CollectResult - a model defined in Swagger

        :param result: The result of this CollectResult.  # noqa: E501
        :type result: List[ObjectData]
        :param relationships: The relationships of this CollectResult.  # noqa: E501
        :type relationships: List[ObjectRelationship]
        :param not_existing_objects: The not_existing_objects of this CollectResult.  # noqa: E501
        :type not_existing_objects: List[ObjectKey]
        :param error_message: The error_message of this CollectResult.  # noqa: E501
        :type error_message: str
        """
        self.swagger_types = {
            'result': List[ObjectData],
            'relationships': List[ObjectRelationship],
            'not_existing_objects': List[ObjectKey],
            'error_message': str
        }

        self.attribute_map = {
            'result': 'result',
            'relationships': 'relationships',
            'not_existing_objects': 'notExistingObjects',
            'error_message': 'errorMessage'
        }
        self._result = result
        self._relationships = relationships
        self._not_existing_objects = not_existing_objects
        self._error_message = error_message

    @classmethod
    def from_dict(cls, dikt) -> 'CollectResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CollectResult of this CollectResult.  # noqa: E501
        :rtype: CollectResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def result(self) -> List[ObjectData]:
        """Gets the result of this CollectResult.

        Collection of collected objects with metrics and properties.  # noqa: E501

        :return: The result of this CollectResult.
        :rtype: List[ObjectData]
        """
        return self._result

    @result.setter
    def result(self, result: List[ObjectData]):
        """Sets the result of this CollectResult.

        Collection of collected objects with metrics and properties.  # noqa: E501

        :param result: The result of this CollectResult.
        :type result: List[ObjectData]
        """

        self._result = result

    @property
    def relationships(self) -> List[ObjectRelationship]:
        """Gets the relationships of this CollectResult.

        Collection of objects relationships with parent to children structure.  # noqa: E501

        :return: The relationships of this CollectResult.
        :rtype: List[ObjectRelationship]
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships: List[ObjectRelationship]):
        """Sets the relationships of this CollectResult.

        Collection of objects relationships with parent to children structure.  # noqa: E501

        :param relationships: The relationships of this CollectResult.
        :type relationships: List[ObjectRelationship]
        """

        self._relationships = relationships

    @property
    def not_existing_objects(self) -> List[ObjectKey]:
        """Gets the not_existing_objects of this CollectResult.

        Collection of not existing objects.  # noqa: E501

        :return: The not_existing_objects of this CollectResult.
        :rtype: List[ObjectKey]
        """
        return self._not_existing_objects

    @not_existing_objects.setter
    def not_existing_objects(self, not_existing_objects: List[ObjectKey]):
        """Sets the not_existing_objects of this CollectResult.

        Collection of not existing objects.  # noqa: E501

        :param not_existing_objects: The not_existing_objects of this CollectResult.
        :type not_existing_objects: List[ObjectKey]
        """

        self._not_existing_objects = not_existing_objects

    @property
    def error_message(self) -> str:
        """Gets the error_message of this CollectResult.


        :return: The error_message of this CollectResult.
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message: str):
        """Sets the error_message of this CollectResult.


        :param error_message: The error_message of this CollectResult.
        :type error_message: str
        """

        self._error_message = error_message
