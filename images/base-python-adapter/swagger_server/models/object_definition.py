# coding: utf-8
#  Copyright 2022-2023 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0
from __future__ import absolute_import

from datetime import date
from datetime import datetime
from typing import Dict
from typing import List

from swagger_server import util
from swagger_server.models.attribute_definition import (
    AttributeDefinition,
)  # noqa: F401,E501
from swagger_server.models.base_model_ import Model
from swagger_server.models.group_definition import GroupDefinition  # noqa: F401,E501
from swagger_server.models.identifier_definition import (
    IdentifierDefinition,
)  # noqa: F401,E501


class ObjectDefinition(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        key: str = None,
        label: str = None,
        identifiers: List[IdentifierDefinition] = None,
        attributes: List[AttributeDefinition] = None,
        groups: List[GroupDefinition] = None,
    ):  # noqa: E501
        """ObjectDefinition - a model defined in Swagger

        :param key: The key of this ObjectDefinition.  # noqa: E501
        :type key: str
        :param label: The label of this ObjectDefinition.  # noqa: E501
        :type label: str
        :param identifiers: The identifiers of this ObjectDefinition.  # noqa: E501
        :type identifiers: List[IdentifierDefinition]
        :param attributes: The attributes of this ObjectDefinition.  # noqa: E501
        :type attributes: List[AttributeDefinition]
        :param groups: The groups of this ObjectDefinition.  # noqa: E501
        :type groups: List[GroupDefinition]
        """
        self.swagger_types = {
            "key": str,
            "label": str,
            "identifiers": List[IdentifierDefinition],
            "attributes": List[AttributeDefinition],
            "groups": List[GroupDefinition],
        }

        self.attribute_map = {
            "key": "key",
            "label": "label",
            "identifiers": "identifiers",
            "attributes": "attributes",
            "groups": "groups",
        }
        self._key = key
        self._label = label
        self._identifiers = identifiers
        self._attributes = attributes
        self._groups = groups

    @classmethod
    def from_dict(cls, dikt) -> "ObjectDefinition":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObjectDefinition of this ObjectDefinition.  # noqa: E501
        :rtype: ObjectDefinition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this ObjectDefinition.


        :return: The key of this ObjectDefinition.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ObjectDefinition.


        :param key: The key of this ObjectDefinition.
        :type key: str
        """
        if key is None:
            raise ValueError(
                "Invalid value for `key`, must not be `None`"
            )  # noqa: E501

        self._key = key

    @property
    def label(self) -> str:
        """Gets the label of this ObjectDefinition.


        :return: The label of this ObjectDefinition.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this ObjectDefinition.


        :param label: The label of this ObjectDefinition.
        :type label: str
        """
        if label is None:
            raise ValueError(
                "Invalid value for `label`, must not be `None`"
            )  # noqa: E501

        self._label = label

    @property
    def identifiers(self) -> List[IdentifierDefinition]:
        """Gets the identifiers of this ObjectDefinition.


        :return: The identifiers of this ObjectDefinition.
        :rtype: List[IdentifierDefinition]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers: List[IdentifierDefinition]):
        """Sets the identifiers of this ObjectDefinition.


        :param identifiers: The identifiers of this ObjectDefinition.
        :type identifiers: List[IdentifierDefinition]
        """
        if identifiers is None:
            raise ValueError(
                "Invalid value for `identifiers`, must not be `None`"
            )  # noqa: E501

        self._identifiers = identifiers

    @property
    def attributes(self) -> List[AttributeDefinition]:
        """Gets the attributes of this ObjectDefinition.


        :return: The attributes of this ObjectDefinition.
        :rtype: List[AttributeDefinition]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: List[AttributeDefinition]):
        """Sets the attributes of this ObjectDefinition.


        :param attributes: The attributes of this ObjectDefinition.
        :type attributes: List[AttributeDefinition]
        """

        self._attributes = attributes

    @property
    def groups(self) -> List[GroupDefinition]:
        """Gets the groups of this ObjectDefinition.


        :return: The groups of this ObjectDefinition.
        :rtype: List[GroupDefinition]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[GroupDefinition]):
        """Sets the groups of this ObjectDefinition.


        :param groups: The groups of this ObjectDefinition.
        :type groups: List[GroupDefinition]
        """
        if groups is None:
            raise ValueError(
                "Invalid value for `groups`, must not be `None`"
            )  # noqa: E501

        self._groups = groups
