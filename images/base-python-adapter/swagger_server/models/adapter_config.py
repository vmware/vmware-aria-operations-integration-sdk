# coding: utf-8
#  Copyright 2022-2023 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0
from __future__ import absolute_import

from datetime import date
from datetime import datetime
from typing import Dict
from typing import List

from swagger_server import util
from swagger_server.models.base_model_ import Model
from swagger_server.models.certificate_config import (
    CertificateConfig,
)  # noqa: F401,E501
from swagger_server.models.cluster_connection_info import (
    ClusterConnectionInfo,
)  # noqa: F401,E501
from swagger_server.models.collection_window import CollectionWindow  # noqa: F401,E501
from swagger_server.models.credential_config import CredentialConfig  # noqa: F401,E501
from swagger_server.models.object_key import ObjectKey  # noqa: F401,E501


class AdapterConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(
        self,
        adapter_key: ObjectKey = None,
        credential_config: CredentialConfig = None,
        cluster_connection_info: ClusterConnectionInfo = None,
        certificate_config: CertificateConfig = None,
        collection_number: int = None,
        collection_window: CollectionWindow = None,
    ):  # noqa: E501
        """AdapterConfig - a model defined in Swagger

        :param adapter_key: The adapter_key of this AdapterConfig.  # noqa: E501
        :type adapter_key: ObjectKey
        :param credential_config: The credential_config of this AdapterConfig.  # noqa: E501
        :type credential_config: CredentialConfig
        :param cluster_connection_info: The cluster_connection_info of this AdapterConfig.  # noqa: E501
        :type cluster_connection_info: ClusterConnectionInfo
        :param certificate_config: The certificate_config of this AdapterConfig.  # noqa: E501
        :type certificate_config: CertificateConfig
        :param collection_number: The collection_number of this AdapterConfig.  # noqa: E501
        :type collection_number: int
        :param collection_window: The collection_window of this AdapterConfig.  # noqa: E501
        :type collection_window: CollectionWindow
        """
        self.swagger_types = {
            "adapter_key": ObjectKey,
            "credential_config": CredentialConfig,
            "cluster_connection_info": ClusterConnectionInfo,
            "certificate_config": CertificateConfig,
            "collection_number": int,
            "collection_window": CollectionWindow,
        }

        self.attribute_map = {
            "adapter_key": "adapterKey",
            "credential_config": "credentialConfig",
            "cluster_connection_info": "clusterConnectionInfo",
            "certificate_config": "certificateConfig",
            "collection_number": "collectionNumber",
            "collection_window": "collectionWindow",
        }
        self._adapter_key = adapter_key
        self._credential_config = credential_config
        self._cluster_connection_info = cluster_connection_info
        self._certificate_config = certificate_config
        self._collection_number = collection_number
        self._collection_window = collection_window

    @classmethod
    def from_dict(cls, dikt) -> "AdapterConfig":
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdapterConfig of this AdapterConfig.  # noqa: E501
        :rtype: AdapterConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def adapter_key(self) -> ObjectKey:
        """Gets the adapter_key of this AdapterConfig.


        :return: The adapter_key of this AdapterConfig.
        :rtype: ObjectKey
        """
        return self._adapter_key

    @adapter_key.setter
    def adapter_key(self, adapter_key: ObjectKey):
        """Sets the adapter_key of this AdapterConfig.


        :param adapter_key: The adapter_key of this AdapterConfig.
        :type adapter_key: ObjectKey
        """
        if adapter_key is None:
            raise ValueError(
                "Invalid value for `adapter_key`, must not be `None`"
            )  # noqa: E501

        self._adapter_key = adapter_key

    @property
    def credential_config(self) -> CredentialConfig:
        """Gets the credential_config of this AdapterConfig.


        :return: The credential_config of this AdapterConfig.
        :rtype: CredentialConfig
        """
        return self._credential_config

    @credential_config.setter
    def credential_config(self, credential_config: CredentialConfig):
        """Sets the credential_config of this AdapterConfig.


        :param credential_config: The credential_config of this AdapterConfig.
        :type credential_config: CredentialConfig
        """

        self._credential_config = credential_config

    @property
    def cluster_connection_info(self) -> ClusterConnectionInfo:
        """Gets the cluster_connection_info of this AdapterConfig.


        :return: The cluster_connection_info of this AdapterConfig.
        :rtype: ClusterConnectionInfo
        """
        return self._cluster_connection_info

    @cluster_connection_info.setter
    def cluster_connection_info(self, cluster_connection_info: ClusterConnectionInfo):
        """Sets the cluster_connection_info of this AdapterConfig.


        :param cluster_connection_info: The cluster_connection_info of this AdapterConfig.
        :type cluster_connection_info: ClusterConnectionInfo
        """

        self._cluster_connection_info = cluster_connection_info

    @property
    def certificate_config(self) -> CertificateConfig:
        """Gets the certificate_config of this AdapterConfig.


        :return: The certificate_config of this AdapterConfig.
        :rtype: CertificateConfig
        """
        return self._certificate_config

    @certificate_config.setter
    def certificate_config(self, certificate_config: CertificateConfig):
        """Sets the certificate_config of this AdapterConfig.


        :param certificate_config: The certificate_config of this AdapterConfig.
        :type certificate_config: CertificateConfig
        """

        self._certificate_config = certificate_config

    @property
    def collection_number(self) -> int:
        """Gets the collection_number of this AdapterConfig.


        :return: The collection_number of this AdapterConfig.
        :rtype: int
        """
        return self._collection_number

    @collection_number.setter
    def collection_number(self, collection_number: int):
        """Sets the collection_number of this AdapterConfig.


        :param collection_number: The collection_number of this AdapterConfig.
        :type collection_number: int
        """

        self._collection_number = collection_number

    @property
    def collection_window(self) -> CollectionWindow:
        """Gets the collection_window of this AdapterConfig.


        :return: The collection_window of this AdapterConfig.
        :rtype: CollectionWindow
        """
        return self._collection_window

    @collection_window.setter
    def collection_window(self, collection_window: CollectionWindow):
        """Sets the collection_window of this AdapterConfig.


        :param collection_window: The collection_window of this AdapterConfig.
        :type collection_window: CollectionWindow
        """

        self._collection_window = collection_window
