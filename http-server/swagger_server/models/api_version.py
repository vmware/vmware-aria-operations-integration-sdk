# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ApiVersion(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, major: int=1, minor: int=0, maintenance: int=0):  # noqa: E501
        """ApiVersion - a model defined in Swagger

        :param major: The major of this ApiVersion.  # noqa: E501
        :type major: int
        :param minor: The minor of this ApiVersion.  # noqa: E501
        :type minor: int
        :param maintenance: The maintenance of this ApiVersion.  # noqa: E501
        :type maintenance: int
        """
        self.swagger_types = {
            'major': int,
            'minor': int,
            'maintenance': int
        }

        self.attribute_map = {
            'major': 'major',
            'minor': 'minor',
            'maintenance': 'maintenance'
        }
        self._major = major
        self._minor = minor
        self._maintenance = maintenance

    @classmethod
    def from_dict(cls, dikt) -> 'ApiVersion':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApiVersion of this ApiVersion.  # noqa: E501
        :rtype: ApiVersion
        """
        return util.deserialize_model(dikt, cls)

    @property
    def major(self) -> int:
        """Gets the major of this ApiVersion.


        :return: The major of this ApiVersion.
        :rtype: int
        """
        return self._major

    @major.setter
    def major(self, major: int):
        """Sets the major of this ApiVersion.


        :param major: The major of this ApiVersion.
        :type major: int
        """
        if major is None:
            raise ValueError("Invalid value for `major`, must not be `None`")  # noqa: E501

        self._major = major

    @property
    def minor(self) -> int:
        """Gets the minor of this ApiVersion.


        :return: The minor of this ApiVersion.
        :rtype: int
        """
        return self._minor

    @minor.setter
    def minor(self, minor: int):
        """Sets the minor of this ApiVersion.


        :param minor: The minor of this ApiVersion.
        :type minor: int
        """
        if minor is None:
            raise ValueError("Invalid value for `minor`, must not be `None`")  # noqa: E501

        self._minor = minor

    @property
    def maintenance(self) -> int:
        """Gets the maintenance of this ApiVersion.


        :return: The maintenance of this ApiVersion.
        :rtype: int
        """
        return self._maintenance

    @maintenance.setter
    def maintenance(self, maintenance: int):
        """Sets the maintenance of this ApiVersion.


        :param maintenance: The maintenance of this ApiVersion.
        :type maintenance: int
        """
        if maintenance is None:
            raise ValueError("Invalid value for `maintenance`, must not be `None`")  # noqa: E501

        self._maintenance = maintenance
