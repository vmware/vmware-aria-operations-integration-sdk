# coding: utf-8

#  Copyright 2022 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.identifier import Identifier  # noqa: F401,E501
from swagger_server import util


class ObjectKey(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, name: str=None, adapter_kind: str=None, object_kind: str=None, identifiers: List[Identifier]=None):  # noqa: E501
        """ObjectKey - a model defined in Swagger

        :param name: The name of this ObjectKey.  # noqa: E501
        :type name: str
        :param adapter_kind: The adapter_kind of this ObjectKey.  # noqa: E501
        :type adapter_kind: str
        :param object_kind: The object_kind of this ObjectKey.  # noqa: E501
        :type object_kind: str
        :param identifiers: The identifiers of this ObjectKey.  # noqa: E501
        :type identifiers: List[Identifier]
        """
        self.swagger_types = {
            'name': str,
            'adapter_kind': str,
            'object_kind': str,
            'identifiers': List[Identifier]
        }

        self.attribute_map = {
            'name': 'name',
            'adapter_kind': 'adapterKind',
            'object_kind': 'objectKind',
            'identifiers': 'identifiers'
        }
        self._name = name
        self._adapter_kind = adapter_kind
        self._object_kind = object_kind
        self._identifiers = identifiers

    @classmethod
    def from_dict(cls, dikt) -> 'ObjectKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ObjectKey of this ObjectKey.  # noqa: E501
        :rtype: ObjectKey
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this ObjectKey.

        Name of the object this key represents  # noqa: E501

        :return: The name of this ObjectKey.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ObjectKey.

        Name of the object this key represents  # noqa: E501

        :param name: The name of this ObjectKey.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def adapter_kind(self) -> str:
        """Gets the adapter_kind of this ObjectKey.

        Adapter kind key this key represents.  # noqa: E501

        :return: The adapter_kind of this ObjectKey.
        :rtype: str
        """
        return self._adapter_kind

    @adapter_kind.setter
    def adapter_kind(self, adapter_kind: str):
        """Sets the adapter_kind of this ObjectKey.

        Adapter kind key this key represents.  # noqa: E501

        :param adapter_kind: The adapter_kind of this ObjectKey.
        :type adapter_kind: str
        """
        if adapter_kind is None:
            raise ValueError("Invalid value for `adapter_kind`, must not be `None`")  # noqa: E501

        self._adapter_kind = adapter_kind

    @property
    def object_kind(self) -> str:
        """Gets the object_kind of this ObjectKey.

        The object kind key this key represents.  # noqa: E501

        :return: The object_kind of this ObjectKey.
        :rtype: str
        """
        return self._object_kind

    @object_kind.setter
    def object_kind(self, object_kind: str):
        """Sets the object_kind of this ObjectKey.

        The object kind key this key represents.  # noqa: E501

        :param object_kind: The object_kind of this ObjectKey.
        :type object_kind: str
        """
        if object_kind is None:
            raise ValueError("Invalid value for `object_kind`, must not be `None`")  # noqa: E501

        self._object_kind = object_kind

    @property
    def identifiers(self) -> List[Identifier]:
        """Gets the identifiers of this ObjectKey.

        Collection of identifiers for this key. Identifiers are case insensitive. No two identifiers with the same key can exist for the same resource.  # noqa: E501

        :return: The identifiers of this ObjectKey.
        :rtype: List[Identifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers: List[Identifier]):
        """Sets the identifiers of this ObjectKey.

        Collection of identifiers for this key. Identifiers are case insensitive. No two identifiers with the same key can exist for the same resource.  # noqa: E501

        :param identifiers: The identifiers of this ObjectKey.
        :type identifiers: List[Identifier]
        """

        self._identifiers = identifiers
