# coding: utf-8

#  Copyright 2022 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.credential_field import CredentialField  # noqa: F401,E501
from swagger_server import util


class CredentialConfig(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, credential_key: str=None, credential_fields: List[CredentialField]=None):  # noqa: E501
        """CredentialConfig - a model defined in Swagger

        :param credential_key: The credential_key of this CredentialConfig.  # noqa: E501
        :type credential_key: str
        :param credential_fields: The credential_fields of this CredentialConfig.  # noqa: E501
        :type credential_fields: List[CredentialField]
        """
        self.swagger_types = {
            'credential_key': str,
            'credential_fields': List[CredentialField]
        }

        self.attribute_map = {
            'credential_key': 'credentialKey',
            'credential_fields': 'credentialFields'
        }
        self._credential_key = credential_key
        self._credential_fields = credential_fields

    @classmethod
    def from_dict(cls, dikt) -> 'CredentialConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CredentialConfig of this CredentialConfig.  # noqa: E501
        :rtype: CredentialConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def credential_key(self) -> str:
        """Gets the credential_key of this CredentialConfig.

        Credential configuration key. In describe.xml file, the \"key\" attribute corresponds to this field.  # noqa: E501

        :return: The credential_key of this CredentialConfig.
        :rtype: str
        """
        return self._credential_key

    @credential_key.setter
    def credential_key(self, credential_key: str):
        """Sets the credential_key of this CredentialConfig.

        Credential configuration key. In describe.xml file, the \"key\" attribute corresponds to this field.  # noqa: E501

        :param credential_key: The credential_key of this CredentialConfig.
        :type credential_key: str
        """
        if credential_key is None:
            raise ValueError("Invalid value for `credential_key`, must not be `None`")  # noqa: E501

        self._credential_key = credential_key

    @property
    def credential_fields(self) -> List[CredentialField]:
        """Gets the credential_fields of this CredentialConfig.

        List of all credential field configurations. In describe.xml, the element \"CredentialField\" inside \"CredentialKind\" corresponds to individual elements in this list.  # noqa: E501

        :return: The credential_fields of this CredentialConfig.
        :rtype: List[CredentialField]
        """
        return self._credential_fields

    @credential_fields.setter
    def credential_fields(self, credential_fields: List[CredentialField]):
        """Sets the credential_fields of this CredentialConfig.

        List of all credential field configurations. In describe.xml, the element \"CredentialField\" inside \"CredentialKind\" corresponds to individual elements in this list.  # noqa: E501

        :param credential_fields: The credential_fields of this CredentialConfig.
        :type credential_fields: List[CredentialField]
        """
        if credential_fields is None:
            raise ValueError("Invalid value for `credential_fields`, must not be `None`")  # noqa: E501

        self._credential_fields = credential_fields
