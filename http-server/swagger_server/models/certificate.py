# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Certificate(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cert_pem_string: str=None, is_invalid_hostname_accepted: bool=False, is_expired_certificate_accepted: bool=False):  # noqa: E501
        """Certificate - a model defined in Swagger

        :param cert_pem_string: The cert_pem_string of this Certificate.  # noqa: E501
        :type cert_pem_string: str
        :param is_invalid_hostname_accepted: The is_invalid_hostname_accepted of this Certificate.  # noqa: E501
        :type is_invalid_hostname_accepted: bool
        :param is_expired_certificate_accepted: The is_expired_certificate_accepted of this Certificate.  # noqa: E501
        :type is_expired_certificate_accepted: bool
        """
        self.swagger_types = {
            'cert_pem_string': str,
            'is_invalid_hostname_accepted': bool,
            'is_expired_certificate_accepted': bool
        }

        self.attribute_map = {
            'cert_pem_string': 'certPemString',
            'is_invalid_hostname_accepted': 'isInvalidHostnameAccepted',
            'is_expired_certificate_accepted': 'isExpiredCertificateAccepted'
        }
        self._cert_pem_string = cert_pem_string
        self._is_invalid_hostname_accepted = is_invalid_hostname_accepted
        self._is_expired_certificate_accepted = is_expired_certificate_accepted

    @classmethod
    def from_dict(cls, dikt) -> 'Certificate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Certificate of this Certificate.  # noqa: E501
        :rtype: Certificate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cert_pem_string(self) -> str:
        """Gets the cert_pem_string of this Certificate.


        :return: The cert_pem_string of this Certificate.
        :rtype: str
        """
        return self._cert_pem_string

    @cert_pem_string.setter
    def cert_pem_string(self, cert_pem_string: str):
        """Sets the cert_pem_string of this Certificate.


        :param cert_pem_string: The cert_pem_string of this Certificate.
        :type cert_pem_string: str
        """
        if cert_pem_string is None:
            raise ValueError("Invalid value for `cert_pem_string`, must not be `None`")  # noqa: E501

        self._cert_pem_string = cert_pem_string

    @property
    def is_invalid_hostname_accepted(self) -> bool:
        """Gets the is_invalid_hostname_accepted of this Certificate.

        In case if the hostname verification fails and isInvalidHostnameAccepted is true  Adapter should do the verification by comparing the certificates from the endpoints with the certificates received from the Collector.  For example the comparison can be done by thumbprint.  # noqa: E501

        :return: The is_invalid_hostname_accepted of this Certificate.
        :rtype: bool
        """
        return self._is_invalid_hostname_accepted

    @is_invalid_hostname_accepted.setter
    def is_invalid_hostname_accepted(self, is_invalid_hostname_accepted: bool):
        """Sets the is_invalid_hostname_accepted of this Certificate.

        In case if the hostname verification fails and isInvalidHostnameAccepted is true  Adapter should do the verification by comparing the certificates from the endpoints with the certificates received from the Collector.  For example the comparison can be done by thumbprint.  # noqa: E501

        :param is_invalid_hostname_accepted: The is_invalid_hostname_accepted of this Certificate.
        :type is_invalid_hostname_accepted: bool
        """

        self._is_invalid_hostname_accepted = is_invalid_hostname_accepted

    @property
    def is_expired_certificate_accepted(self) -> bool:
        """Gets the is_expired_certificate_accepted of this Certificate.

        In case if the connection fails because of certificate expiration and isExpiredCertificateAccepted is true then the Adapter should ignore that failure and continue the connection.  # noqa: E501

        :return: The is_expired_certificate_accepted of this Certificate.
        :rtype: bool
        """
        return self._is_expired_certificate_accepted

    @is_expired_certificate_accepted.setter
    def is_expired_certificate_accepted(self, is_expired_certificate_accepted: bool):
        """Sets the is_expired_certificate_accepted of this Certificate.

        In case if the connection fails because of certificate expiration and isExpiredCertificateAccepted is true then the Adapter should ignore that failure and continue the connection.  # noqa: E501

        :param is_expired_certificate_accepted: The is_expired_certificate_accepted of this Certificate.
        :type is_expired_certificate_accepted: bool
        """

        self._is_expired_certificate_accepted = is_expired_certificate_accepted
