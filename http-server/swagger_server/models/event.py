# coding: utf-8

#  Copyright 2022 VMware, Inc.
#  SPDX-License-Identifier: Apache-2.0

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Event(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, criticality: int=0, message: str=None, fault_key: str=None, auto_cancel: bool=False, start_date: int=None, update_date: int=None, cancel_date: int=None, watch_wait_cycle: int=1, cancel_wait_cycle: int=3):  # noqa: E501
        """Event - a model defined in Swagger

        :param criticality: The criticality of this Event.  # noqa: E501
        :type criticality: int
        :param message: The message of this Event.  # noqa: E501
        :type message: str
        :param fault_key: The fault_key of this Event.  # noqa: E501
        :type fault_key: str
        :param auto_cancel: The auto_cancel of this Event.  # noqa: E501
        :type auto_cancel: bool
        :param start_date: The start_date of this Event.  # noqa: E501
        :type start_date: int
        :param update_date: The update_date of this Event.  # noqa: E501
        :type update_date: int
        :param cancel_date: The cancel_date of this Event.  # noqa: E501
        :type cancel_date: int
        :param watch_wait_cycle: The watch_wait_cycle of this Event.  # noqa: E501
        :type watch_wait_cycle: int
        :param cancel_wait_cycle: The cancel_wait_cycle of this Event.  # noqa: E501
        :type cancel_wait_cycle: int
        """
        self.swagger_types = {
            'criticality': int,
            'message': str,
            'fault_key': str,
            'auto_cancel': bool,
            'start_date': int,
            'update_date': int,
            'cancel_date': int,
            'watch_wait_cycle': int,
            'cancel_wait_cycle': int
        }

        self.attribute_map = {
            'criticality': 'criticality',
            'message': 'message',
            'fault_key': 'faultKey',
            'auto_cancel': 'autoCancel',
            'start_date': 'startDate',
            'update_date': 'updateDate',
            'cancel_date': 'cancelDate',
            'watch_wait_cycle': 'watchWaitCycle',
            'cancel_wait_cycle': 'cancelWaitCycle'
        }
        self._criticality = criticality
        self._message = message
        self._fault_key = fault_key
        self._auto_cancel = auto_cancel
        self._start_date = start_date
        self._update_date = update_date
        self._cancel_date = cancel_date
        self._watch_wait_cycle = watch_wait_cycle
        self._cancel_wait_cycle = cancel_wait_cycle

    @classmethod
    def from_dict(cls, dikt) -> 'Event':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Event of this Event.  # noqa: E501
        :rtype: Event
        """
        return util.deserialize_model(dikt, cls)

    @property
    def criticality(self) -> int:
        """Gets the criticality of this Event.


        :return: The criticality of this Event.
        :rtype: int
        """
        return self._criticality

    @criticality.setter
    def criticality(self, criticality: int):
        """Sets the criticality of this Event.


        :param criticality: The criticality of this Event.
        :type criticality: int
        """

        self._criticality = criticality

    @property
    def message(self) -> str:
        """Gets the message of this Event.


        :return: The message of this Event.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Event.


        :param message: The message of this Event.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def fault_key(self) -> str:
        """Gets the fault_key of this Event.


        :return: The fault_key of this Event.
        :rtype: str
        """
        return self._fault_key

    @fault_key.setter
    def fault_key(self, fault_key: str):
        """Sets the fault_key of this Event.


        :param fault_key: The fault_key of this Event.
        :type fault_key: str
        """

        self._fault_key = fault_key

    @property
    def auto_cancel(self) -> bool:
        """Gets the auto_cancel of this Event.


        :return: The auto_cancel of this Event.
        :rtype: bool
        """
        return self._auto_cancel

    @auto_cancel.setter
    def auto_cancel(self, auto_cancel: bool):
        """Sets the auto_cancel of this Event.


        :param auto_cancel: The auto_cancel of this Event.
        :type auto_cancel: bool
        """

        self._auto_cancel = auto_cancel

    @property
    def start_date(self) -> int:
        """Gets the start_date of this Event.


        :return: The start_date of this Event.
        :rtype: int
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: int):
        """Sets the start_date of this Event.


        :param start_date: The start_date of this Event.
        :type start_date: int
        """

        self._start_date = start_date

    @property
    def update_date(self) -> int:
        """Gets the update_date of this Event.


        :return: The update_date of this Event.
        :rtype: int
        """
        return self._update_date

    @update_date.setter
    def update_date(self, update_date: int):
        """Sets the update_date of this Event.


        :param update_date: The update_date of this Event.
        :type update_date: int
        """

        self._update_date = update_date

    @property
    def cancel_date(self) -> int:
        """Gets the cancel_date of this Event.


        :return: The cancel_date of this Event.
        :rtype: int
        """
        return self._cancel_date

    @cancel_date.setter
    def cancel_date(self, cancel_date: int):
        """Sets the cancel_date of this Event.


        :param cancel_date: The cancel_date of this Event.
        :type cancel_date: int
        """

        self._cancel_date = cancel_date

    @property
    def watch_wait_cycle(self) -> int:
        """Gets the watch_wait_cycle of this Event.


        :return: The watch_wait_cycle of this Event.
        :rtype: int
        """
        return self._watch_wait_cycle

    @watch_wait_cycle.setter
    def watch_wait_cycle(self, watch_wait_cycle: int):
        """Sets the watch_wait_cycle of this Event.


        :param watch_wait_cycle: The watch_wait_cycle of this Event.
        :type watch_wait_cycle: int
        """

        self._watch_wait_cycle = watch_wait_cycle

    @property
    def cancel_wait_cycle(self) -> int:
        """Gets the cancel_wait_cycle of this Event.


        :return: The cancel_wait_cycle of this Event.
        :rtype: int
        """
        return self._cancel_wait_cycle

    @cancel_wait_cycle.setter
    def cancel_wait_cycle(self, cancel_wait_cycle: int):
        """Sets the cancel_wait_cycle of this Event.


        :param cancel_wait_cycle: The cancel_wait_cycle of this Event.
        :type cancel_wait_cycle: int
        """

        self._cancel_wait_cycle = cancel_wait_cycle
